

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Aug 23 13:31:59 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	16LF1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	intentry,global,class=CODE,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   155                           	dabs	1,0x320,16
   156                           	dabs	1,0x2A4,76
   157                           	dabs	1,0x2A0,4
   158                           	dabs	1,0x220,80
   159                           	dabs	1,0x1E8,8
   160                           	dabs	1,0x2138,0,_loadPosition
   161                           	dabs	1,0x2194,0,_detectLoadPosition
   162                           	dabs	1,0x7E,2
   163  0000                     
   164                           ; Version 2.20
   165                           ; Generated 12/02/2020 GMT
   166                           ; 
   167                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   168                           ; All rights reserved.
   169                           ; 
   170                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   171                           ; 
   172                           ; Redistribution and use in source and binary forms, with or without modification, are
   173                           ; permitted provided that the following conditions are met:
   174                           ; 
   175                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   176                           ;        conditions and the following disclaimer.
   177                           ; 
   178                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   179                           ;        of conditions and the following disclaimer in the documentation and/or other
   180                           ;        materials provided with the distribution.
   181                           ; 
   182                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   183                           ;        software without specific prior written permission.
   184                           ; 
   185                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   186                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   187                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   188                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   189                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   190                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   191                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   192                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   193                           ; 
   194                           ; 
   195                           ; Code-generator required, PIC16LF1509 Definitions
   196                           ; 
   197                           ; SFR Addresses
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  000E                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0013                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0093                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  009F                     	;# 
   242  010C                     	;# 
   243  010D                     	;# 
   244  010E                     	;# 
   245  0111                     	;# 
   246  0112                     	;# 
   247  0113                     	;# 
   248  0114                     	;# 
   249  0115                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  0118                     	;# 
   253  0119                     	;# 
   254  011D                     	;# 
   255  018C                     	;# 
   256  018D                     	;# 
   257  018E                     	;# 
   258  0191                     	;# 
   259  0191                     	;# 
   260  0192                     	;# 
   261  0193                     	;# 
   262  0193                     	;# 
   263  0194                     	;# 
   264  0195                     	;# 
   265  0196                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020C                     	;# 
   275  020D                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  0498                     	;# 
   298  0498                     	;# 
   299  0499                     	;# 
   300  049A                     	;# 
   301  049B                     	;# 
   302  049B                     	;# 
   303  049C                     	;# 
   304  049D                     	;# 
   305  049E                     	;# 
   306  049F                     	;# 
   307  0611                     	;# 
   308  0612                     	;# 
   309  0613                     	;# 
   310  0613                     	;# 
   311  0614                     	;# 
   312  0615                     	;# 
   313  0616                     	;# 
   314  0616                     	;# 
   315  0617                     	;# 
   316  0618                     	;# 
   317  0619                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  061C                     	;# 
   323  0691                     	;# 
   324  0692                     	;# 
   325  0693                     	;# 
   326  0694                     	;# 
   327  0695                     	;# 
   328  0F0F                     	;# 
   329  0F10                     	;# 
   330  0F11                     	;# 
   331  0F12                     	;# 
   332  0F13                     	;# 
   333  0F14                     	;# 
   334  0F15                     	;# 
   335  0F16                     	;# 
   336  0F17                     	;# 
   337  0F18                     	;# 
   338  0F19                     	;# 
   339  0F1A                     	;# 
   340  0F1B                     	;# 
   341  0F1C                     	;# 
   342  0F1D                     	;# 
   343  0F1E                     	;# 
   344  0F1F                     	;# 
   345  0F20                     	;# 
   346  0F21                     	;# 
   347  0F22                     	;# 
   348  0F23                     	;# 
   349  0F24                     	;# 
   350  0F25                     	;# 
   351  0F26                     	;# 
   352  0F27                     	;# 
   353  0F28                     	;# 
   354  0F29                     	;# 
   355  0F2A                     	;# 
   356  0F2B                     	;# 
   357  0F2C                     	;# 
   358  0F2D                     	;# 
   359  0F2E                     	;# 
   360  0F2F                     	;# 
   361  0F8C                     	;# 
   362  0F8D                     	;# 
   363  0F91                     	;# 
   364  0F95                     	;# 
   365  0F96                     	;# 
   366  0F97                     	;# 
   367  0F9C                     	;# 
   368  0F9D                     	;# 
   369  0F9E                     	;# 
   370  0FE3                     	;# 
   371  0FE4                     	;# 
   372  0FE5                     	;# 
   373  0FE6                     	;# 
   374  0FE7                     	;# 
   375  0FE8                     	;# 
   376  0FE9                     	;# 
   377  0FEA                     	;# 
   378  0FEB                     	;# 
   379  0FED                     	;# 
   380  0FEE                     	;# 
   381  0FEF                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0013                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0113                     	;# 
   432  0114                     	;# 
   433  0115                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  0118                     	;# 
   437  0119                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020C                     	;# 
   459  020D                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0391                     	;# 
   476  0392                     	;# 
   477  0393                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0498                     	;# 
   482  0498                     	;# 
   483  0499                     	;# 
   484  049A                     	;# 
   485  049B                     	;# 
   486  049B                     	;# 
   487  049C                     	;# 
   488  049D                     	;# 
   489  049E                     	;# 
   490  049F                     	;# 
   491  0611                     	;# 
   492  0612                     	;# 
   493  0613                     	;# 
   494  0613                     	;# 
   495  0614                     	;# 
   496  0615                     	;# 
   497  0616                     	;# 
   498  0616                     	;# 
   499  0617                     	;# 
   500  0618                     	;# 
   501  0619                     	;# 
   502  0619                     	;# 
   503  061A                     	;# 
   504  061B                     	;# 
   505  061C                     	;# 
   506  061C                     	;# 
   507  0691                     	;# 
   508  0692                     	;# 
   509  0693                     	;# 
   510  0694                     	;# 
   511  0695                     	;# 
   512  0F0F                     	;# 
   513  0F10                     	;# 
   514  0F11                     	;# 
   515  0F12                     	;# 
   516  0F13                     	;# 
   517  0F14                     	;# 
   518  0F15                     	;# 
   519  0F16                     	;# 
   520  0F17                     	;# 
   521  0F18                     	;# 
   522  0F19                     	;# 
   523  0F1A                     	;# 
   524  0F1B                     	;# 
   525  0F1C                     	;# 
   526  0F1D                     	;# 
   527  0F1E                     	;# 
   528  0F1F                     	;# 
   529  0F20                     	;# 
   530  0F21                     	;# 
   531  0F22                     	;# 
   532  0F23                     	;# 
   533  0F24                     	;# 
   534  0F25                     	;# 
   535  0F26                     	;# 
   536  0F27                     	;# 
   537  0F28                     	;# 
   538  0F29                     	;# 
   539  0F2A                     	;# 
   540  0F2B                     	;# 
   541  0F2C                     	;# 
   542  0F2D                     	;# 
   543  0F2E                     	;# 
   544  0F2F                     	;# 
   545  0F8C                     	;# 
   546  0F8D                     	;# 
   547  0F91                     	;# 
   548  0F95                     	;# 
   549  0F96                     	;# 
   550  0F97                     	;# 
   551  0F9C                     	;# 
   552  0F9D                     	;# 
   553  0F9E                     	;# 
   554  0FE3                     	;# 
   555  0FE4                     	;# 
   556  0FE5                     	;# 
   557  0FE6                     	;# 
   558  0FE7                     	;# 
   559  0FE8                     	;# 
   560  0FE9                     	;# 
   561  0FEA                     	;# 
   562  0FEB                     	;# 
   563  0FED                     	;# 
   564  0FEE                     	;# 
   565  0FEF                     	;# 
   566  0000                     	;# 
   567  0001                     	;# 
   568  0002                     	;# 
   569  0003                     	;# 
   570  0004                     	;# 
   571  0005                     	;# 
   572  0006                     	;# 
   573  0007                     	;# 
   574  0008                     	;# 
   575  0009                     	;# 
   576  000A                     	;# 
   577  000B                     	;# 
   578  000C                     	;# 
   579  000D                     	;# 
   580  000E                     	;# 
   581  0011                     	;# 
   582  0012                     	;# 
   583  0013                     	;# 
   584  0015                     	;# 
   585  0016                     	;# 
   586  0016                     	;# 
   587  0017                     	;# 
   588  0018                     	;# 
   589  0019                     	;# 
   590  001A                     	;# 
   591  001B                     	;# 
   592  001C                     	;# 
   593  008C                     	;# 
   594  008D                     	;# 
   595  008E                     	;# 
   596  0091                     	;# 
   597  0092                     	;# 
   598  0093                     	;# 
   599  0095                     	;# 
   600  0096                     	;# 
   601  0097                     	;# 
   602  0099                     	;# 
   603  009A                     	;# 
   604  009B                     	;# 
   605  009B                     	;# 
   606  009C                     	;# 
   607  009D                     	;# 
   608  009E                     	;# 
   609  009F                     	;# 
   610  010C                     	;# 
   611  010D                     	;# 
   612  010E                     	;# 
   613  0111                     	;# 
   614  0112                     	;# 
   615  0113                     	;# 
   616  0114                     	;# 
   617  0115                     	;# 
   618  0116                     	;# 
   619  0117                     	;# 
   620  0118                     	;# 
   621  0119                     	;# 
   622  011D                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0194                     	;# 
   632  0195                     	;# 
   633  0196                     	;# 
   634  0199                     	;# 
   635  019A                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019E                     	;# 
   641  019F                     	;# 
   642  020C                     	;# 
   643  020D                     	;# 
   644  0211                     	;# 
   645  0211                     	;# 
   646  0212                     	;# 
   647  0212                     	;# 
   648  0213                     	;# 
   649  0213                     	;# 
   650  0214                     	;# 
   651  0214                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0215                     	;# 
   655  0216                     	;# 
   656  0216                     	;# 
   657  0217                     	;# 
   658  0217                     	;# 
   659  0391                     	;# 
   660  0392                     	;# 
   661  0393                     	;# 
   662  0394                     	;# 
   663  0395                     	;# 
   664  0396                     	;# 
   665  0498                     	;# 
   666  0498                     	;# 
   667  0499                     	;# 
   668  049A                     	;# 
   669  049B                     	;# 
   670  049B                     	;# 
   671  049C                     	;# 
   672  049D                     	;# 
   673  049E                     	;# 
   674  049F                     	;# 
   675  0611                     	;# 
   676  0612                     	;# 
   677  0613                     	;# 
   678  0613                     	;# 
   679  0614                     	;# 
   680  0615                     	;# 
   681  0616                     	;# 
   682  0616                     	;# 
   683  0617                     	;# 
   684  0618                     	;# 
   685  0619                     	;# 
   686  0619                     	;# 
   687  061A                     	;# 
   688  061B                     	;# 
   689  061C                     	;# 
   690  061C                     	;# 
   691  0691                     	;# 
   692  0692                     	;# 
   693  0693                     	;# 
   694  0694                     	;# 
   695  0695                     	;# 
   696  0F0F                     	;# 
   697  0F10                     	;# 
   698  0F11                     	;# 
   699  0F12                     	;# 
   700  0F13                     	;# 
   701  0F14                     	;# 
   702  0F15                     	;# 
   703  0F16                     	;# 
   704  0F17                     	;# 
   705  0F18                     	;# 
   706  0F19                     	;# 
   707  0F1A                     	;# 
   708  0F1B                     	;# 
   709  0F1C                     	;# 
   710  0F1D                     	;# 
   711  0F1E                     	;# 
   712  0F1F                     	;# 
   713  0F20                     	;# 
   714  0F21                     	;# 
   715  0F22                     	;# 
   716  0F23                     	;# 
   717  0F24                     	;# 
   718  0F25                     	;# 
   719  0F26                     	;# 
   720  0F27                     	;# 
   721  0F28                     	;# 
   722  0F29                     	;# 
   723  0F2A                     	;# 
   724  0F2B                     	;# 
   725  0F2C                     	;# 
   726  0F2D                     	;# 
   727  0F2E                     	;# 
   728  0F2F                     	;# 
   729  0F8C                     	;# 
   730  0F8D                     	;# 
   731  0F91                     	;# 
   732  0F95                     	;# 
   733  0F96                     	;# 
   734  0F97                     	;# 
   735  0F9C                     	;# 
   736  0F9D                     	;# 
   737  0F9E                     	;# 
   738  0FE3                     	;# 
   739  0FE4                     	;# 
   740  0FE5                     	;# 
   741  0FE6                     	;# 
   742  0FE7                     	;# 
   743  0FE8                     	;# 
   744  0FE9                     	;# 
   745  0FEA                     	;# 
   746  0FEB                     	;# 
   747  0FED                     	;# 
   748  0FEE                     	;# 
   749  0FEF                     	;# 
   750  0000                     	;# 
   751  0001                     	;# 
   752  0002                     	;# 
   753  0003                     	;# 
   754  0004                     	;# 
   755  0005                     	;# 
   756  0006                     	;# 
   757  0007                     	;# 
   758  0008                     	;# 
   759  0009                     	;# 
   760  000A                     	;# 
   761  000B                     	;# 
   762  000C                     	;# 
   763  000D                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008D                     	;# 
   779  008E                     	;# 
   780  0091                     	;# 
   781  0092                     	;# 
   782  0093                     	;# 
   783  0095                     	;# 
   784  0096                     	;# 
   785  0097                     	;# 
   786  0099                     	;# 
   787  009A                     	;# 
   788  009B                     	;# 
   789  009B                     	;# 
   790  009C                     	;# 
   791  009D                     	;# 
   792  009E                     	;# 
   793  009F                     	;# 
   794  010C                     	;# 
   795  010D                     	;# 
   796  010E                     	;# 
   797  0111                     	;# 
   798  0112                     	;# 
   799  0113                     	;# 
   800  0114                     	;# 
   801  0115                     	;# 
   802  0116                     	;# 
   803  0117                     	;# 
   804  0118                     	;# 
   805  0119                     	;# 
   806  011D                     	;# 
   807  018C                     	;# 
   808  018D                     	;# 
   809  018E                     	;# 
   810  0191                     	;# 
   811  0191                     	;# 
   812  0192                     	;# 
   813  0193                     	;# 
   814  0193                     	;# 
   815  0194                     	;# 
   816  0195                     	;# 
   817  0196                     	;# 
   818  0199                     	;# 
   819  019A                     	;# 
   820  019B                     	;# 
   821  019B                     	;# 
   822  019C                     	;# 
   823  019D                     	;# 
   824  019E                     	;# 
   825  019F                     	;# 
   826  020C                     	;# 
   827  020D                     	;# 
   828  0211                     	;# 
   829  0211                     	;# 
   830  0212                     	;# 
   831  0212                     	;# 
   832  0213                     	;# 
   833  0213                     	;# 
   834  0214                     	;# 
   835  0214                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0216                     	;# 
   840  0216                     	;# 
   841  0217                     	;# 
   842  0217                     	;# 
   843  0391                     	;# 
   844  0392                     	;# 
   845  0393                     	;# 
   846  0394                     	;# 
   847  0395                     	;# 
   848  0396                     	;# 
   849  0498                     	;# 
   850  0498                     	;# 
   851  0499                     	;# 
   852  049A                     	;# 
   853  049B                     	;# 
   854  049B                     	;# 
   855  049C                     	;# 
   856  049D                     	;# 
   857  049E                     	;# 
   858  049F                     	;# 
   859  0611                     	;# 
   860  0612                     	;# 
   861  0613                     	;# 
   862  0613                     	;# 
   863  0614                     	;# 
   864  0615                     	;# 
   865  0616                     	;# 
   866  0616                     	;# 
   867  0617                     	;# 
   868  0618                     	;# 
   869  0619                     	;# 
   870  0619                     	;# 
   871  061A                     	;# 
   872  061B                     	;# 
   873  061C                     	;# 
   874  061C                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0F0F                     	;# 
   881  0F10                     	;# 
   882  0F11                     	;# 
   883  0F12                     	;# 
   884  0F13                     	;# 
   885  0F14                     	;# 
   886  0F15                     	;# 
   887  0F16                     	;# 
   888  0F17                     	;# 
   889  0F18                     	;# 
   890  0F19                     	;# 
   891  0F1A                     	;# 
   892  0F1B                     	;# 
   893  0F1C                     	;# 
   894  0F1D                     	;# 
   895  0F1E                     	;# 
   896  0F1F                     	;# 
   897  0F20                     	;# 
   898  0F21                     	;# 
   899  0F22                     	;# 
   900  0F23                     	;# 
   901  0F24                     	;# 
   902  0F25                     	;# 
   903  0F26                     	;# 
   904  0F27                     	;# 
   905  0F28                     	;# 
   906  0F29                     	;# 
   907  0F2A                     	;# 
   908  0F2B                     	;# 
   909  0F2C                     	;# 
   910  0F2D                     	;# 
   911  0F2E                     	;# 
   912  0F2F                     	;# 
   913  0F8C                     	;# 
   914  0F8D                     	;# 
   915  0F91                     	;# 
   916  0F95                     	;# 
   917  0F96                     	;# 
   918  0F97                     	;# 
   919  0F9C                     	;# 
   920  0F9D                     	;# 
   921  0F9E                     	;# 
   922  0FE3                     	;# 
   923  0FE4                     	;# 
   924  0FE5                     	;# 
   925  0FE6                     	;# 
   926  0FE7                     	;# 
   927  0FE8                     	;# 
   928  0FE9                     	;# 
   929  0FEA                     	;# 
   930  0FEB                     	;# 
   931  0FED                     	;# 
   932  0FEE                     	;# 
   933  0FEF                     	;# 
   934  0000                     	;# 
   935  0001                     	;# 
   936  0002                     	;# 
   937  0003                     	;# 
   938  0004                     	;# 
   939  0005                     	;# 
   940  0006                     	;# 
   941  0007                     	;# 
   942  0008                     	;# 
   943  0009                     	;# 
   944  000A                     	;# 
   945  000B                     	;# 
   946  000C                     	;# 
   947  000D                     	;# 
   948  000E                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0013                     	;# 
   952  0015                     	;# 
   953  0016                     	;# 
   954  0016                     	;# 
   955  0017                     	;# 
   956  0018                     	;# 
   957  0019                     	;# 
   958  001A                     	;# 
   959  001B                     	;# 
   960  001C                     	;# 
   961  008C                     	;# 
   962  008D                     	;# 
   963  008E                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0093                     	;# 
   967  0095                     	;# 
   968  0096                     	;# 
   969  0097                     	;# 
   970  0099                     	;# 
   971  009A                     	;# 
   972  009B                     	;# 
   973  009B                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009E                     	;# 
   977  009F                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0111                     	;# 
   982  0112                     	;# 
   983  0113                     	;# 
   984  0114                     	;# 
   985  0115                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  0118                     	;# 
   989  0119                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020C                     	;# 
  1011  020D                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0391                     	;# 
  1028  0392                     	;# 
  1029  0393                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0498                     	;# 
  1034  0498                     	;# 
  1035  0499                     	;# 
  1036  049A                     	;# 
  1037  049B                     	;# 
  1038  049B                     	;# 
  1039  049C                     	;# 
  1040  049D                     	;# 
  1041  049E                     	;# 
  1042  049F                     	;# 
  1043  0611                     	;# 
  1044  0612                     	;# 
  1045  0613                     	;# 
  1046  0613                     	;# 
  1047  0614                     	;# 
  1048  0615                     	;# 
  1049  0616                     	;# 
  1050  0616                     	;# 
  1051  0617                     	;# 
  1052  0618                     	;# 
  1053  0619                     	;# 
  1054  0619                     	;# 
  1055  061A                     	;# 
  1056  061B                     	;# 
  1057  061C                     	;# 
  1058  061C                     	;# 
  1059  0691                     	;# 
  1060  0692                     	;# 
  1061  0693                     	;# 
  1062  0694                     	;# 
  1063  0695                     	;# 
  1064  0F0F                     	;# 
  1065  0F10                     	;# 
  1066  0F11                     	;# 
  1067  0F12                     	;# 
  1068  0F13                     	;# 
  1069  0F14                     	;# 
  1070  0F15                     	;# 
  1071  0F16                     	;# 
  1072  0F17                     	;# 
  1073  0F18                     	;# 
  1074  0F19                     	;# 
  1075  0F1A                     	;# 
  1076  0F1B                     	;# 
  1077  0F1C                     	;# 
  1078  0F1D                     	;# 
  1079  0F1E                     	;# 
  1080  0F1F                     	;# 
  1081  0F20                     	;# 
  1082  0F21                     	;# 
  1083  0F22                     	;# 
  1084  0F23                     	;# 
  1085  0F24                     	;# 
  1086  0F25                     	;# 
  1087  0F26                     	;# 
  1088  0F27                     	;# 
  1089  0F28                     	;# 
  1090  0F29                     	;# 
  1091  0F2A                     	;# 
  1092  0F2B                     	;# 
  1093  0F2C                     	;# 
  1094  0F2D                     	;# 
  1095  0F2E                     	;# 
  1096  0F2F                     	;# 
  1097  0F8C                     	;# 
  1098  0F8D                     	;# 
  1099  0F91                     	;# 
  1100  0F95                     	;# 
  1101  0F96                     	;# 
  1102  0F97                     	;# 
  1103  0F9C                     	;# 
  1104  0F9D                     	;# 
  1105  0F9E                     	;# 
  1106  0FE3                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000D                     	;# 
  1132  000E                     	;# 
  1133  0011                     	;# 
  1134  0012                     	;# 
  1135  0013                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  008C                     	;# 
  1146  008D                     	;# 
  1147  008E                     	;# 
  1148  0091                     	;# 
  1149  0092                     	;# 
  1150  0093                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  009F                     	;# 
  1162  010C                     	;# 
  1163  010D                     	;# 
  1164  010E                     	;# 
  1165  0111                     	;# 
  1166  0112                     	;# 
  1167  0113                     	;# 
  1168  0114                     	;# 
  1169  0115                     	;# 
  1170  0116                     	;# 
  1171  0117                     	;# 
  1172  0118                     	;# 
  1173  0119                     	;# 
  1174  011D                     	;# 
  1175  018C                     	;# 
  1176  018D                     	;# 
  1177  018E                     	;# 
  1178  0191                     	;# 
  1179  0191                     	;# 
  1180  0192                     	;# 
  1181  0193                     	;# 
  1182  0193                     	;# 
  1183  0194                     	;# 
  1184  0195                     	;# 
  1185  0196                     	;# 
  1186  0199                     	;# 
  1187  019A                     	;# 
  1188  019B                     	;# 
  1189  019B                     	;# 
  1190  019C                     	;# 
  1191  019D                     	;# 
  1192  019E                     	;# 
  1193  019F                     	;# 
  1194  020C                     	;# 
  1195  020D                     	;# 
  1196  0211                     	;# 
  1197  0211                     	;# 
  1198  0212                     	;# 
  1199  0212                     	;# 
  1200  0213                     	;# 
  1201  0213                     	;# 
  1202  0214                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0215                     	;# 
  1207  0216                     	;# 
  1208  0216                     	;# 
  1209  0217                     	;# 
  1210  0217                     	;# 
  1211  0391                     	;# 
  1212  0392                     	;# 
  1213  0393                     	;# 
  1214  0394                     	;# 
  1215  0395                     	;# 
  1216  0396                     	;# 
  1217  0498                     	;# 
  1218  0498                     	;# 
  1219  0499                     	;# 
  1220  049A                     	;# 
  1221  049B                     	;# 
  1222  049B                     	;# 
  1223  049C                     	;# 
  1224  049D                     	;# 
  1225  049E                     	;# 
  1226  049F                     	;# 
  1227  0611                     	;# 
  1228  0612                     	;# 
  1229  0613                     	;# 
  1230  0613                     	;# 
  1231  0614                     	;# 
  1232  0615                     	;# 
  1233  0616                     	;# 
  1234  0616                     	;# 
  1235  0617                     	;# 
  1236  0618                     	;# 
  1237  0619                     	;# 
  1238  0619                     	;# 
  1239  061A                     	;# 
  1240  061B                     	;# 
  1241  061C                     	;# 
  1242  061C                     	;# 
  1243  0691                     	;# 
  1244  0692                     	;# 
  1245  0693                     	;# 
  1246  0694                     	;# 
  1247  0695                     	;# 
  1248  0F0F                     	;# 
  1249  0F10                     	;# 
  1250  0F11                     	;# 
  1251  0F12                     	;# 
  1252  0F13                     	;# 
  1253  0F14                     	;# 
  1254  0F15                     	;# 
  1255  0F16                     	;# 
  1256  0F17                     	;# 
  1257  0F18                     	;# 
  1258  0F19                     	;# 
  1259  0F1A                     	;# 
  1260  0F1B                     	;# 
  1261  0F1C                     	;# 
  1262  0F1D                     	;# 
  1263  0F1E                     	;# 
  1264  0F1F                     	;# 
  1265  0F20                     	;# 
  1266  0F21                     	;# 
  1267  0F22                     	;# 
  1268  0F23                     	;# 
  1269  0F24                     	;# 
  1270  0F25                     	;# 
  1271  0F26                     	;# 
  1272  0F27                     	;# 
  1273  0F28                     	;# 
  1274  0F29                     	;# 
  1275  0F2A                     	;# 
  1276  0F2B                     	;# 
  1277  0F2C                     	;# 
  1278  0F2D                     	;# 
  1279  0F2E                     	;# 
  1280  0F2F                     	;# 
  1281  0F8C                     	;# 
  1282  0F8D                     	;# 
  1283  0F91                     	;# 
  1284  0F95                     	;# 
  1285  0F96                     	;# 
  1286  0F97                     	;# 
  1287  0F9C                     	;# 
  1288  0F9D                     	;# 
  1289  0F9E                     	;# 
  1290  0FE3                     	;# 
  1291  0FE4                     	;# 
  1292  0FE5                     	;# 
  1293  0FE6                     	;# 
  1294  0FE7                     	;# 
  1295  0FE8                     	;# 
  1296  0FE9                     	;# 
  1297  0FEA                     	;# 
  1298  0FEB                     	;# 
  1299  0FED                     	;# 
  1300  0FEE                     	;# 
  1301  0FEF                     	;# 
  1302  0000                     	;# 
  1303  0001                     	;# 
  1304  0002                     	;# 
  1305  0003                     	;# 
  1306  0004                     	;# 
  1307  0005                     	;# 
  1308  0006                     	;# 
  1309  0007                     	;# 
  1310  0008                     	;# 
  1311  0009                     	;# 
  1312  000A                     	;# 
  1313  000B                     	;# 
  1314  000C                     	;# 
  1315  000D                     	;# 
  1316  000E                     	;# 
  1317  0011                     	;# 
  1318  0012                     	;# 
  1319  0013                     	;# 
  1320  0015                     	;# 
  1321  0016                     	;# 
  1322  0016                     	;# 
  1323  0017                     	;# 
  1324  0018                     	;# 
  1325  0019                     	;# 
  1326  001A                     	;# 
  1327  001B                     	;# 
  1328  001C                     	;# 
  1329  008C                     	;# 
  1330  008D                     	;# 
  1331  008E                     	;# 
  1332  0091                     	;# 
  1333  0092                     	;# 
  1334  0093                     	;# 
  1335  0095                     	;# 
  1336  0096                     	;# 
  1337  0097                     	;# 
  1338  0099                     	;# 
  1339  009A                     	;# 
  1340  009B                     	;# 
  1341  009B                     	;# 
  1342  009C                     	;# 
  1343  009D                     	;# 
  1344  009E                     	;# 
  1345  009F                     	;# 
  1346  010C                     	;# 
  1347  010D                     	;# 
  1348  010E                     	;# 
  1349  0111                     	;# 
  1350  0112                     	;# 
  1351  0113                     	;# 
  1352  0114                     	;# 
  1353  0115                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  0118                     	;# 
  1357  0119                     	;# 
  1358  011D                     	;# 
  1359  018C                     	;# 
  1360  018D                     	;# 
  1361  018E                     	;# 
  1362  0191                     	;# 
  1363  0191                     	;# 
  1364  0192                     	;# 
  1365  0193                     	;# 
  1366  0193                     	;# 
  1367  0194                     	;# 
  1368  0195                     	;# 
  1369  0196                     	;# 
  1370  0199                     	;# 
  1371  019A                     	;# 
  1372  019B                     	;# 
  1373  019B                     	;# 
  1374  019C                     	;# 
  1375  019D                     	;# 
  1376  019E                     	;# 
  1377  019F                     	;# 
  1378  020C                     	;# 
  1379  020D                     	;# 
  1380  0211                     	;# 
  1381  0211                     	;# 
  1382  0212                     	;# 
  1383  0212                     	;# 
  1384  0213                     	;# 
  1385  0213                     	;# 
  1386  0214                     	;# 
  1387  0214                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0216                     	;# 
  1392  0216                     	;# 
  1393  0217                     	;# 
  1394  0217                     	;# 
  1395  0391                     	;# 
  1396  0392                     	;# 
  1397  0393                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0498                     	;# 
  1402  0498                     	;# 
  1403  0499                     	;# 
  1404  049A                     	;# 
  1405  049B                     	;# 
  1406  049B                     	;# 
  1407  049C                     	;# 
  1408  049D                     	;# 
  1409  049E                     	;# 
  1410  049F                     	;# 
  1411  0611                     	;# 
  1412  0612                     	;# 
  1413  0613                     	;# 
  1414  0613                     	;# 
  1415  0614                     	;# 
  1416  0615                     	;# 
  1417  0616                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0618                     	;# 
  1421  0619                     	;# 
  1422  0619                     	;# 
  1423  061A                     	;# 
  1424  061B                     	;# 
  1425  061C                     	;# 
  1426  061C                     	;# 
  1427  0691                     	;# 
  1428  0692                     	;# 
  1429  0693                     	;# 
  1430  0694                     	;# 
  1431  0695                     	;# 
  1432  0F0F                     	;# 
  1433  0F10                     	;# 
  1434  0F11                     	;# 
  1435  0F12                     	;# 
  1436  0F13                     	;# 
  1437  0F14                     	;# 
  1438  0F15                     	;# 
  1439  0F16                     	;# 
  1440  0F17                     	;# 
  1441  0F18                     	;# 
  1442  0F19                     	;# 
  1443  0F1A                     	;# 
  1444  0F1B                     	;# 
  1445  0F1C                     	;# 
  1446  0F1D                     	;# 
  1447  0F1E                     	;# 
  1448  0F1F                     	;# 
  1449  0F20                     	;# 
  1450  0F21                     	;# 
  1451  0F22                     	;# 
  1452  0F23                     	;# 
  1453  0F24                     	;# 
  1454  0F25                     	;# 
  1455  0F26                     	;# 
  1456  0F27                     	;# 
  1457  0F28                     	;# 
  1458  0F29                     	;# 
  1459  0F2A                     	;# 
  1460  0F2B                     	;# 
  1461  0F2C                     	;# 
  1462  0F2D                     	;# 
  1463  0F2E                     	;# 
  1464  0F2F                     	;# 
  1465  0F8C                     	;# 
  1466  0F8D                     	;# 
  1467  0F91                     	;# 
  1468  0F95                     	;# 
  1469  0F96                     	;# 
  1470  0F97                     	;# 
  1471  0F9C                     	;# 
  1472  0F9D                     	;# 
  1473  0F9E                     	;# 
  1474  0FE3                     	;# 
  1475  0FE4                     	;# 
  1476  0FE5                     	;# 
  1477  0FE6                     	;# 
  1478  0FE7                     	;# 
  1479  0FE8                     	;# 
  1480  0FE9                     	;# 
  1481  0FEA                     	;# 
  1482  0FEB                     	;# 
  1483  0FED                     	;# 
  1484  0FEE                     	;# 
  1485  0FEF                     	;# 
  1486  0000                     	;# 
  1487  0001                     	;# 
  1488  0002                     	;# 
  1489  0003                     	;# 
  1490  0004                     	;# 
  1491  0005                     	;# 
  1492  0006                     	;# 
  1493  0007                     	;# 
  1494  0008                     	;# 
  1495  0009                     	;# 
  1496  000A                     	;# 
  1497  000B                     	;# 
  1498  000C                     	;# 
  1499  000D                     	;# 
  1500  000E                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0013                     	;# 
  1504  0015                     	;# 
  1505  0016                     	;# 
  1506  0016                     	;# 
  1507  0017                     	;# 
  1508  0018                     	;# 
  1509  0019                     	;# 
  1510  001A                     	;# 
  1511  001B                     	;# 
  1512  001C                     	;# 
  1513  008C                     	;# 
  1514  008D                     	;# 
  1515  008E                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0093                     	;# 
  1519  0095                     	;# 
  1520  0096                     	;# 
  1521  0097                     	;# 
  1522  0099                     	;# 
  1523  009A                     	;# 
  1524  009B                     	;# 
  1525  009B                     	;# 
  1526  009C                     	;# 
  1527  009D                     	;# 
  1528  009E                     	;# 
  1529  009F                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0111                     	;# 
  1534  0112                     	;# 
  1535  0113                     	;# 
  1536  0114                     	;# 
  1537  0115                     	;# 
  1538  0116                     	;# 
  1539  0117                     	;# 
  1540  0118                     	;# 
  1541  0119                     	;# 
  1542  011D                     	;# 
  1543  018C                     	;# 
  1544  018D                     	;# 
  1545  018E                     	;# 
  1546  0191                     	;# 
  1547  0191                     	;# 
  1548  0192                     	;# 
  1549  0193                     	;# 
  1550  0193                     	;# 
  1551  0194                     	;# 
  1552  0195                     	;# 
  1553  0196                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020C                     	;# 
  1563  020D                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0391                     	;# 
  1580  0392                     	;# 
  1581  0393                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0498                     	;# 
  1586  0498                     	;# 
  1587  0499                     	;# 
  1588  049A                     	;# 
  1589  049B                     	;# 
  1590  049B                     	;# 
  1591  049C                     	;# 
  1592  049D                     	;# 
  1593  049E                     	;# 
  1594  049F                     	;# 
  1595  0611                     	;# 
  1596  0612                     	;# 
  1597  0613                     	;# 
  1598  0613                     	;# 
  1599  0614                     	;# 
  1600  0615                     	;# 
  1601  0616                     	;# 
  1602  0616                     	;# 
  1603  0617                     	;# 
  1604  0618                     	;# 
  1605  0619                     	;# 
  1606  0619                     	;# 
  1607  061A                     	;# 
  1608  061B                     	;# 
  1609  061C                     	;# 
  1610  061C                     	;# 
  1611  0691                     	;# 
  1612  0692                     	;# 
  1613  0693                     	;# 
  1614  0694                     	;# 
  1615  0695                     	;# 
  1616  0F0F                     	;# 
  1617  0F10                     	;# 
  1618  0F11                     	;# 
  1619  0F12                     	;# 
  1620  0F13                     	;# 
  1621  0F14                     	;# 
  1622  0F15                     	;# 
  1623  0F16                     	;# 
  1624  0F17                     	;# 
  1625  0F18                     	;# 
  1626  0F19                     	;# 
  1627  0F1A                     	;# 
  1628  0F1B                     	;# 
  1629  0F1C                     	;# 
  1630  0F1D                     	;# 
  1631  0F1E                     	;# 
  1632  0F1F                     	;# 
  1633  0F20                     	;# 
  1634  0F21                     	;# 
  1635  0F22                     	;# 
  1636  0F23                     	;# 
  1637  0F24                     	;# 
  1638  0F25                     	;# 
  1639  0F26                     	;# 
  1640  0F27                     	;# 
  1641  0F28                     	;# 
  1642  0F29                     	;# 
  1643  0F2A                     	;# 
  1644  0F2B                     	;# 
  1645  0F2C                     	;# 
  1646  0F2D                     	;# 
  1647  0F2E                     	;# 
  1648  0F2F                     	;# 
  1649  0F8C                     	;# 
  1650  0F8D                     	;# 
  1651  0F91                     	;# 
  1652  0F95                     	;# 
  1653  0F96                     	;# 
  1654  0F97                     	;# 
  1655  0F9C                     	;# 
  1656  0F9D                     	;# 
  1657  0F9E                     	;# 
  1658  0FE3                     	;# 
  1659  0FE4                     	;# 
  1660  0FE5                     	;# 
  1661  0FE6                     	;# 
  1662  0FE7                     	;# 
  1663  0FE8                     	;# 
  1664  0FE9                     	;# 
  1665  0FEA                     	;# 
  1666  0FEB                     	;# 
  1667  0FED                     	;# 
  1668  0FEE                     	;# 
  1669  0FEF                     	;# 
  1670  0000                     	;# 
  1671  0001                     	;# 
  1672  0002                     	;# 
  1673  0003                     	;# 
  1674  0004                     	;# 
  1675  0005                     	;# 
  1676  0006                     	;# 
  1677  0007                     	;# 
  1678  0008                     	;# 
  1679  0009                     	;# 
  1680  000A                     	;# 
  1681  000B                     	;# 
  1682  000C                     	;# 
  1683  000D                     	;# 
  1684  000E                     	;# 
  1685  0011                     	;# 
  1686  0012                     	;# 
  1687  0013                     	;# 
  1688  0015                     	;# 
  1689  0016                     	;# 
  1690  0016                     	;# 
  1691  0017                     	;# 
  1692  0018                     	;# 
  1693  0019                     	;# 
  1694  001A                     	;# 
  1695  001B                     	;# 
  1696  001C                     	;# 
  1697  008C                     	;# 
  1698  008D                     	;# 
  1699  008E                     	;# 
  1700  0091                     	;# 
  1701  0092                     	;# 
  1702  0093                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0099                     	;# 
  1707  009A                     	;# 
  1708  009B                     	;# 
  1709  009B                     	;# 
  1710  009C                     	;# 
  1711  009D                     	;# 
  1712  009E                     	;# 
  1713  009F                     	;# 
  1714  010C                     	;# 
  1715  010D                     	;# 
  1716  010E                     	;# 
  1717  0111                     	;# 
  1718  0112                     	;# 
  1719  0113                     	;# 
  1720  0114                     	;# 
  1721  0115                     	;# 
  1722  0116                     	;# 
  1723  0117                     	;# 
  1724  0118                     	;# 
  1725  0119                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  018E                     	;# 
  1730  0191                     	;# 
  1731  0191                     	;# 
  1732  0192                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0199                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019C                     	;# 
  1743  019D                     	;# 
  1744  019E                     	;# 
  1745  019F                     	;# 
  1746  020C                     	;# 
  1747  020D                     	;# 
  1748  0211                     	;# 
  1749  0211                     	;# 
  1750  0212                     	;# 
  1751  0212                     	;# 
  1752  0213                     	;# 
  1753  0213                     	;# 
  1754  0214                     	;# 
  1755  0214                     	;# 
  1756  0215                     	;# 
  1757  0215                     	;# 
  1758  0215                     	;# 
  1759  0216                     	;# 
  1760  0216                     	;# 
  1761  0217                     	;# 
  1762  0217                     	;# 
  1763  0391                     	;# 
  1764  0392                     	;# 
  1765  0393                     	;# 
  1766  0394                     	;# 
  1767  0395                     	;# 
  1768  0396                     	;# 
  1769  0498                     	;# 
  1770  0498                     	;# 
  1771  0499                     	;# 
  1772  049A                     	;# 
  1773  049B                     	;# 
  1774  049B                     	;# 
  1775  049C                     	;# 
  1776  049D                     	;# 
  1777  049E                     	;# 
  1778  049F                     	;# 
  1779  0611                     	;# 
  1780  0612                     	;# 
  1781  0613                     	;# 
  1782  0613                     	;# 
  1783  0614                     	;# 
  1784  0615                     	;# 
  1785  0616                     	;# 
  1786  0616                     	;# 
  1787  0617                     	;# 
  1788  0618                     	;# 
  1789  0619                     	;# 
  1790  0619                     	;# 
  1791  061A                     	;# 
  1792  061B                     	;# 
  1793  061C                     	;# 
  1794  061C                     	;# 
  1795  0691                     	;# 
  1796  0692                     	;# 
  1797  0693                     	;# 
  1798  0694                     	;# 
  1799  0695                     	;# 
  1800  0F0F                     	;# 
  1801  0F10                     	;# 
  1802  0F11                     	;# 
  1803  0F12                     	;# 
  1804  0F13                     	;# 
  1805  0F14                     	;# 
  1806  0F15                     	;# 
  1807  0F16                     	;# 
  1808  0F17                     	;# 
  1809  0F18                     	;# 
  1810  0F19                     	;# 
  1811  0F1A                     	;# 
  1812  0F1B                     	;# 
  1813  0F1C                     	;# 
  1814  0F1D                     	;# 
  1815  0F1E                     	;# 
  1816  0F1F                     	;# 
  1817  0F20                     	;# 
  1818  0F21                     	;# 
  1819  0F22                     	;# 
  1820  0F23                     	;# 
  1821  0F24                     	;# 
  1822  0F25                     	;# 
  1823  0F26                     	;# 
  1824  0F27                     	;# 
  1825  0F28                     	;# 
  1826  0F29                     	;# 
  1827  0F2A                     	;# 
  1828  0F2B                     	;# 
  1829  0F2C                     	;# 
  1830  0F2D                     	;# 
  1831  0F2E                     	;# 
  1832  0F2F                     	;# 
  1833  0F8C                     	;# 
  1834  0F8D                     	;# 
  1835  0F91                     	;# 
  1836  0F95                     	;# 
  1837  0F96                     	;# 
  1838  0F97                     	;# 
  1839  0F9C                     	;# 
  1840  0F9D                     	;# 
  1841  0F9E                     	;# 
  1842  0FE3                     	;# 
  1843  0FE4                     	;# 
  1844  0FE5                     	;# 
  1845  0FE6                     	;# 
  1846  0FE7                     	;# 
  1847  0FE8                     	;# 
  1848  0FE9                     	;# 
  1849  0FEA                     	;# 
  1850  0FEB                     	;# 
  1851  0FED                     	;# 
  1852  0FEE                     	;# 
  1853  0FEF                     	;# 
  1854  0000                     	;# 
  1855  0001                     	;# 
  1856  0002                     	;# 
  1857  0003                     	;# 
  1858  0004                     	;# 
  1859  0005                     	;# 
  1860  0006                     	;# 
  1861  0007                     	;# 
  1862  0008                     	;# 
  1863  0009                     	;# 
  1864  000A                     	;# 
  1865  000B                     	;# 
  1866  000C                     	;# 
  1867  000D                     	;# 
  1868  000E                     	;# 
  1869  0011                     	;# 
  1870  0012                     	;# 
  1871  0013                     	;# 
  1872  0015                     	;# 
  1873  0016                     	;# 
  1874  0016                     	;# 
  1875  0017                     	;# 
  1876  0018                     	;# 
  1877  0019                     	;# 
  1878  001A                     	;# 
  1879  001B                     	;# 
  1880  001C                     	;# 
  1881  008C                     	;# 
  1882  008D                     	;# 
  1883  008E                     	;# 
  1884  0091                     	;# 
  1885  0092                     	;# 
  1886  0093                     	;# 
  1887  0095                     	;# 
  1888  0096                     	;# 
  1889  0097                     	;# 
  1890  0099                     	;# 
  1891  009A                     	;# 
  1892  009B                     	;# 
  1893  009B                     	;# 
  1894  009C                     	;# 
  1895  009D                     	;# 
  1896  009E                     	;# 
  1897  009F                     	;# 
  1898  010C                     	;# 
  1899  010D                     	;# 
  1900  010E                     	;# 
  1901  0111                     	;# 
  1902  0112                     	;# 
  1903  0113                     	;# 
  1904  0114                     	;# 
  1905  0115                     	;# 
  1906  0116                     	;# 
  1907  0117                     	;# 
  1908  0118                     	;# 
  1909  0119                     	;# 
  1910  011D                     	;# 
  1911  018C                     	;# 
  1912  018D                     	;# 
  1913  018E                     	;# 
  1914  0191                     	;# 
  1915  0191                     	;# 
  1916  0192                     	;# 
  1917  0193                     	;# 
  1918  0193                     	;# 
  1919  0194                     	;# 
  1920  0195                     	;# 
  1921  0196                     	;# 
  1922  0199                     	;# 
  1923  019A                     	;# 
  1924  019B                     	;# 
  1925  019B                     	;# 
  1926  019C                     	;# 
  1927  019D                     	;# 
  1928  019E                     	;# 
  1929  019F                     	;# 
  1930  020C                     	;# 
  1931  020D                     	;# 
  1932  0211                     	;# 
  1933  0211                     	;# 
  1934  0212                     	;# 
  1935  0212                     	;# 
  1936  0213                     	;# 
  1937  0213                     	;# 
  1938  0214                     	;# 
  1939  0214                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0216                     	;# 
  1944  0216                     	;# 
  1945  0217                     	;# 
  1946  0217                     	;# 
  1947  0391                     	;# 
  1948  0392                     	;# 
  1949  0393                     	;# 
  1950  0394                     	;# 
  1951  0395                     	;# 
  1952  0396                     	;# 
  1953  0498                     	;# 
  1954  0498                     	;# 
  1955  0499                     	;# 
  1956  049A                     	;# 
  1957  049B                     	;# 
  1958  049B                     	;# 
  1959  049C                     	;# 
  1960  049D                     	;# 
  1961  049E                     	;# 
  1962  049F                     	;# 
  1963  0611                     	;# 
  1964  0612                     	;# 
  1965  0613                     	;# 
  1966  0613                     	;# 
  1967  0614                     	;# 
  1968  0615                     	;# 
  1969  0616                     	;# 
  1970  0616                     	;# 
  1971  0617                     	;# 
  1972  0618                     	;# 
  1973  0619                     	;# 
  1974  0619                     	;# 
  1975  061A                     	;# 
  1976  061B                     	;# 
  1977  061C                     	;# 
  1978  061C                     	;# 
  1979  0691                     	;# 
  1980  0692                     	;# 
  1981  0693                     	;# 
  1982  0694                     	;# 
  1983  0695                     	;# 
  1984  0F0F                     	;# 
  1985  0F10                     	;# 
  1986  0F11                     	;# 
  1987  0F12                     	;# 
  1988  0F13                     	;# 
  1989  0F14                     	;# 
  1990  0F15                     	;# 
  1991  0F16                     	;# 
  1992  0F17                     	;# 
  1993  0F18                     	;# 
  1994  0F19                     	;# 
  1995  0F1A                     	;# 
  1996  0F1B                     	;# 
  1997  0F1C                     	;# 
  1998  0F1D                     	;# 
  1999  0F1E                     	;# 
  2000  0F1F                     	;# 
  2001  0F20                     	;# 
  2002  0F21                     	;# 
  2003  0F22                     	;# 
  2004  0F23                     	;# 
  2005  0F24                     	;# 
  2006  0F25                     	;# 
  2007  0F26                     	;# 
  2008  0F27                     	;# 
  2009  0F28                     	;# 
  2010  0F29                     	;# 
  2011  0F2A                     	;# 
  2012  0F2B                     	;# 
  2013  0F2C                     	;# 
  2014  0F2D                     	;# 
  2015  0F2E                     	;# 
  2016  0F2F                     	;# 
  2017  0F8C                     	;# 
  2018  0F8D                     	;# 
  2019  0F91                     	;# 
  2020  0F95                     	;# 
  2021  0F96                     	;# 
  2022  0F97                     	;# 
  2023  0F9C                     	;# 
  2024  0F9D                     	;# 
  2025  0F9E                     	;# 
  2026  0FE3                     	;# 
  2027  0FE4                     	;# 
  2028  0FE5                     	;# 
  2029  0FE6                     	;# 
  2030  0FE7                     	;# 
  2031  0FE8                     	;# 
  2032  0FE9                     	;# 
  2033  0FEA                     	;# 
  2034  0FEB                     	;# 
  2035  0FED                     	;# 
  2036  0FEE                     	;# 
  2037  0FEF                     	;_loadPosition
  2038                           
  2039                           	psect	stringtext1
  2040  1800                     __pstringtext1:
  2041  1800                     _SpiCmmandFunction:
  2042  1800  3439               	retlw	low _SpiCmdFunc_Test
  2043  1801  3411               	retlw	high _SpiCmdFunc_Test
  2044  1802  3469               	retlw	low _SpiCmdFunc_FwdPulseNormal
  2045  1803  3417               	retlw	high _SpiCmdFunc_FwdPulseNormal
  2046  1804  3424               	retlw	low _SpiCmdFunc_RevPulseNormal
  2047  1805  3417               	retlw	high _SpiCmdFunc_RevPulseNormal
  2048  1806  343A               	retlw	low _SpiCmdFunc_FwdPulseWithShake
  2049  1807  3411               	retlw	high _SpiCmdFunc_FwdPulseWithShake
  2050  1808  3400               	retlw	low _SpiCmdFunc_SearchLoadPosition
  2051  1809  3408               	retlw	high _SpiCmdFunc_SearchLoadPosition
  2052  180A  34D7               	retlw	low _SpiCmdFunc_SearchBasePosition
  2053  180B  3417               	retlw	high _SpiCmdFunc_SearchBasePosition
  2054  180C  3489               	retlw	low _SpiCmdFunc_FwdPulseWithCorrect
  2055  180D  3416               	retlw	high _SpiCmdFunc_FwdPulseWithCorrect
  2056  180E  34E2               	retlw	low _SpiCmdFunc_FwdPulsePositionCtl
  2057  180F  3416               	retlw	high _SpiCmdFunc_FwdPulsePositionCtl
  2058  1810  3403               	retlw	low _SpiCmdFunc_RevPulsePositionCtl
  2059  1811  3417               	retlw	high _SpiCmdFunc_RevPulsePositionCtl
  2060  1812  3446               	retlw	low _SpiCmdFunc_StartDetectVrs
  2061  1813  3411               	retlw	high _SpiCmdFunc_StartDetectVrs
  2062  1814  3449               	retlw	low _SpiCmdFunc_StopDetectVrs
  2063  1815  3411               	retlw	high _SpiCmdFunc_StopDetectVrs
  2064  1816  3454               	retlw	low _SpiCmdFunc_EnableExcitating
  2065  1817  3411               	retlw	high _SpiCmdFunc_EnableExcitating
  2066  1818  3459               	retlw	low _SpiCmdFunc_DisableExcitating
  2067  1819  3411               	retlw	high _SpiCmdFunc_DisableExcitating
  2068  181A  3433               	retlw	low _SpiCmdFunc_Search1008Position
  2069  181B  3408               	retlw	high _SpiCmdFunc_Search1008Position
  2070  181C                     __end_of_SpiCmmandFunction:
  2071                           
  2072                           	psect	stringtext2
  2073  181C                     __pstringtext2:
  2074  181C                     _TblM1PulseChangePosition:
  2075  181C  3401               	retlw	1
  2076  181D  3406               	retlw	6
  2077  181E  340A               	retlw	10
  2078  181F  340B               	retlw	11
  2079  1820  340E               	retlw	14
  2080  1821  340F               	retlw	15
  2081  1822  3412               	retlw	18
  2082  1823  3413               	retlw	19
  2083  1824  3416               	retlw	22
  2084  1825  3417               	retlw	23
  2085  1826  341A               	retlw	26
  2086  1827  341B               	retlw	27
  2087  1828  341E               	retlw	30
  2088  1829  341F               	retlw	31
  2089  182A  3422               	retlw	34
  2090  182B  3423               	retlw	35
  2091  182C  3426               	retlw	38
  2092  182D  3427               	retlw	39
  2093  182E  342A               	retlw	42
  2094  182F  342B               	retlw	43
  2095  1830  342E               	retlw	46
  2096  1831  342F               	retlw	47
  2097  1832  3432               	retlw	50
  2098  1833  3438               	retlw	56
  2099  1834  3448               	retlw	72
  2100  1835                     __end_of_TblM1PulseChangePosition:
  2101                           
  2102                           	psect	stringtext3
  2103  1835                     __pstringtext3:
  2104  1835                     _TblM0PulseChangePosition:
  2105  1835  3401               	retlw	1
  2106  1836  3406               	retlw	6
  2107  1837  340A               	retlw	10
  2108  1838  340B               	retlw	11
  2109  1839  340E               	retlw	14
  2110  183A  340F               	retlw	15
  2111  183B  3412               	retlw	18
  2112  183C  3413               	retlw	19
  2113  183D  3416               	retlw	22
  2114  183E  3417               	retlw	23
  2115  183F  341A               	retlw	26
  2116  1840  341B               	retlw	27
  2117  1841  341E               	retlw	30
  2118  1842  341F               	retlw	31
  2119  1843  3422               	retlw	34
  2120  1844  3423               	retlw	35
  2121  1845  3426               	retlw	38
  2122  1846  3427               	retlw	39
  2123  1847  342A               	retlw	42
  2124  1848  342B               	retlw	43
  2125  1849  342E               	retlw	46
  2126  184A  342F               	retlw	47
  2127  184B  3432               	retlw	50
  2128  184C  3438               	retlw	56
  2129  184D  3448               	retlw	72
  2130  184E                     __end_of_TblM0PulseChangePosition:
  2131                           
  2132                           	psect	stringtext4
  2133  184E                     __pstringtext4:
  2134  184E                     _offsetBasePosition:
  2135  184E  34E8               	retlw	232
  2136  184F  34FF               	retlw	255
  2137  1850  34F0               	retlw	240
  2138  1851  34FF               	retlw	255
  2139  1852                     __end_of_offsetBasePosition:
  2140                           
  2141                           	psect	stringtext5
  2142  1852                     __pstringtext5:
  2143  1852                     _TblMaxSearchSteps:
  2144  1852  3438               	retlw	56
  2145  1853  3404               	retlw	4
  2146  1854  3438               	retlw	56
  2147  1855  3404               	retlw	4
  2148  1856                     __end_of_TblMaxSearchSteps:
  2149                           
  2150                           	psect	stringtext6
  2151  1856                     __pstringtext6:
  2152  1856                     _TblMaxSteps:
  2153  1856  3468               	retlw	104
  2154  1857  3401               	retlw	1
  2155  1858  3468               	retlw	104
  2156  1859  3401               	retlw	1
  2157  185A                     __end_of_TblMaxSteps:
  2158                           
  2159                           	psect	stringtext7
  2160  185A                     __pstringtext7:
  2161  185A                     _spi_configuration:
  2162  185A  3414               	retlw	20
  2163  185B  3400               	retlw	0
  2164  185C  3400               	retlw	0
  2165  185D  3401               	retlw	1
  2166  185E                     __end_of_spi_configuration:
  2167                           
  2168                           	psect	nvBANK2
  2169  0164                     __pnvBANK2:
  2170  0164                     _TMR1_InterruptHandler:
  2171  0164                     	ds	2
  2172  0166                     _timer1ReloadVal:
  2173  0166                     	ds	2
  2174  0168                     _TMR2_InterruptHandler:
  2175  0168                     	ds	2
  2176  0012                     _PIR2bits	set	18
  2177  0018                     _T1CONbits	set	24
  2178  0018                     _T1CON	set	24
  2179  0016                     _TMR1L	set	22
  2180  0017                     _TMR1H	set	23
  2181  0019                     _T1GCON	set	25
  2182  000B                     _INTCONbits	set	11
  2183  001C                     _T2CONbits	set	28
  2184  001C                     _T2CON	set	28
  2185  0011                     _PIR1bits	set	17
  2186  001A                     _TMR2	set	26
  2187  001B                     _PR2	set	27
  2188  008D                     _TRISBbits	set	141
  2189  0095                     _OPTION_REGbits	set	149
  2190  008E                     _TRISC	set	142
  2191  008D                     _TRISB	set	141
  2192  008C                     _TRISA	set	140
  2193  0097                     _WDTCON	set	151
  2194  0099                     _OSCCON	set	153
  2195  0091                     _PIE1bits	set	145
  2196  0114                     _CM2CON1	set	276
  2197  0113                     _CM2CON0	set	275
  2198  0112                     _CM1CON1	set	274
  2199  0111                     _CM1CON0	set	273
  2200  011D                     _APFCON	set	285
  2201  010E                     _LATC	set	270
  2202  010D                     _LATB	set	269
  2203  010C                     _LATA	set	268
  2204  0116                     _BORCON	set	278
  2205  0119                     _DACCON1	set	281
  2206  0118                     _DACCON0	set	280
  2207  0870                     _LATC0	set	2160
  2208  018C                     _ANSELA	set	396
  2209  018D                     _ANSELB	set	397
  2210  018E                     _ANSELC	set	398
  2211  0211                     _SSP1BUF	set	529
  2212  0216                     _SSP1CON2	set	534
  2213  0215                     _SSP1CON1bits	set	533
  2214  0212                     _SSP1ADD	set	530
  2215  0215                     _SSP1CON1	set	533
  2216  0214                     _SSP1STAT	set	532
  2217  020C                     _WPUA	set	524
  2218  020D                     _WPUB	set	525
  2219                           
  2220                           	psect	cinit
  2221  001E                     start_initialization:	
  2222                           ; #config settings
  2223                           
  2224  001E                     __initialization:	;BIGRAM
  2225                           
  2226                           ; Clear objects allocated to BIGRAM
  2227  001E  3038               	movlw	low (0+8504)
  2228  001F  0084               	movwf	4
  2229  0020  3021               	movlw	high (0+8504)
  2230  0021  0085               	movwf	5
  2231  0022  30B8               	movlw	184
  2232  0023  00FE               	movwf	btemp
  2233  0024  3000               	movlw	0
  2234  0025  00FF               	movwf	btemp+1
  2235  0026  3191  21C7  3180   	fcall	clear_ram0
  2236                           
  2237                           ; Clear objects allocated to COMMON
  2238  0029  01F0               	clrf	__pbssCOMMON& (0+127)
  2239  002A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2240  002B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2241  002C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2242  002D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2243                           
  2244                           ; Clear objects allocated to BANK0
  2245  002E  304F               	movlw	low __pbssBANK0
  2246  002F  0084               	movwf	4
  2247  0030  3000               	movlw	high __pbssBANK0
  2248  0031  0085               	movwf	5
  2249  0032  3021               	movlw	33
  2250  0033  00FE               	movwf	btemp
  2251  0034  3000               	movlw	0
  2252  0035  00FF               	movwf	btemp+1
  2253  0036  3191  21C7  3180   	fcall	clear_ram0
  2254                           
  2255                           ; Clear objects allocated to BANK1
  2256  0039  30A0               	movlw	low __pbssBANK1
  2257  003A  0084               	movwf	4
  2258  003B  3000               	movlw	high __pbssBANK1
  2259  003C  0085               	movwf	5
  2260  003D  3050               	movlw	80
  2261  003E  00FE               	movwf	btemp
  2262  003F  3000               	movlw	0
  2263  0040  00FF               	movwf	btemp+1
  2264  0041  3191  21C7  3180   	fcall	clear_ram0
  2265                           
  2266                           ; Clear objects allocated to BANK2
  2267  0044  3020               	movlw	low __pbssBANK2
  2268  0045  0084               	movwf	4
  2269  0046  3001               	movlw	high __pbssBANK2
  2270  0047  0085               	movwf	5
  2271  0048  3044               	movlw	68
  2272  0049  00FE               	movwf	btemp
  2273  004A  3000               	movlw	0
  2274  004B  00FF               	movwf	btemp+1
  2275  004C  3191  21C7  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK3
  2278  004F  30A0               	movlw	low __pbssBANK3
  2279  0050  0084               	movwf	4
  2280  0051  3001               	movlw	high __pbssBANK3
  2281  0052  0085               	movwf	5
  2282  0053  302E               	movlw	46
  2283  0054  00FE               	movwf	btemp
  2284  0055  3000               	movlw	0
  2285  0056  00FF               	movwf	btemp+1
  2286  0057  3191  21C7         	fcall	clear_ram0
  2287  0059                     end_of_initialization:	
  2288                           ;End of C runtime variable initialization code
  2289                           
  2290  0059                     __end_of__initialization:
  2291  0059  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2292  005A  0020               	movlb	0
  2293  005B  318A  2A42         	ljmp	_main	;jump to C main() function
  2294                           
  2295                           	psect	bssCOMMON
  2296  0070                     __pbssCOMMON:
  2297  0070                     _addShakePulseBit:
  2298  0070                     	ds	1
  2299  0071                     _polarityBit:
  2300  0071                     	ds	1
  2301  0072                     _m1PulseOutStep:
  2302  0072                     	ds	1
  2303  0073                     _m0PulseOutStep:
  2304  0073                     	ds	1
  2305  0074                     _motorBitOperation:
  2306  0074                     	ds	1
  2307                           
  2308                           	psect	bssBANK0
  2309  004F                     __pbssBANK0:
  2310  004F                     _detectLoadCont:
  2311  004F                     	ds	2
  2312  0051                     _detectLoadType:
  2313  0051                     	ds	2
  2314  0053                     _motorM1StepCounter:
  2315  0053                     	ds	2
  2316  0055                     _motorM0StepCounter:
  2317  0055                     	ds	2
  2318  0057                     _actCorrectDriveBit:
  2319  0057                     	ds	1
  2320  0058                     _reqCorrectBasePosBit:
  2321  0058                     	ds	1
  2322  0059                     _reqSearchBasePosBit:
  2323  0059                     	ds	1
  2324  005A                     _motorActiveBit:
  2325  005A                     	ds	1
  2326  005B                     _driveDirectionBit:
  2327  005B                     	ds	1
  2328  005C                     _dataTRISCWork_M1:
  2329  005C                     	ds	1
  2330  005D                     _dataTRISBWork_M1:
  2331  005D                     	ds	1
  2332  005E                     _dataTRISAWork_M1:
  2333  005E                     	ds	1
  2334  005F                     _dataTRISCWork_M0:
  2335  005F                     	ds	1
  2336  0060                     _dataTRISBWork_M0:
  2337  0060                     	ds	1
  2338  0061                     _dataTRISAWork_M0:
  2339  0061                     	ds	1
  2340  0062                     _dataTRISC:
  2341  0062                     	ds	1
  2342  0063                     _dataTRISB:
  2343  0063                     	ds	1
  2344  0064                     _dataTRISA:
  2345  0064                     	ds	1
  2346  0065                     _pulseOutLATCWork_M0:
  2347  0065                     	ds	1
  2348  0066                     _pulseOutLATBWork_M0:
  2349  0066                     	ds	1
  2350  0067                     _pulseOutLATAWork_M0:
  2351  0067                     	ds	1
  2352  0068                     _pulseOutLATC:
  2353  0068                     	ds	1
  2354  0069                     _pulseOutLATB:
  2355  0069                     	ds	1
  2356  006A                     _pulseOutLATA:
  2357  006A                     	ds	1
  2358  006B                     _motorNoOperation:
  2359  006B                     	ds	1
  2360  006C                     _currentPosition:
  2361  006C                     	ds	4
  2362                           
  2363                           	psect	bssBANK1
  2364  00A0                     __pbssBANK1:
  2365  00A0                     _cbAfterDetectLoadFunc:
  2366  00A0                     	ds	4
  2367  00A4                     _detectRoughTotalMove:
  2368  00A4                     	ds	4
  2369  00A8                     _positionSearchCt:
  2370  00A8                     	ds	4
  2371  00AC                     _motorStepCounterSet:
  2372  00AC                     	ds	4
  2373  00B0                     _cbAfterMotorStopFunc:
  2374  00B0                     	ds	4
  2375  00B4                     _positionSearchStat:
  2376  00B4                     	ds	2
  2377  00B6                     _detectRoughPosCt:
  2378  00B6                     	ds	2
  2379  00B8                     _detectFinePosCt:
  2380  00B8                     	ds	2
  2381  00BA                     _loadPositionIndex:
  2382  00BA                     	ds	2
  2383  00BC                     _detectLoadPositionTypePtr:
  2384  00BC                     	ds	2
  2385  00BE                     _detectLoadPositionIndex:
  2386  00BE                     	ds	2
  2387  00C0                     _vrsCountValue:
  2388  00C0                     	ds	2
  2389  00C2                     _driveType:
  2390  00C2                     	ds	2
  2391  00C4                     _spkOutChangeFunc:
  2392  00C4                     	ds	2
  2393  00C6                     _finishPositionCtSet:
  2394  00C6                     	ds	2
  2395  00C8                     _m1PulseOutChangeFunc:
  2396  00C8                     	ds	2
  2397  00CA                     _m0PulseOutChangeFunc:
  2398  00CA                     	ds	2
  2399  00CC                     _recieveCommand:
  2400  00CC                     	ds	1
  2401  00CD                     _doubleInterval:
  2402  00CD                     	ds	1
  2403  00CE                     _reqCheckLoadPosBit:
  2404  00CE                     	ds	1
  2405  00CF                     _reqCorrectFinePoBit:
  2406  00CF                     	ds	1
  2407  00D0                     _reqAfterDetectLoadFuncBit:
  2408  00D0                     	ds	1
  2409  00D1                     _handPositionActiveBit:
  2410  00D1                     	ds	1
  2411  00D2                     _reqVrsCheckBit:
  2412  00D2                     	ds	1
  2413  00D3                     _reqComparatorOffBit:
  2414  00D3                     	ds	1
  2415  00D4                     _reqComparatorOnBit:
  2416  00D4                     	ds	1
  2417  00D5                     _OutTrisRequestFlug:
  2418  00D5                     	ds	1
  2419  00D6                     _OutRequestFlug:
  2420  00D6                     	ds	1
  2421  00D7                     _correctDriveDirectionBit:
  2422  00D7                     	ds	1
  2423  00D8                     _reqStopMotorBit:
  2424  00D8                     	ds	1
  2425  00D9                     _reqAfterMotorStopFuncBit:
  2426  00D9                     	ds	1
  2427  00DA                     _spkReqVrsCheckBit:
  2428  00DA                     	ds	1
  2429  00DB                     _spkOutTrisRequestFlug:
  2430  00DB                     	ds	1
  2431  00DC                     _spkChangePosition:
  2432  00DC                     	ds	1
  2433  00DD                     _spkPositionCt:
  2434  00DD                     	ds	1
  2435  00DE                     _detectSpkTurnBit:
  2436  00DE                     	ds	1
  2437  00DF                     _excitatingOffMaskTime:
  2438  00DF                     	ds	1
  2439  00E0                     _excitatingEnableBit:
  2440  00E0                     	ds	1
  2441  00E1                     _m1PulseOutStepWork:
  2442  00E1                     	ds	1
  2443  00E2                     _m0PulseOutStepWork:
  2444  00E2                     	ds	1
  2445  00E3                     _m1PulseChangePosition:
  2446  00E3                     	ds	1
  2447  00E4                     _m0PulseChangePosition:
  2448  00E4                     	ds	1
  2449  00E5                     _m1PulsePositionCtWork:
  2450  00E5                     	ds	1
  2451  00E6                     _m0PulsePositionCtWork:
  2452  00E6                     	ds	1
  2453  00E7                     _m1PulsePositionCt:
  2454  00E7                     	ds	1
  2455  00E8                     _m0PulsePositionCt:
  2456  00E8                     	ds	1
  2457  00E9                     _pulseOutLATCWork_M1:
  2458  00E9                     	ds	1
  2459  00EA                     _pulseOutLATBWork_M1:
  2460  00EA                     	ds	1
  2461  00EB                     _pulseOutLATAWork_M1:
  2462  00EB                     	ds	1
  2463  00EC                     _TblM1PulseChangePositionLast:
  2464  00EC                     	ds	1
  2465  00ED                     _TblM0PulseChangePositionLast:
  2466  00ED                     	ds	1
  2467  00EE                     _missingDetectFinePosition:
  2468  00EE                     	ds	2
  2469                           
  2470                           	psect	bssBANK2
  2471  0120                     __pbssBANK2:
  2472  0120                     _searchTotalSteps:
  2473  0120                     	ds	4
  2474  0124                     _detectLoadPositionPtr:
  2475  0124                     	ds	4
  2476  0128                     _correctDriveFinishPositionCtSet:
  2477  0128                     	ds	2
  2478  012A                     _correctDriveSteps:
  2479  012A                     	ds	2
  2480  012C                     _excitatingTime:
  2481  012C                     	ds	2
  2482  012E                     _detectLoadPositionType:
  2483  012E                     	ds	46
  2484  015C                     _detectBasePosition:
  2485  015C                     	ds	4
  2486  0160                     _targetPosition:
  2487  0160                     	ds	4
  2488                           
  2489                           	psect	bssBANK3
  2490  01A0                     __pbssBANK3:
  2491  01A0                     _loadPositionType:
  2492  01A0                     	ds	46
  2493                           
  2494                           	psect	clrtext
  2495  11C7                     clear_ram0:	
  2496                           ;	Called with FSR0 containing the base address, and
  2497                           ;	btemp/btemp+1 has the size to clear
  2498                           
  2499  11C7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2500  11C8                     clrloop0:
  2501  11C8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2502  11C9  3101               	addfsr 0,1
  2503  11CA  3001               	movlw	1
  2504  11CB  02FE               	subwf	126,f
  2505  11CC  3000               	movlw	0
  2506  11CD  3BFF               	subwfb	127,f
  2507  11CE  087F               	movf	127,w
  2508  11CF  047E               	iorwf	126,w
  2509  11D0  1903               	btfsc	3,2
  2510  11D1  3400               	retlw	0	;all done for this memory range, return
  2511  11D2  29C8               	goto	clrloop0	;have we reached the end yet?
  2512                           
  2513                           	psect	cstackBANK2
  2514  016A                     __pcstackBANK2:
  2515  016A                     WatchMotorDriveFinish@func:
  2516                           
  2517                           ; 2 bytes @ 0x0
  2518  016A                     	ds	2
  2519  016C                     ??_SPIControl_RecieveComannd:
  2520                           
  2521                           ; 1 bytes @ 0x2
  2522  016C                     	ds	1
  2523  016D                     ??_main:
  2524                           
  2525                           ; 1 bytes @ 0x3
  2526  016D                     	ds	1
  2527                           
  2528                           	psect	cstackCOMMON
  2529  0075                     __pcstackCOMMON:
  2530  0075                     ?_TMR2_DefaultInterruptHandler:
  2531  0075                     ??_TMR2_DefaultInterruptHandler:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0075                     ?_TMR2_CallBack:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0075                     ?_TMR1_ISR:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0075                     ?_SPI_Initialize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0075                     ?_PIN_MANAGER_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0075                     ?_OSCILLATOR_Initialize:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0075                     ?_WDT_Initialize:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0075                     ?_TMR1_Initialize:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0075                     ?_TMR1_DefaultInterruptHandler:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0075                     ??_TMR1_DefaultInterruptHandler:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0075                     ?_TMR1_CallBack:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0075                     ??_TMR1_CallBack:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0075                     ?_TMR2_Interrupt:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0075                     ?_InitPulsePositionTable:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0075                     ?_SetMotorStart:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0075                     ?_SPIControl_RecieveComannd:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0075                     ?_VrsCheck:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0075                     ??_VrsCheck:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0075                     ?_ComparatorOn:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0075                     ??_ComparatorOn:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0075                     ?_ComparatorOff:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0075                     ??_ComparatorOff:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P1:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P1:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P1:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P1:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P1:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P1:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P1:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P1:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0075                     ?_SpkComparatorOn:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0075                     ?_SetDataTRISxWork_SPK_SHORT:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0075                     ??_SetDataTRISxWork_SPK_SHORT:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0075                     ?_ExcitatingOutOn:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0075                     ?_SpkComparatorOff:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0075                     ?_SetExcitatingOutOffData:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0075                     ?_PriorUpdateCorrentPosition:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0075                     ?_InitPositionSearch:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0075                     ?_SetMotorBitMotorNo:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0075                     ?_DetermineBasePosition:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0075                     ?_UpdataHandPosition:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0075                     ?_SaveLoadPosition:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0075                     ?_ActivateHandPosition:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0075                     ?_MoveTargetPosition:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0075                     ?_UpdateCurrentPositionByFinePosition:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0075                     ?_SetOutPutLATX:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_P2:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_P2:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0075                     ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0075                     ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_P2:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0075                     ?_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0075                     ??_SetPulseOutLATxWork_M0_REV_POL0_OFF:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_P2:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0075                     ?_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0075                     ??_SetPulseOutLATxWork_M0_REV_POL1_OFF:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_P2:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_P2:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0075                     ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0075                     ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_P2:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0075                     ?_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0075                     ??_SetPulseOutLATxWork_M1_REV_POL0_OFF:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_P2:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0075                     ?_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0075                     ??_SetPulseOutLATxWork_M1_REV_POL1_OFF:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_OPEN:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0075                     ?_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0075                     ??_SetDataTRISxWork_M0_SPK_POL0_SHORT:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0075                     ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0075                     ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_OPEN:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0075                     ?_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0075                     ??_SetDataTRISxWork_M0_SPK_POL1_SHORT:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_OPEN:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0075                     ?_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0075                     ??_SetDataTRISxWork_M1_SPK_POL0_SHORT:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0075                     ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0075                     ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_OPEN:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0075                     ?_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0075                     ??_SetDataTRISxWork_M1_SPK_POL1_SHORT:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0075                     ?_SPIControl_ExecuteCommand:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0075                     ?_TMR2_Initialize:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0075                     ?_TMR2_StartTimer:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0075                     ?_TMR2_StopTimer:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0075                     ?_TMR2_ISR:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0075                     ?_DAC_Initialize:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0075                     ?_INTERRUPT_InterruptManager:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0075                     ?_SYSTEM_Initialize:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0075                     ?_TMR1_StopTimer:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0075                     ?_TMR1_WriteTimer:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0075                     ?_SPI_Open:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0075                     ?_SPI_ReadByte:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0075                     ?_main:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0075                     ?_TMR2_Interrupt_SPK:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0075                     ?_WatchMotorDriveFinish:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0075                     ?_StartPulseOutM0:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0075                     ?_StartPulseOutM1:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0075                     ?_SetMotorStartSPK:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0075                     ?_SetMotorStopSPK:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0075                     ?_SetMotorEnableExcitating:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0075                     ?_SetMotorDisableExcitating:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0075                     ?_CalcMotorStepCounter:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0075                     ?_SetMotorPositionSearchStart:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0075                     ?_SetMotorCorrectPositionStart:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0075                     ?_SetMotorStop:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0075                     ?_DeactivateHandPosition:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0075                     ?_GetIsMotorActive:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0075                     ?_SetDataTRISxWork_SPK_OPEN:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0075                     ??_SetDataTRISxWork_SPK_OPEN:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0075                     ?i1_TMR2_StopTimer:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0075                     ??i1_TMR2_StopTimer:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0075                     ComparatorOff@motor_no:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0075                     ComparatorOn@motor_no:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0075                     TMR1_WriteTimer@timerVal:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987                           
  2988                           ; 2 bytes @ 0x0
  2989  0075                     	ds	1
  2990  0076                     ??_TMR2_Interrupt_SPK:
  2991  0076                     VrsCheck@motor_no:	
  2992                           ; 1 bytes @ 0x1
  2993                           
  2994                           
  2995                           ; 1 bytes @ 0x1
  2996  0076                     	ds	1
  2997  0077                     ??_TMR1_ISR:
  2998  0077                     ??_TMR2_Interrupt:	
  2999                           ; 1 bytes @ 0x2
  3000                           
  3001  0077                     ??_TMR1_WriteTimer:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004                           
  3005                           ; 1 bytes @ 0x2
  3006  0077                     	ds	3
  3007  007A                     ??_TMR2_CallBack:
  3008  007A                     ??_TMR2_ISR:	
  3009                           ; 1 bytes @ 0x5
  3010                           
  3011  007A                     ??_INTERRUPT_InterruptManager:	
  3012                           ; 1 bytes @ 0x5
  3013                           
  3014                           
  3015                           	psect	cstackBANK0
  3016  0020                     __pcstackBANK0:	
  3017                           ; 1 bytes @ 0x5
  3018                           
  3019  0020                     ?_TMR2_SetInterruptHandler:
  3020  0020                     ??_SPI_Initialize:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0020                     ??_PIN_MANAGER_Initialize:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026  0020                     ??_OSCILLATOR_Initialize:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029  0020                     ??_WDT_Initialize:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0020                     ?_TMR1_SetInterruptHandler:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035  0020                     ??_InitPulsePositionTable:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0020                     ?_SetMotorDirection:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0020                     ?_SetMotorAddShakePulse:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0020                     ?_SetMotorFrequency:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0020                     ??_SpkComparatorOn:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0020                     ??_SpkComparatorOff:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0020                     ??_SetMotorBitMotorNo:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0020                     ??_ActivateHandPosition:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0020                     ??_SetOutPutLATX:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0020                     ??_TMR2_StartTimer:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0020                     ??_TMR2_StopTimer:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068  0020                     ??_DAC_Initialize:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071  0020                     ??_TMR1_StopTimer:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0020                     ??_SPI_Open:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0020                     ??_SPI_ReadByte:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0020                     ??_StartPulseOutM0:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0020                     ??_StartPulseOutM1:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0020                     ??_SetMotorEnableExcitating:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0020                     ??_SetMotorDisableExcitating:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0020                     ?_SetDriveType:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0020                     ?_SetAfterMotorStopFunc:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0020                     ?_SetAfterDetectLoadFunc:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0020                     ??_SetMotorStop:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0020                     ??_DeactivateHandPosition:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0020                     ??_GetIsMotorActive:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0020                     ?___bmul:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0020                     ?___wmul:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0020                     SetDriveType@drive_type:	
  3117                           ; 2 bytes @ 0x0
  3118                           
  3119  0020                     SetMotorDirection@dir:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0020                     SetMotorAddShakePulse@sw:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0020                     SetMotorFrequency@type:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0020                     ___bmul@multiplicand:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0020                     TMR2_SetInterruptHandler@InterruptHandler:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  3135                           ; 2 bytes @ 0x0
  3136                           
  3137  0020                     SetAfterMotorStopFunc@func:	
  3138                           ; 2 bytes @ 0x0
  3139                           
  3140  0020                     SetAfterDetectLoadFunc@func:	
  3141                           ; 2 bytes @ 0x0
  3142                           
  3143  0020                     ___wmul@multiplier:	
  3144                           ; 2 bytes @ 0x0
  3145                           
  3146                           
  3147                           ; 2 bytes @ 0x0
  3148  0020                     	ds	1
  3149  0021                     ??_SetMotorDirection:
  3150  0021                     ??_SetMotorAddShakePulse:	
  3151                           ; 1 bytes @ 0x1
  3152                           
  3153  0021                     ??_SetMotorStart:	
  3154                           ; 1 bytes @ 0x1
  3155                           
  3156  0021                     ??_ExcitatingOutOn:	
  3157                           ; 1 bytes @ 0x1
  3158                           
  3159  0021                     ??_SetExcitatingOutOffData:	
  3160                           ; 1 bytes @ 0x1
  3161                           
  3162  0021                     ??_SetDriveType:	
  3163                           ; 1 bytes @ 0x1
  3164                           
  3165  0021                     ??___bmul:	
  3166                           ; 1 bytes @ 0x1
  3167                           
  3168  0021                     InitPulsePositionTable@motor_no:	
  3169                           ; 1 bytes @ 0x1
  3170                           
  3171  0021                     SetMotorFrequency@set_freq:	
  3172                           ; 1 bytes @ 0x1
  3173                           
  3174  0021                     SetMotorStart@motor_no:	
  3175                           ; 1 bytes @ 0x1
  3176                           
  3177                           
  3178                           ; 1 bytes @ 0x1
  3179  0021                     	ds	1
  3180  0022                     ??_TMR2_SetInterruptHandler:
  3181  0022                     ??_TMR1_Initialize:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0022                     ??_TMR1_SetInterruptHandler:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187  0022                     ??_SetMotorFrequency:	
  3188                           ; 1 bytes @ 0x2
  3189                           
  3190  0022                     ??_TMR2_Initialize:	
  3191                           ; 1 bytes @ 0x2
  3192                           
  3193  0022                     ??_SYSTEM_Initialize:	
  3194                           ; 1 bytes @ 0x2
  3195                           
  3196  0022                     ??_SetMotorStartSPK:	
  3197                           ; 1 bytes @ 0x2
  3198                           
  3199  0022                     ??_SetMotorStopSPK:	
  3200                           ; 1 bytes @ 0x2
  3201                           
  3202  0022                     ??_SetAfterMotorStopFunc:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205  0022                     ??_SetAfterDetectLoadFunc:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208  0022                     SetMotorEnableExcitating@motor_no:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211  0022                     SetMotorDisableExcitating@motor_no:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214  0022                     SetAfterMotorStopFunc@motor_no:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217  0022                     SetAfterDetectLoadFunc@motor_no:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220  0022                     SetMotorStop@motor_no:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223  0022                     ActivateHandPosition@motor_no:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226  0022                     DeactivateHandPosition@motor_no:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229  0022                     GetIsMotorActive@motor_no:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0022                     SetMotorBitMotorNo@motor_no:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0022                     ___bmul@product:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0022                     ___wmul@multiplicand:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241                           
  3242                           ; 2 bytes @ 0x2
  3243  0022                     	ds	1
  3244  0023                     SPI_Open@spiUniqueConfiguration:
  3245  0023                     SetDriveType@motor_no:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0023                     SetMotorDirection@motor_no:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0023                     SetMotorAddShakePulse@motor_no:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0023                     SetMotorFrequency@motor_no:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0023                     GetIsMotorActive@res:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0023                     ___bmul@multiplier:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263                           
  3264                           ; 1 bytes @ 0x3
  3265  0023                     	ds	1
  3266  0024                     ??___wmul:
  3267  0024                     ___wmul@product:	
  3268                           ; 1 bytes @ 0x4
  3269                           
  3270                           
  3271                           ; 2 bytes @ 0x4
  3272  0024                     	ds	2
  3273  0026                     ?_CorrectPosition:
  3274  0026                     ??_InitPositionSearch:	
  3275                           ; 1 bytes @ 0x6
  3276                           
  3277  0026                     ??_SaveLoadPosition:	
  3278                           ; 1 bytes @ 0x6
  3279                           
  3280  0026                     ??_UpdateCurrentPositionByFinePosition:	
  3281                           ; 1 bytes @ 0x6
  3282                           
  3283  0026                     CorrectPosition@pos:	
  3284                           ; 1 bytes @ 0x6
  3285                           
  3286                           
  3287                           ; 2 bytes @ 0x6
  3288  0026                     	ds	2
  3289  0028                     CorrectPosition@max:
  3290                           
  3291                           ; 2 bytes @ 0x8
  3292  0028                     	ds	2
  3293  002A                     ??_CorrectPosition:
  3294                           
  3295                           ; 1 bytes @ 0xA
  3296  002A                     	ds	3
  3297  002D                     ??_PriorUpdateCorrentPosition:
  3298  002D                     ??_DetermineBasePosition:	
  3299                           ; 1 bytes @ 0xD
  3300                           
  3301  002D                     ??_UpdataHandPosition:	
  3302                           ; 1 bytes @ 0xD
  3303                           
  3304  002D                     ?_UpdateTargetPosition:	
  3305                           ; 1 bytes @ 0xD
  3306                           
  3307  002D                     UpdateTargetPosition@steps:	
  3308                           ; 1 bytes @ 0xD
  3309                           
  3310                           
  3311                           ; 2 bytes @ 0xD
  3312  002D                     	ds	1
  3313  002E                     InitPositionSearch@i:
  3314  002E                     UpdateCurrentPositionByFinePosition@diff:	
  3315                           ; 1 bytes @ 0xE
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0xE
  3319  002E                     	ds	1
  3320  002F                     ??_UpdateTargetPosition:
  3321  002F                     InitPositionSearch@motor_no:	
  3322                           ; 1 bytes @ 0xF
  3323                           
  3324  002F                     PriorUpdateCorrentPosition@motor_no:	
  3325                           ; 1 bytes @ 0xF
  3326                           
  3327                           
  3328                           ; 1 bytes @ 0xF
  3329  002F                     	ds	1
  3330  0030                     ?_SetMotorStepCounter:
  3331  0030                     ??_CalcMotorStepCounter:	
  3332                           ; 1 bytes @ 0x10
  3333                           
  3334  0030                     ??_SetMotorPositionSearchStart:	
  3335                           ; 1 bytes @ 0x10
  3336                           
  3337  0030                     ??_SetMotorCorrectPositionStart:	
  3338                           ; 1 bytes @ 0x10
  3339                           
  3340  0030                     SetMotorPositionSearchStart@motor_no:	
  3341                           ; 1 bytes @ 0x10
  3342                           
  3343  0030                     UpdateCurrentPositionByFinePosition@i:	
  3344                           ; 1 bytes @ 0x10
  3345                           
  3346  0030                     SetMotorStepCounter@steps:	
  3347                           ; 1 bytes @ 0x10
  3348                           
  3349                           
  3350                           ; 2 bytes @ 0x10
  3351  0030                     	ds	1
  3352  0031                     UpdateTargetPosition@motor_no:
  3353  0031                     UpdateCurrentPositionByFinePosition@motor_no:	
  3354                           ; 1 bytes @ 0x11
  3355                           
  3356                           
  3357                           ; 1 bytes @ 0x11
  3358  0031                     	ds	1
  3359  0032                     ??_SetMotorStepCounter:
  3360  0032                     SetMotorStepCounter@motor_no:	
  3361                           ; 1 bytes @ 0x12
  3362                           
  3363  0032                     SetMotorCorrectPositionStart@motor_no:	
  3364                           ; 1 bytes @ 0x12
  3365                           
  3366                           
  3367                           ; 1 bytes @ 0x12
  3368  0032                     	ds	3
  3369  0035                     DetermineBasePosition@load_pos_type:
  3370                           
  3371                           ; 2 bytes @ 0x15
  3372  0035                     	ds	1
  3373  0036                     SaveLoadPosition@motor_no:
  3374                           
  3375                           ; 1 bytes @ 0x16
  3376  0036                     	ds	1
  3377  0037                     CalcMotorStepCounter@motor_bit:
  3378  0037                     DetermineBasePosition@base_pos_index:	
  3379                           ; 1 bytes @ 0x17
  3380                           
  3381  0037                     UpdataHandPosition@i:	
  3382                           ; 1 bytes @ 0x17
  3383                           
  3384  0037                     SaveLoadPosition@i:	
  3385                           ; 1 bytes @ 0x17
  3386                           
  3387                           
  3388                           ; 1 bytes @ 0x17
  3389  0037                     	ds	1
  3390  0038                     DetermineBasePosition@motor_no:
  3391  0038                     UpdataHandPosition@motor_no:	
  3392                           ; 1 bytes @ 0x18
  3393                           
  3394  0038                     CalcMotorStepCounter@steps:	
  3395                           ; 1 bytes @ 0x18
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x18
  3399  0038                     	ds	2
  3400  003A                     CalcMotorStepCounter@motor_no:
  3401                           
  3402                           ; 1 bytes @ 0x1A
  3403  003A                     	ds	1
  3404  003B                     ??_MoveTargetPosition:
  3405                           
  3406                           ; 1 bytes @ 0x1B
  3407  003B                     	ds	1
  3408  003C                     ??_AfterDetectedLoadPosition:
  3409  003C                     MoveTargetPosition@motor_no:	
  3410                           ; 1 bytes @ 0x1C
  3411                           
  3412                           
  3413                           ; 1 bytes @ 0x1C
  3414  003C                     	ds	1
  3415  003D                     ?_AfterDetectedLoadPosition:
  3416  003D                     ?_SPIControl_SetNotification:	
  3417                           ; 1 bytes @ 0x1D
  3418                           
  3419  003D                     ?_SpiCmdFunc_Test:	
  3420                           ; 1 bytes @ 0x1D
  3421                           
  3422  003D                     ?_SpiCmdFunc_FwdPulseNormal:	
  3423                           ; 1 bytes @ 0x1D
  3424                           
  3425  003D                     ?_SpiCmdFunc_RevPulseNormal:	
  3426                           ; 1 bytes @ 0x1D
  3427                           
  3428  003D                     ?_SpiCmdFunc_FwdPulseWithShake:	
  3429                           ; 1 bytes @ 0x1D
  3430                           
  3431  003D                     ?_SpiCmdFunc_SearchLoadPosition:	
  3432                           ; 1 bytes @ 0x1D
  3433                           
  3434  003D                     ?_SpiCmdFunc_SearchBasePosition:	
  3435                           ; 1 bytes @ 0x1D
  3436                           
  3437  003D                     ?_SpiCmdFunc_FwdPulseWithCorrect:	
  3438                           ; 1 bytes @ 0x1D
  3439                           
  3440  003D                     ?_SpiCmdFunc_FwdPulsePositionCtl:	
  3441                           ; 1 bytes @ 0x1D
  3442                           
  3443  003D                     ?_SpiCmdFunc_RevPulsePositionCtl:	
  3444                           ; 1 bytes @ 0x1D
  3445                           
  3446  003D                     ?_SpiCmdFunc_StartDetectVrs:	
  3447                           ; 1 bytes @ 0x1D
  3448                           
  3449  003D                     ?_SpiCmdFunc_StopDetectVrs:	
  3450                           ; 1 bytes @ 0x1D
  3451                           
  3452  003D                     ?_SpiCmdFunc_EnableExcitating:	
  3453                           ; 1 bytes @ 0x1D
  3454                           
  3455  003D                     ?_SpiCmdFunc_DisableExcitating:	
  3456                           ; 1 bytes @ 0x1D
  3457                           
  3458  003D                     ?_SpiCmdFunc_Search1008Position:	
  3459                           ; 1 bytes @ 0x1D
  3460                           
  3461  003D                     ?_SetFwdPulseWithCorrectProc:	
  3462                           ; 1 bytes @ 0x1D
  3463                           
  3464  003D                     ?_VerifyHandPosition_LoadPosition:	
  3465                           ; 1 bytes @ 0x1D
  3466                           
  3467  003D                     AfterDetectedLoadPosition@motor_no:	
  3468                           ; 1 bytes @ 0x1D
  3469                           
  3470  003D                     VerifyHandPosition_LoadPosition@motor_no:	
  3471                           ; 1 bytes @ 0x1D
  3472                           
  3473  003D                     SpiCmdFunc_Test@motor_no:	
  3474                           ; 1 bytes @ 0x1D
  3475                           
  3476  003D                     SpiCmdFunc_FwdPulseNormal@motor_no:	
  3477                           ; 1 bytes @ 0x1D
  3478                           
  3479  003D                     SpiCmdFunc_RevPulseNormal@motor_no:	
  3480                           ; 1 bytes @ 0x1D
  3481                           
  3482  003D                     SpiCmdFunc_FwdPulseWithShake@motor_no:	
  3483                           ; 1 bytes @ 0x1D
  3484                           
  3485  003D                     SpiCmdFunc_SearchLoadPosition@motor_no:	
  3486                           ; 1 bytes @ 0x1D
  3487                           
  3488  003D                     SpiCmdFunc_SearchBasePosition@motor_no:	
  3489                           ; 1 bytes @ 0x1D
  3490                           
  3491  003D                     SpiCmdFunc_FwdPulseWithCorrect@motor_no:	
  3492                           ; 1 bytes @ 0x1D
  3493                           
  3494  003D                     SetFwdPulseWithCorrectProc@motor_no:	
  3495                           ; 1 bytes @ 0x1D
  3496                           
  3497  003D                     SpiCmdFunc_FwdPulsePositionCtl@motor_no:	
  3498                           ; 1 bytes @ 0x1D
  3499                           
  3500  003D                     SpiCmdFunc_RevPulsePositionCtl@motor_no:	
  3501                           ; 1 bytes @ 0x1D
  3502                           
  3503  003D                     SpiCmdFunc_StartDetectVrs@motor_no:	
  3504                           ; 1 bytes @ 0x1D
  3505                           
  3506  003D                     SpiCmdFunc_StopDetectVrs@motor_no:	
  3507                           ; 1 bytes @ 0x1D
  3508                           
  3509  003D                     SpiCmdFunc_EnableExcitating@motor_no:	
  3510                           ; 1 bytes @ 0x1D
  3511                           
  3512  003D                     SpiCmdFunc_DisableExcitating@motor_no:	
  3513                           ; 1 bytes @ 0x1D
  3514                           
  3515  003D                     SpiCmdFunc_Search1008Position@motor_no:	
  3516                           ; 1 bytes @ 0x1D
  3517                           
  3518  003D                     SPIControl_SetNotification@motor_no:	
  3519                           ; 1 bytes @ 0x1D
  3520                           
  3521                           
  3522                           ; 1 bytes @ 0x1D
  3523  003D                     	ds	1
  3524  003E                     ??_SPIControl_SetNotification:
  3525  003E                     ??_SpiCmdFunc_Test:	
  3526                           ; 1 bytes @ 0x1E
  3527                           
  3528  003E                     ??_SpiCmdFunc_FwdPulseNormal:	
  3529                           ; 1 bytes @ 0x1E
  3530                           
  3531  003E                     ??_SpiCmdFunc_RevPulseNormal:	
  3532                           ; 1 bytes @ 0x1E
  3533                           
  3534  003E                     ??_SpiCmdFunc_FwdPulseWithShake:	
  3535                           ; 1 bytes @ 0x1E
  3536                           
  3537  003E                     ??_SpiCmdFunc_SearchLoadPosition:	
  3538                           ; 1 bytes @ 0x1E
  3539                           
  3540  003E                     ??_SpiCmdFunc_SearchBasePosition:	
  3541                           ; 1 bytes @ 0x1E
  3542                           
  3543  003E                     ??_SpiCmdFunc_FwdPulseWithCorrect:	
  3544                           ; 1 bytes @ 0x1E
  3545                           
  3546  003E                     ??_SpiCmdFunc_FwdPulsePositionCtl:	
  3547                           ; 1 bytes @ 0x1E
  3548                           
  3549  003E                     ??_SpiCmdFunc_RevPulsePositionCtl:	
  3550                           ; 1 bytes @ 0x1E
  3551                           
  3552  003E                     ??_SpiCmdFunc_StartDetectVrs:	
  3553                           ; 1 bytes @ 0x1E
  3554                           
  3555  003E                     ??_SpiCmdFunc_StopDetectVrs:	
  3556                           ; 1 bytes @ 0x1E
  3557                           
  3558  003E                     ??_SpiCmdFunc_EnableExcitating:	
  3559                           ; 1 bytes @ 0x1E
  3560                           
  3561  003E                     ??_SpiCmdFunc_DisableExcitating:	
  3562                           ; 1 bytes @ 0x1E
  3563                           
  3564  003E                     ??_SpiCmdFunc_Search1008Position:	
  3565                           ; 1 bytes @ 0x1E
  3566                           
  3567  003E                     ??_SetFwdPulseWithCorrectProc:	
  3568                           ; 1 bytes @ 0x1E
  3569                           
  3570  003E                     ??_VerifyHandPosition_LoadPosition:	
  3571                           ; 1 bytes @ 0x1E
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x1E
  3575  003E                     	ds	2
  3576  0040                     ??_SPIControl_ExecuteCommand:
  3577  0040                     SetFwdPulseWithCorrectProc@motor_bit:	
  3578                           ; 1 bytes @ 0x20
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x20
  3582  0040                     	ds	3
  3583  0043                     AfterDetectedLoadPosition@res:
  3584  0043                     SPIControl_ExecuteCommand@cmd_type:	
  3585                           ; 1 bytes @ 0x23
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x23
  3589  0043                     	ds	1
  3590  0044                     SPIControl_ExecuteCommand@motor_select:
  3591  0044                     AfterDetectedLoadPosition@move_steps:	
  3592                           ; 1 bytes @ 0x24
  3593                           
  3594                           
  3595                           ; 2 bytes @ 0x24
  3596  0044                     	ds	2
  3597  0046                     VerifyHandPosition_LoadPosition@remain_steps:
  3598                           
  3599                           ; 2 bytes @ 0x26
  3600  0046                     	ds	2
  3601  0048                     VerifyHandPosition_LoadPosition@misalignment_flag:
  3602                           
  3603                           ; 1 bytes @ 0x28
  3604  0048                     	ds	1
  3605  0049                     VerifyHandPosition_LoadPosition@curt_pos:
  3606                           
  3607                           ; 2 bytes @ 0x29
  3608  0049                     	ds	2
  3609  004B                     VerifyHandPosition_LoadPosition@i:
  3610                           
  3611                           ; 1 bytes @ 0x2B
  3612  004B                     	ds	1
  3613  004C                     VerifyHandPosition_LoadPosition@load_pos:
  3614                           
  3615                           ; 2 bytes @ 0x2C
  3616  004C                     	ds	2
  3617  004E                     ??_WatchMotorDriveFinish:
  3618                           
  3619                           ; 1 bytes @ 0x2E
  3620  004E                     	ds	1
  3621                           
  3622                           	psect	maintext
  3623  0A42                     __pmaintext:	
  3624 ;;
  3625 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3626 ;;
  3627 ;; *************** function _main *****************
  3628 ;; Defined at:
  3629 ;;		line 16 in file "main.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  1    wreg      void 
  3636 ;; Registers used:
  3637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : B1F/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3643 ;;      Params:         0       0       0       0       0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0
  3645 ;;      Temps:          0       0       0       1       0       0       0       0
  3646 ;;      Totals:         0       0       0       1       0       0       0       0
  3647 ;;Total ram usage:        1 bytes
  3648 ;; Hardware stack levels required when called:   12
  3649 ;; This function calls:
  3650 ;;		_InitPulsePositionTable
  3651 ;;		_SPIControl_RecieveComannd
  3652 ;;		_SPI_Open
  3653 ;;		_SYSTEM_Initialize
  3654 ;;		_SetMotorAddShakePulse
  3655 ;;		_SetMotorDirection
  3656 ;;		_SetMotorFrequency
  3657 ;;		_SetMotorStart
  3658 ;;		_SetMotorStepCounter
  3659 ;;		_TMR1_StopTimer
  3660 ;;		_TMR2_SetInterruptHandler
  3661 ;; This function is called by:
  3662 ;;		Startup code after reset
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _main
  3668  0A42                     _main:
  3669                           
  3670                           ;main.c: 19:     SYSTEM_Initialize();
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3674  0A42  3194  24FD  318A   	fcall	_SYSTEM_Initialize
  3675                           
  3676                           ;main.c: 21:  TMR1_StopTimer();
  3677  0A45  3180  2002  318A   	fcall	_TMR1_StopTimer
  3678                           
  3679                           ;main.c: 27:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  3680  0A48  30F9               	movlw	low _TMR2_Interrupt
  3681  0A49  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  3682  0A4A  3003               	movlw	high _TMR2_Interrupt
  3683  0A4B  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  3684  0A4C  3191  216A  318A   	fcall	_TMR2_SetInterruptHandler
  3685                           
  3686                           ;main.c: 34:     (INTCONbits.GIE = 1);
  3687  0A4F  178B               	bsf	11,7	;volatile
  3688                           
  3689                           ;main.c: 37:     (INTCONbits.PEIE = 1);
  3690  0A50  170B               	bsf	11,6	;volatile
  3691                           
  3692                           ;main.c: 45:  InitPulsePositionTable( 0 );
  3693  0A51  3000               	movlw	0
  3694  0A52  3193  238C  318A   	fcall	_InitPulsePositionTable
  3695                           
  3696                           ;main.c: 46:  InitPulsePositionTable( 1 );
  3697  0A55  3001               	movlw	1
  3698  0A56  3193  238C  318A   	fcall	_InitPulsePositionTable
  3699                           
  3700                           ;main.c: 48:  SetMotorDirection( 0, 1 );
  3701  0A59  0020               	movlb	0	; select bank0
  3702  0A5A  01A0               	clrf	SetMotorDirection@dir
  3703  0A5B  0AA0               	incf	SetMotorDirection@dir,f
  3704  0A5C  3000               	movlw	0
  3705  0A5D  3195  25B7  318A   	fcall	_SetMotorDirection
  3706                           
  3707                           ;main.c: 49:  SetMotorStepCounter( 0, 80 );
  3708  0A60  3050               	movlw	80
  3709  0A61  00B0               	movwf	SetMotorStepCounter@steps
  3710  0A62  3000               	movlw	0
  3711  0A63  00B1               	movwf	SetMotorStepCounter@steps+1
  3712  0A64  3000               	movlw	0
  3713  0A65  3192  2255  318A   	fcall	_SetMotorStepCounter
  3714                           
  3715                           ;main.c: 50:  SetMotorAddShakePulse( 0, 0 );
  3716  0A68  0020               	movlb	0	; select bank0
  3717  0A69  01A0               	clrf	SetMotorAddShakePulse@sw
  3718  0A6A  3000               	movlw	0
  3719  0A6B  3195  25E9  318A   	fcall	_SetMotorAddShakePulse
  3720                           
  3721                           ;main.c: 51:  SetMotorFrequency( 0, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3722  0A6E  01A0               	clrf	SetMotorFrequency@type
  3723  0A6F  3029               	movlw	41
  3724  0A70  0022               	movlb	2	; select bank2
  3725  0A71  00ED               	movwf	??_main^(0+256)
  3726  0A72  086D               	movf	??_main^(0+256),w
  3727  0A73  0020               	movlb	0	; select bank0
  3728  0A74  00A1               	movwf	SetMotorFrequency@set_freq
  3729  0A75  3000               	movlw	0
  3730  0A76  3188  20D3  318A   	fcall	_SetMotorFrequency
  3731                           
  3732                           ;main.c: 53:  SetMotorDirection( 1, 1 );
  3733  0A79  01A0               	clrf	SetMotorDirection@dir
  3734  0A7A  0AA0               	incf	SetMotorDirection@dir,f
  3735  0A7B  3001               	movlw	1
  3736  0A7C  3195  25B7  318A   	fcall	_SetMotorDirection
  3737                           
  3738                           ;main.c: 54:  SetMotorStepCounter( 1, 120 );
  3739  0A7F  3078               	movlw	120
  3740  0A80  00B0               	movwf	SetMotorStepCounter@steps
  3741  0A81  3000               	movlw	0
  3742  0A82  00B1               	movwf	SetMotorStepCounter@steps+1
  3743  0A83  3001               	movlw	1
  3744  0A84  3192  2255  318A   	fcall	_SetMotorStepCounter
  3745                           
  3746                           ;main.c: 55:  SetMotorAddShakePulse( 1, 0 );
  3747  0A87  0020               	movlb	0	; select bank0
  3748  0A88  01A0               	clrf	SetMotorAddShakePulse@sw
  3749  0A89  3001               	movlw	1
  3750  0A8A  3195  25E9  318A   	fcall	_SetMotorAddShakePulse
  3751                           
  3752                           ;main.c: 56:  SetMotorFrequency( 1, FREQ_SET_SELF_CONTROL_NORMAL, 41 );
  3753  0A8D  01A0               	clrf	SetMotorFrequency@type
  3754  0A8E  3029               	movlw	41
  3755  0A8F  0022               	movlb	2	; select bank2
  3756  0A90  00ED               	movwf	??_main^(0+256)
  3757  0A91  086D               	movf	??_main^(0+256),w
  3758  0A92  0020               	movlb	0	; select bank0
  3759  0A93  00A1               	movwf	SetMotorFrequency@set_freq
  3760  0A94  3001               	movlw	1
  3761  0A95  3188  20D3  318A   	fcall	_SetMotorFrequency
  3762                           
  3763                           ;main.c: 58:  SetMotorStart( 0 );
  3764  0A98  3000               	movlw	0
  3765  0A99  3191  2172  318A   	fcall	_SetMotorStart
  3766                           
  3767                           ;main.c: 59:  SetMotorStart( 1 );
  3768  0A9C  3001               	movlw	1
  3769  0A9D  3191  2172  318A   	fcall	_SetMotorStart
  3770                           
  3771                           ;main.c: 66:  SPI_Open(SPI_DEFAULT);
  3772  0AA0  3000               	movlw	0
  3773  0AA1  3189  21EC  318A   	fcall	_SPI_Open
  3774  0AA4                     l6650:
  3775                           
  3776                           ;main.c: 70:   SPIControl_RecieveComannd();
  3777  0AA4  3194  2499  318A   	fcall	_SPIControl_RecieveComannd
  3778  0AA7  2AA4               	goto	l6650
  3779  0AA8                     __end_of_main:
  3780                           
  3781                           	psect	text1
  3782  0002                     __ptext1:	
  3783 ;; *************** function _TMR1_StopTimer *****************
  3784 ;; Defined at:
  3785 ;;		line 99 in file "mcc_generated_files/tmr1.c"
  3786 ;; Parameters:    Size  Location     Type
  3787 ;;		None
  3788 ;; Auto vars:     Size  Location     Type
  3789 ;;		None
  3790 ;; Return value:  Size  Location     Type
  3791 ;;                  1    wreg      void 
  3792 ;; Registers used:
  3793 ;;		None
  3794 ;; Tracked objects:
  3795 ;;		On entry : 1F/0
  3796 ;;		On exit  : 1F/0
  3797 ;;		Unchanged: 0/0
  3798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3799 ;;      Params:         0       0       0       0       0       0       0       0
  3800 ;;      Locals:         0       0       0       0       0       0       0       0
  3801 ;;      Temps:          0       0       0       0       0       0       0       0
  3802 ;;      Totals:         0       0       0       0       0       0       0       0
  3803 ;;Total ram usage:        0 bytes
  3804 ;; Hardware stack levels used:    1
  3805 ;; Hardware stack levels required when called:    5
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_main
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           
  3814                           ;psect for function _TMR1_StopTimer
  3815  0002                     _TMR1_StopTimer:
  3816                           
  3817                           ;mcc_generated_files/tmr1.c: 102:     T1CONbits.TMR1ON = 0;
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _TMR1_StopTimer: []
  3821  0002  1018               	bcf	24,0	;volatile
  3822  0003  0008               	return
  3823  0004                     __end_of_TMR1_StopTimer:
  3824                           
  3825                           	psect	text2
  3826  15E9                     __ptext2:	
  3827 ;; *************** function _SetMotorAddShakePulse *****************
  3828 ;; Defined at:
  3829 ;;		line 1777 in file "MotorDrive.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  motor_no        1    wreg     unsigned char 
  3832 ;;  sw              1    0[BANK0 ] unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  motor_no        1    3[BANK0 ] unsigned char 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, status,2, status,0
  3839 ;; Tracked objects:
  3840 ;;		On entry : 1F/0
  3841 ;;		On exit  : 1F/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3844 ;;      Params:         0       1       0       0       0       0       0       0
  3845 ;;      Locals:         0       1       0       0       0       0       0       0
  3846 ;;      Temps:          0       2       0       0       0       0       0       0
  3847 ;;      Totals:         0       4       0       0       0       0       0       0
  3848 ;;Total ram usage:        4 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    5
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           
  3859                           ;psect for function _SetMotorAddShakePulse
  3860  15E9                     _SetMotorAddShakePulse:
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _SetMotorAddShakePulse: [wreg+status,2+status,0]
  3864                           ;SetMotorAddShakePulse@motor_no stored from wreg
  3865  15E9  00A3               	movwf	SetMotorAddShakePulse@motor_no
  3866                           
  3867                           ;MotorDrive.c: 1777: void SetMotorAddShakePulse(UB motor_no, UB sw);MotorDrive.c: 1778: 
      +                          {;MotorDrive.c: 1779:     motorBitOperation = (UB) (0x01 << motor_no);
  3868  15EA  3001               	movlw	1
  3869  15EB  00A1               	movwf	??_SetMotorAddShakePulse
  3870  15EC  0A23               	incf	SetMotorAddShakePulse@motor_no,w
  3871  15ED  2DEF               	goto	u5354
  3872  15EE                     u5355:
  3873  15EE  35A1               	lslf	??_SetMotorAddShakePulse,f
  3874  15EF                     u5354:
  3875  15EF  0B89               	decfsz	9,f
  3876  15F0  2DEE               	goto	u5355
  3877  15F1  0821               	movf	??_SetMotorAddShakePulse,w
  3878  15F2  00A2               	movwf	??_SetMotorAddShakePulse+1
  3879  15F3  0822               	movf	??_SetMotorAddShakePulse+1,w
  3880  15F4  00F4               	movwf	_motorBitOperation
  3881                           
  3882                           ;MotorDrive.c: 1781:     if (sw) {
  3883  15F5  0820               	movf	SetMotorAddShakePulse@sw,w
  3884  15F6  1903               	btfsc	3,2
  3885  15F7  2DFD               	goto	l6604
  3886                           
  3887                           ;MotorDrive.c: 1783:         addShakePulseBit |= motorBitOperation;
  3888  15F8  0874               	movf	_motorBitOperation,w
  3889  15F9  00A1               	movwf	??_SetMotorAddShakePulse
  3890  15FA  0821               	movf	??_SetMotorAddShakePulse,w
  3891  15FB  04F0               	iorwf	_addShakePulseBit,f
  3892                           
  3893                           ;MotorDrive.c: 1785:     } else {
  3894  15FC  0008               	return
  3895  15FD                     l6604:
  3896                           
  3897                           ;MotorDrive.c: 1787:         addShakePulseBit &= (UB) (~motorBitOperation);
  3898  15FD  0974               	comf	_motorBitOperation,w
  3899  15FE  00A1               	movwf	??_SetMotorAddShakePulse
  3900  15FF  0821               	movf	??_SetMotorAddShakePulse,w
  3901  1600  05F0               	andwf	_addShakePulseBit,f
  3902  1601  0008               	return
  3903  1602                     __end_of_SetMotorAddShakePulse:
  3904                           
  3905                           	psect	text3
  3906  14FD                     __ptext3:	
  3907 ;; *************** function _SYSTEM_Initialize *****************
  3908 ;; Defined at:
  3909 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0, pclath, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : B1F/0
  3920 ;;		On exit  : 1F/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3923 ;;      Params:         0       0       0       0       0       0       0       0
  3924 ;;      Locals:         0       0       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0
  3926 ;;      Totals:         0       0       0       0       0       0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    7
  3930 ;; This function calls:
  3931 ;;		_DAC_Initialize
  3932 ;;		_OSCILLATOR_Initialize
  3933 ;;		_PIN_MANAGER_Initialize
  3934 ;;		_SPI_Initialize
  3935 ;;		_TMR1_Initialize
  3936 ;;		_TMR2_Initialize
  3937 ;;		_WDT_Initialize
  3938 ;; This function is called by:
  3939 ;;		_main
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _SYSTEM_Initialize
  3945  14FD                     _SYSTEM_Initialize:
  3946                           
  3947                           ;mcc_generated_files/mcc.c: 53:     SPI_Initialize();
  3948                           
  3949                           ;incstack = 0
  3950                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3951  14FD  3191  2190  3194   	fcall	_SPI_Initialize
  3952                           
  3953                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  3954  1500  3195  25D0  3194   	fcall	_PIN_MANAGER_Initialize
  3955                           
  3956                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  3957  1503  3191  2164  3194   	fcall	_OSCILLATOR_Initialize
  3958                           
  3959                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  3960  1506  3191  2150  3194   	fcall	_WDT_Initialize
  3961                           
  3962                           ;mcc_generated_files/mcc.c: 57:     DAC_Initialize();
  3963  1509  3191  215E  3194   	fcall	_DAC_Initialize
  3964                           
  3965                           ;mcc_generated_files/mcc.c: 58:     TMR2_Initialize();
  3966  150C  3194  2461  3194   	fcall	_TMR2_Initialize
  3967                           
  3968                           ;mcc_generated_files/mcc.c: 59:     TMR1_Initialize();
  3969  150F  3196  261C         	fcall	_TMR1_Initialize
  3970  1511  0008               	return
  3971  1512                     __end_of_SYSTEM_Initialize:
  3972                           
  3973                           	psect	text4
  3974  1150                     __ptext4:	
  3975 ;; *************** function _WDT_Initialize *****************
  3976 ;; Defined at:
  3977 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;		None
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  1    wreg      void 
  3984 ;; Registers used:
  3985 ;;		wreg
  3986 ;; Tracked objects:
  3987 ;;		On entry : B1F/2
  3988 ;;		On exit  : B1F/1
  3989 ;;		Unchanged: B00/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3991 ;;      Params:         0       0       0       0       0       0       0       0
  3992 ;;      Locals:         0       0       0       0       0       0       0       0
  3993 ;;      Temps:          0       0       0       0       0       0       0       0
  3994 ;;      Totals:         0       0       0       0       0       0       0       0
  3995 ;;Total ram usage:        0 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    5
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_SYSTEM_Initialize
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function _WDT_Initialize
  4007  1150                     _WDT_Initialize:
  4008                           
  4009                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _WDT_Initialize: [wreg]
  4013  1150  3016               	movlw	22
  4014  1151  0021               	movlb	1	; select bank1
  4015  1152  0097               	movwf	23	;volatile
  4016  1153  0008               	return
  4017  1154                     __end_of_WDT_Initialize:
  4018                           
  4019                           	psect	text5
  4020  1461                     __ptext5:	
  4021 ;; *************** function _TMR2_Initialize *****************
  4022 ;; Defined at:
  4023 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;		None
  4026 ;; Auto vars:     Size  Location     Type
  4027 ;;		None
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  1    wreg      void 
  4030 ;; Registers used:
  4031 ;;		wreg, status,2, status,0, pclath, cstack
  4032 ;; Tracked objects:
  4033 ;;		On entry : B1F/2
  4034 ;;		On exit  : 1F/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4037 ;;      Params:         0       0       0       0       0       0       0       0
  4038 ;;      Locals:         0       0       0       0       0       0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0
  4040 ;;      Totals:         0       0       0       0       0       0       0       0
  4041 ;;Total ram usage:        0 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; Hardware stack levels required when called:    6
  4044 ;; This function calls:
  4045 ;;		_TMR2_SetInterruptHandler
  4046 ;; This function is called by:
  4047 ;;		_SYSTEM_Initialize
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _TMR2_Initialize
  4053  1461                     _TMR2_Initialize:
  4054                           
  4055                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x79;
  4056                           
  4057                           ;incstack = 0
  4058                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4059  1461  3079               	movlw	121
  4060  1462  0020               	movlb	0	; select bank0
  4061  1463  009B               	movwf	27	;volatile
  4062                           
  4063                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  4064  1464  019A               	clrf	26	;volatile
  4065                           
  4066                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  4067  1465  1091               	bcf	17,1	;volatile
  4068                           
  4069                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  4070  1466  0021               	movlb	1	; select bank1
  4071  1467  1491               	bsf	17,1	;volatile
  4072                           
  4073                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  4074  1468  3038               	movlw	low _TMR2_DefaultInterruptHandler
  4075  1469  0020               	movlb	0	; select bank0
  4076  146A  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  4077  146B  3011               	movlw	high _TMR2_DefaultInterruptHandler
  4078  146C  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  4079  146D  3191  216A         	fcall	_TMR2_SetInterruptHandler
  4080                           
  4081                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x05;
  4082  146F  3005               	movlw	5
  4083  1470  0020               	movlb	0	; select bank0
  4084  1471  009C               	movwf	28	;volatile
  4085  1472  0008               	return
  4086  1473                     __end_of_TMR2_Initialize:
  4087                           
  4088                           	psect	text6
  4089  161C                     __ptext6:	
  4090 ;; *************** function _TMR1_Initialize *****************
  4091 ;; Defined at:
  4092 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, status,2, status,0, pclath, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 1F/0
  4103 ;;		On exit  : 1F/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4106 ;;      Params:         0       0       0       0       0       0       0       0
  4107 ;;      Locals:         0       0       0       0       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0       0
  4109 ;;      Totals:         0       0       0       0       0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    6
  4113 ;; This function calls:
  4114 ;;		_TMR1_SetInterruptHandler
  4115 ;; This function is called by:
  4116 ;;		_SYSTEM_Initialize
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _TMR1_Initialize
  4122  161C                     _TMR1_Initialize:
  4123                           
  4124                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4128  161C  0199               	clrf	25	;volatile
  4129                           
  4130                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x86;
  4131  161D  3086               	movlw	134
  4132  161E  0097               	movwf	23	;volatile
  4133                           
  4134                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xE8;
  4135  161F  30E8               	movlw	232
  4136  1620  0096               	movwf	22	;volatile
  4137                           
  4138                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  4139  1621  1011               	bcf	17,0	;volatile
  4140                           
  4141                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  4142  1622  0817               	movf	23,w	;volatile
  4143  1623  0022               	movlb	2	; select bank2
  4144  1624  00E7               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  4145  1625  0020               	movlb	0	; select bank0
  4146  1626  0816               	movf	22,w	;volatile
  4147  1627  0022               	movlb	2	; select bank2
  4148  1628  00E6               	movwf	_timer1ReloadVal^(0+256)	;volatile
  4149                           
  4150                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  4151  1629  0021               	movlb	1	; select bank1
  4152  162A  1411               	bsf	17,0	;volatile
  4153                           
  4154                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  4155  162B  3037               	movlw	low _TMR1_DefaultInterruptHandler
  4156  162C  0020               	movlb	0	; select bank0
  4157  162D  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  4158  162E  3011               	movlw	high _TMR1_DefaultInterruptHandler
  4159  162F  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  4160  1630  3188  2001         	fcall	_TMR1_SetInterruptHandler
  4161                           
  4162                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0xC1;
  4163  1632  30C1               	movlw	193
  4164  1633  0020               	movlb	0	; select bank0
  4165  1634  0098               	movwf	24	;volatile
  4166  1635  0008               	return
  4167  1636                     __end_of_TMR1_Initialize:
  4168                           
  4169                           	psect	text7
  4170  0801                     __ptext7:	
  4171 ;; *************** function _TMR1_SetInterruptHandler *****************
  4172 ;; Defined at:
  4173 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4176 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg
  4183 ;; Tracked objects:
  4184 ;;		On entry : 1F/0
  4185 ;;		On exit  : 1F/2
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4188 ;;      Params:         0       2       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0
  4191 ;;      Totals:         0       2       0       0       0       0       0       0
  4192 ;;Total ram usage:        2 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    5
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_TMR1_Initialize
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function _TMR1_SetInterruptHandler
  4204  0801                     _TMR1_SetInterruptHandler:
  4205                           
  4206                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  4210  0801  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  4211  0802  0022               	movlb	2	; select bank2
  4212  0803  00E5               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  4213  0804  0020               	movlb	0	; select bank0
  4214  0805  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  4215  0806  0022               	movlb	2	; select bank2
  4216  0807  00E4               	movwf	_TMR1_InterruptHandler^(0+256)
  4217  0808  0008               	return
  4218  0809                     __end_of_TMR1_SetInterruptHandler:
  4219                           
  4220                           	psect	text8
  4221  1190                     __ptext8:	
  4222 ;; *************** function _SPI_Initialize *****************
  4223 ;; Defined at:
  4224 ;;		line 62 in file "mcc_generated_files/spi.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, status,2
  4233 ;; Tracked objects:
  4234 ;;		On entry : B1F/0
  4235 ;;		On exit  : B1F/4
  4236 ;;		Unchanged: B00/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4238 ;;      Params:         0       0       0       0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0
  4241 ;;      Totals:         0       0       0       0       0       0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    5
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_SYSTEM_Initialize
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _SPI_Initialize
  4254  1190                     _SPI_Initialize:
  4255                           
  4256                           ;mcc_generated_files/spi.c: 65:     SSP1STAT = 0x00;
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in _SPI_Initialize: [wreg+status,2]
  4260  1190  0024               	movlb	4	; select bank4
  4261  1191  0194               	clrf	20	;volatile
  4262                           
  4263                           ;mcc_generated_files/spi.c: 66:     SSP1CON1 = 0x14;
  4264  1192  3014               	movlw	20
  4265  1193  0095               	movwf	21	;volatile
  4266                           
  4267                           ;mcc_generated_files/spi.c: 67:     SSP1ADD = 0x00;
  4268  1194  0192               	clrf	18	;volatile
  4269                           
  4270                           ;mcc_generated_files/spi.c: 68:     TRISBbits.TRISB6 = 1;
  4271  1195  0021               	movlb	1	; select bank1
  4272  1196  170D               	bsf	13,6	;volatile
  4273                           
  4274                           ;mcc_generated_files/spi.c: 69:     SSP1CON1bits.SSPEN = 0;
  4275  1197  0024               	movlb	4	; select bank4
  4276  1198  1295               	bcf	21,5	;volatile
  4277  1199  0008               	return
  4278  119A                     __end_of_SPI_Initialize:
  4279                           
  4280                           	psect	text9
  4281  15D0                     __ptext9:	
  4282 ;; *************** function _PIN_MANAGER_Initialize *****************
  4283 ;; Defined at:
  4284 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      void 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2
  4293 ;; Tracked objects:
  4294 ;;		On entry : B1F/4
  4295 ;;		On exit  : B1F/2
  4296 ;;		Unchanged: B00/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4298 ;;      Params:         0       0       0       0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0
  4301 ;;      Totals:         0       0       0       0       0       0       0       0
  4302 ;;Total ram usage:        0 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    5
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_SYSTEM_Initialize
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           
  4313                           ;psect for function _PIN_MANAGER_Initialize
  4314  15D0                     _PIN_MANAGER_Initialize:
  4315                           
  4316                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  4317                           
  4318                           ;incstack = 0
  4319                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4320  15D0  0022               	movlb	2	; select bank2
  4321  15D1  018C               	clrf	12	;volatile
  4322                           
  4323                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  4324  15D2  018D               	clrf	13	;volatile
  4325                           
  4326                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  4327  15D3  018E               	clrf	14	;volatile
  4328                           
  4329                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x09;
  4330  15D4  3009               	movlw	9
  4331  15D5  0021               	movlb	1	; select bank1
  4332  15D6  008C               	movwf	12	;volatile
  4333                           
  4334                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x50;
  4335  15D7  3050               	movlw	80
  4336  15D8  008D               	movwf	13	;volatile
  4337                           
  4338                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x60;
  4339  15D9  3060               	movlw	96
  4340  15DA  008E               	movwf	14	;volatile
  4341                           
  4342                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x0F;
  4343  15DB  300F               	movlw	15
  4344  15DC  0023               	movlb	3	; select bank3
  4345  15DD  008E               	movwf	14	;volatile
  4346                           
  4347                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
  4348  15DE  018D               	clrf	13	;volatile
  4349                           
  4350                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x03;
  4351  15DF  3003               	movlw	3
  4352  15E0  008C               	movwf	12	;volatile
  4353                           
  4354                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  4355  15E1  0024               	movlb	4	; select bank4
  4356  15E2  018D               	clrf	13	;volatile
  4357                           
  4358                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  4359  15E3  018C               	clrf	12	;volatile
  4360                           
  4361                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  4362  15E4  0021               	movlb	1	; select bank1
  4363  15E5  1795               	bsf	21,7	;volatile
  4364                           
  4365                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  4366  15E6  0022               	movlb	2	; select bank2
  4367  15E7  019D               	clrf	29	;volatile
  4368  15E8  0008               	return
  4369  15E9                     __end_of_PIN_MANAGER_Initialize:
  4370                           
  4371                           	psect	text10
  4372  1164                     __ptext10:	
  4373 ;; *************** function _OSCILLATOR_Initialize *****************
  4374 ;; Defined at:
  4375 ;;		line 62 in file "mcc_generated_files/mcc.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;		None
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2
  4384 ;; Tracked objects:
  4385 ;;		On entry : B1F/2
  4386 ;;		On exit  : B1F/2
  4387 ;;		Unchanged: B00/0
  4388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4389 ;;      Params:         0       0       0       0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0
  4392 ;;      Totals:         0       0       0       0       0       0       0       0
  4393 ;;Total ram usage:        0 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    5
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_SYSTEM_Initialize
  4400 ;; This function uses a non-reentrant model
  4401 ;;
  4402                           
  4403                           
  4404                           ;psect for function _OSCILLATOR_Initialize
  4405  1164                     _OSCILLATOR_Initialize:
  4406                           
  4407                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x7A;
  4408                           
  4409                           ;incstack = 0
  4410                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4411  1164  307A               	movlw	122
  4412  1165  0021               	movlb	1	; select bank1
  4413  1166  0099               	movwf	25	;volatile
  4414                           
  4415                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  4416  1167  0022               	movlb	2	; select bank2
  4417  1168  0196               	clrf	22	;volatile
  4418  1169  0008               	return
  4419  116A                     __end_of_OSCILLATOR_Initialize:
  4420                           
  4421                           	psect	text11
  4422  115E                     __ptext11:	
  4423 ;; *************** function _DAC_Initialize *****************
  4424 ;; Defined at:
  4425 ;;		line 58 in file "mcc_generated_files/dac.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;		None
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      void 
  4432 ;; Registers used:
  4433 ;;		wreg
  4434 ;; Tracked objects:
  4435 ;;		On entry : B1F/1
  4436 ;;		On exit  : B1F/2
  4437 ;;		Unchanged: B00/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4439 ;;      Params:         0       0       0       0       0       0       0       0
  4440 ;;      Locals:         0       0       0       0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0
  4442 ;;      Totals:         0       0       0       0       0       0       0       0
  4443 ;;Total ram usage:        0 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    5
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_SYSTEM_Initialize
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           
  4454                           ;psect for function _DAC_Initialize
  4455  115E                     _DAC_Initialize:
  4456                           
  4457                           ;mcc_generated_files/dac.c: 61:     DACCON0 = 0x80;
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _DAC_Initialize: [wreg]
  4461  115E  3080               	movlw	128
  4462  115F  0022               	movlb	2	; select bank2
  4463  1160  0098               	movwf	24	;volatile
  4464                           
  4465                           ;mcc_generated_files/dac.c: 63:     DACCON1 = 0x1F;
  4466  1161  301F               	movlw	31
  4467  1162  0099               	movwf	25	;volatile
  4468  1163  0008               	return
  4469  1164                     __end_of_DAC_Initialize:
  4470                           
  4471                           	psect	text12
  4472  09EC                     __ptext12:	
  4473 ;; *************** function _SPI_Open *****************
  4474 ;; Defined at:
  4475 ;;		line 72 in file "mcc_generated_files/spi.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  spiUniqueCon    1    wreg     enum E353
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  spiUniqueCon    1    3[BANK0 ] enum E353
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      _Bool 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4484 ;; Tracked objects:
  4485 ;;		On entry : 1F/0
  4486 ;;		On exit  : 1F/4
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4489 ;;      Params:         0       0       0       0       0       0       0       0
  4490 ;;      Locals:         0       1       0       0       0       0       0       0
  4491 ;;      Temps:          0       3       0       0       0       0       0       0
  4492 ;;      Totals:         0       4       0       0       0       0       0       0
  4493 ;;Total ram usage:        4 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    5
  4496 ;; This function calls:
  4497 ;;		Nothing
  4498 ;; This function is called by:
  4499 ;;		_main
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _SPI_Open
  4505  09EC                     _SPI_Open:
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _SPI_Open: [wreg-fsr0h+status,2+status,0+pclath]
  4509                           ;SPI_Open@spiUniqueConfiguration stored from wreg
  4510  09EC  00A3               	movwf	SPI_Open@spiUniqueConfiguration
  4511                           
  4512                           ;mcc_generated_files/spi.c: 72: _Bool SPI_Open(spi_modes_t spiUniqueConfiguration);mcc_g
      +                          enerated_files/spi.c: 73: {;mcc_generated_files/spi.c: 74:     if(!SSP1CON1bits.SSPEN)
  4513  09ED  0024               	movlb	4	; select bank4
  4514  09EE  1A95               	btfsc	21,5	;volatile
  4515  09EF  0008               	return
  4516                           
  4517                           ;mcc_generated_files/spi.c: 75:     {;mcc_generated_files/spi.c: 76:         SSP1STAT = 
      +                          spi_configuration[spiUniqueConfiguration].stat;
  4518  09F0  0020               	movlb	0	; select bank0
  4519  09F1  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4520  09F2  00A0               	movwf	??_SPI_Open
  4521  09F3  01A1               	clrf	??_SPI_Open+1
  4522  09F4  35A0               	lslf	??_SPI_Open,f
  4523  09F5  0DA1               	rlf	??_SPI_Open+1,f
  4524  09F6  35A0               	lslf	??_SPI_Open,f
  4525  09F7  0DA1               	rlf	??_SPI_Open+1,f
  4526  09F8  305B               	movlw	low ((_spi_configuration+1)| (0+32768))
  4527  09F9  0720               	addwf	??_SPI_Open,w
  4528  09FA  0084               	movwf	4
  4529  09FB  3098               	movlw	high ((_spi_configuration+1)| (0+32768))
  4530  09FC  3D21               	addwfc	??_SPI_Open+1,w
  4531  09FD  0085               	movwf	5
  4532  09FE  0800               	movf	0,w	;code access
  4533  09FF  0024               	movlb	4	; select bank4
  4534  0A00  0094               	movwf	20	;volatile
  4535                           
  4536                           ;mcc_generated_files/spi.c: 77:         SSP1CON1 = spi_configuration[spiUniqueConfigurat
      +                          ion].con1;
  4537  0A01  0020               	movlb	0	; select bank0
  4538  0A02  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4539  0A03  00A0               	movwf	??_SPI_Open
  4540  0A04  01A1               	clrf	??_SPI_Open+1
  4541  0A05  35A0               	lslf	??_SPI_Open,f
  4542  0A06  0DA1               	rlf	??_SPI_Open+1,f
  4543  0A07  35A0               	lslf	??_SPI_Open,f
  4544  0A08  0DA1               	rlf	??_SPI_Open+1,f
  4545  0A09  305A               	movlw	low (_spi_configuration| (0+32768))
  4546  0A0A  0720               	addwf	??_SPI_Open,w
  4547  0A0B  0084               	movwf	4
  4548  0A0C  3098               	movlw	high (_spi_configuration| (0+32768))
  4549  0A0D  3D21               	addwfc	??_SPI_Open+1,w
  4550  0A0E  0085               	movwf	5
  4551  0A0F  0800               	movf	0,w	;code access
  4552  0A10  0024               	movlb	4	; select bank4
  4553  0A11  0095               	movwf	21	;volatile
  4554                           
  4555                           ;mcc_generated_files/spi.c: 78:         SSP1CON2 = 0x00;
  4556  0A12  0196               	clrf	22	;volatile
  4557                           
  4558                           ;mcc_generated_files/spi.c: 79:         SSP1ADD = spi_configuration[spiUniqueConfigurati
      +                          on].add;
  4559  0A13  0020               	movlb	0	; select bank0
  4560  0A14  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4561  0A15  00A0               	movwf	??_SPI_Open
  4562  0A16  01A1               	clrf	??_SPI_Open+1
  4563  0A17  35A0               	lslf	??_SPI_Open,f
  4564  0A18  0DA1               	rlf	??_SPI_Open+1,f
  4565  0A19  35A0               	lslf	??_SPI_Open,f
  4566  0A1A  0DA1               	rlf	??_SPI_Open+1,f
  4567  0A1B  305C               	movlw	low ((_spi_configuration+2)| (0+32768))
  4568  0A1C  0720               	addwf	??_SPI_Open,w
  4569  0A1D  0084               	movwf	4
  4570  0A1E  3098               	movlw	high ((_spi_configuration+2)| (0+32768))
  4571  0A1F  3D21               	addwfc	??_SPI_Open+1,w
  4572  0A20  0085               	movwf	5
  4573  0A21  0800               	movf	0,w	;code access
  4574  0A22  0024               	movlb	4	; select bank4
  4575  0A23  0092               	movwf	18	;volatile
  4576                           
  4577                           ;mcc_generated_files/spi.c: 80:         TRISBbits.TRISB6 = spi_configuration[spiUniqueCo
      +                          nfiguration].operation;
  4578  0A24  0020               	movlb	0	; select bank0
  4579  0A25  0823               	movf	SPI_Open@spiUniqueConfiguration,w
  4580  0A26  00A0               	movwf	??_SPI_Open
  4581  0A27  01A1               	clrf	??_SPI_Open+1
  4582  0A28  35A0               	lslf	??_SPI_Open,f
  4583  0A29  0DA1               	rlf	??_SPI_Open+1,f
  4584  0A2A  35A0               	lslf	??_SPI_Open,f
  4585  0A2B  0DA1               	rlf	??_SPI_Open+1,f
  4586  0A2C  305D               	movlw	low ((_spi_configuration+3)| (0+32768))
  4587  0A2D  0720               	addwf	??_SPI_Open,w
  4588  0A2E  0084               	movwf	4
  4589  0A2F  3098               	movlw	high ((_spi_configuration+3)| (0+32768))
  4590  0A30  3D21               	addwfc	??_SPI_Open+1,w
  4591  0A31  0085               	movwf	5
  4592  0A32  0800               	movf	0,w	;code access
  4593  0A33  00A2               	movwf	??_SPI_Open+2
  4594  0A34  0EA2               	swapf	??_SPI_Open+2,f
  4595  0A35  0DA2               	rlf	??_SPI_Open+2,f
  4596  0A36  0DA2               	rlf	??_SPI_Open+2,f
  4597  0A37  0021               	movlb	1	; select bank1
  4598  0A38  080D               	movf	13,w	;volatile
  4599  0A39  0020               	movlb	0	; select bank0
  4600  0A3A  0622               	xorwf	??_SPI_Open+2,w
  4601  0A3B  39BF               	andlw	-65
  4602  0A3C  0622               	xorwf	??_SPI_Open+2,w
  4603  0A3D  0021               	movlb	1	; select bank1
  4604  0A3E  008D               	movwf	13	;volatile
  4605                           
  4606                           ;mcc_generated_files/spi.c: 81:         SSP1CON1bits.SSPEN = 1;
  4607  0A3F  0024               	movlb	4	; select bank4
  4608  0A40  1695               	bsf	21,5	;volatile
  4609  0A41  0008               	return
  4610  0A42                     __end_of_SPI_Open:
  4611                           
  4612                           	psect	text13
  4613  1499                     __ptext13:	
  4614 ;; *************** function _SPIControl_RecieveComannd *****************
  4615 ;; Defined at:
  4616 ;;		line 173 in file "spi_control.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/4
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4630 ;;      Params:         0       0       0       0       0       0       0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0       0
  4632 ;;      Temps:          0       0       0       1       0       0       0       0
  4633 ;;      Totals:         0       0       0       1       0       0       0       0
  4634 ;;Total ram usage:        1 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:   11
  4637 ;; This function calls:
  4638 ;;		_SPIControl_ExecuteCommand
  4639 ;;		_SPI_ReadByte
  4640 ;;		_WatchMotorDriveFinish
  4641 ;; This function is called by:
  4642 ;;		_main
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function _SPIControl_RecieveComannd
  4648  1499                     _SPIControl_RecieveComannd:
  4649  1499                     l1294:	
  4650                           ;incstack = 0
  4651                           ; Regs used in _SPIControl_RecieveComannd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4652                           ;spi_control.c: 175:     while ( 1 ) {
  4653                           
  4654                           
  4655                           ;spi_control.c: 179:         if ( PIR1bits.SSP1IF ) {
  4656  1499  0020               	movlb	0	; select bank0
  4657  149A  1D91               	btfss	17,3	;volatile
  4658  149B  2CA8               	goto	l6612
  4659                           
  4660                           ;spi_control.c: 180:             PIR1bits.SSP1IF = 0;
  4661  149C  1191               	bcf	17,3	;volatile
  4662                           
  4663                           ;spi_control.c: 181:             recieveCommand = SPI_ReadByte( );
  4664  149D  3191  2143  3194   	fcall	_SPI_ReadByte
  4665  14A0  0022               	movlb	2	; select bank2
  4666  14A1  00EC               	movwf	??_SPIControl_RecieveComannd^(0+256)
  4667  14A2  086C               	movf	??_SPIControl_RecieveComannd^(0+256),w
  4668  14A3  0021               	movlb	1	; select bank1
  4669  14A4  00CC               	movwf	_recieveCommand^(0+128)
  4670                           
  4671                           ;spi_control.c: 182:             SPIControl_ExecuteCommand( );
  4672  14A5  318B  231A  3194   	fcall	_SPIControl_ExecuteCommand
  4673  14A8                     l6612:
  4674                           
  4675                           ;spi_control.c: 185:         WatchMotorDriveFinish( );
  4676  14A8  318C  2479  3194   	fcall	_WatchMotorDriveFinish
  4677  14AB  2C99               	goto	l1294
  4678  14AC                     __end_of_SPIControl_RecieveComannd:
  4679                           
  4680                           	psect	text14
  4681  0C79                     __ptext14:	
  4682 ;; *************** function _WatchMotorDriveFinish *****************
  4683 ;; Defined at:
  4684 ;;		line 1201 in file "MotorDrive.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;		None
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  func            2    0[BANK2 ] PTR FTN(unsigned char ,)
  4689 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
  4690 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
  4691 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
  4692 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), VerifyHandPosition_LoadPosition(
      +1), 
  4693 ;;		 -> SPIControl_SetNotification(1), AfterDetectedLoadPosition(1), NULL(0), 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 1C/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4703 ;;      Params:         0       0       0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       2       0       0       0       0
  4705 ;;      Temps:          0       1       0       0       0       0       0       0
  4706 ;;      Totals:         0       1       0       2       0       0       0       0
  4707 ;;Total ram usage:        3 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:   10
  4710 ;; This function calls:
  4711 ;;		_AfterDetectedLoadPosition
  4712 ;;		_SPIControl_SetNotification
  4713 ;;		_SetFwdPulseWithCorrectProc
  4714 ;;		_SpiCmdFunc_DisableExcitating
  4715 ;;		_SpiCmdFunc_EnableExcitating
  4716 ;;		_SpiCmdFunc_FwdPulseNormal
  4717 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  4718 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4719 ;;		_SpiCmdFunc_FwdPulseWithShake
  4720 ;;		_SpiCmdFunc_RevPulseNormal
  4721 ;;		_SpiCmdFunc_RevPulsePositionCtl
  4722 ;;		_SpiCmdFunc_Search1008Position
  4723 ;;		_SpiCmdFunc_SearchBasePosition
  4724 ;;		_SpiCmdFunc_SearchLoadPosition
  4725 ;;		_SpiCmdFunc_StartDetectVrs
  4726 ;;		_SpiCmdFunc_StopDetectVrs
  4727 ;;		_SpiCmdFunc_Test
  4728 ;;		_VerifyHandPosition_LoadPosition
  4729 ;; This function is called by:
  4730 ;;		_SPIControl_RecieveComannd
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _WatchMotorDriveFinish
  4736  0C79                     _WatchMotorDriveFinish:
  4737                           
  4738                           ;MotorDrive.c: 1203:     void ( *func)(UB motor_no);;MotorDrive.c: 1205:     if (reqAfte
      +                          rDetectLoadFuncBit & 0x01) {
  4739                           
  4740                           ;incstack = 0
  4741                           ; Regs used in _WatchMotorDriveFinish: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4742  0C79  0021               	movlb	1	; select bank1
  4743  0C7A  1C50               	btfss	_reqAfterDetectLoadFuncBit^(0+128),0
  4744  0C7B  2C98               	goto	l6520
  4745                           
  4746                           ;MotorDrive.c: 1207:         reqAfterDetectLoadFuncBit &= (UB) (~0x01);
  4747  0C7C  30FE               	movlw	254
  4748  0C7D  0020               	movlb	0	; select bank0
  4749  0C7E  00CE               	movwf	??_WatchMotorDriveFinish
  4750  0C7F  084E               	movf	??_WatchMotorDriveFinish,w
  4751  0C80  0021               	movlb	1	; select bank1
  4752  0C81  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4753                           
  4754                           ;MotorDrive.c: 1209:         if (cbAfterDetectLoadFunc[ 0 ]) {
  4755  0C82  0820               	movf	_cbAfterDetectLoadFunc^(0+128),w
  4756  0C83  0421               	iorwf	(_cbAfterDetectLoadFunc+1)^(0+128),w
  4757  0C84  1903               	btfsc	3,2
  4758  0C85  2C98               	goto	l6520
  4759                           
  4760                           ;MotorDrive.c: 1210:             func = cbAfterDetectLoadFunc[ 0 ];
  4761  0C86  0821               	movf	(_cbAfterDetectLoadFunc+1)^(0+128),w
  4762  0C87  0022               	movlb	2	; select bank2
  4763  0C88  00EB               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4764  0C89  0021               	movlb	1	; select bank1
  4765  0C8A  0820               	movf	_cbAfterDetectLoadFunc^(0+128),w
  4766  0C8B  0022               	movlb	2	; select bank2
  4767  0C8C  00EA               	movwf	WatchMotorDriveFinish@func^(0+256)
  4768                           
  4769                           ;MotorDrive.c: 1211:             cbAfterDetectLoadFunc[ 0 ] = ((void*)0);
  4770  0C8D  0021               	movlb	1	; select bank1
  4771  0C8E  01A0               	clrf	_cbAfterDetectLoadFunc^(0+128)
  4772  0C8F  01A1               	clrf	(_cbAfterDetectLoadFunc+1)^(0+128)
  4773                           
  4774                           ;MotorDrive.c: 1212:             func(0);
  4775  0C90  0020               	movlb	0	; select bank0
  4776  0C91  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4777  0C92  0022               	movlb	2	; select bank2
  4778  0C93  086B               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4779  0C94  008A               	movwf	10
  4780  0C95  086A               	movf	WatchMotorDriveFinish@func^(0+256),w
  4781  0C96  000A               	callw
  4782  0C97  318C               	pagesel	$
  4783  0C98                     l6520:
  4784                           
  4785                           ;MotorDrive.c: 1216:     if (reqAfterDetectLoadFuncBit & 0x02) {
  4786  0C98  0021               	movlb	1	; select bank1
  4787  0C99  1CD0               	btfss	_reqAfterDetectLoadFuncBit^(0+128),1
  4788  0C9A  2CB8               	goto	l6530
  4789                           
  4790                           ;MotorDrive.c: 1218:         reqAfterDetectLoadFuncBit &= (UB) (~0x02);
  4791  0C9B  30FD               	movlw	253
  4792  0C9C  0020               	movlb	0	; select bank0
  4793  0C9D  00CE               	movwf	??_WatchMotorDriveFinish
  4794  0C9E  084E               	movf	??_WatchMotorDriveFinish,w
  4795  0C9F  0021               	movlb	1	; select bank1
  4796  0CA0  05D0               	andwf	_reqAfterDetectLoadFuncBit^(0+128),f
  4797                           
  4798                           ;MotorDrive.c: 1220:         if (cbAfterDetectLoadFunc[ 1 ]) {
  4799  0CA1  0822               	movf	(low ((_cbAfterDetectLoadFunc| 0+2)))^(0+128),w
  4800  0CA2  0423               	iorwf	((low ((_cbAfterDetectLoadFunc| 0+2))+1))^(0+128),w
  4801  0CA3  1903               	btfsc	3,2
  4802  0CA4  2CB8               	goto	l6530
  4803                           
  4804                           ;MotorDrive.c: 1221:             func = cbAfterDetectLoadFunc[ 1 ];
  4805  0CA5  0823               	movf	((low ((_cbAfterDetectLoadFunc| 0+2))+1))^(0+128),w
  4806  0CA6  0022               	movlb	2	; select bank2
  4807  0CA7  00EB               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4808  0CA8  0021               	movlb	1	; select bank1
  4809  0CA9  0822               	movf	(low ((_cbAfterDetectLoadFunc| 0+2)))^(0+128),w
  4810  0CAA  0022               	movlb	2	; select bank2
  4811  0CAB  00EA               	movwf	WatchMotorDriveFinish@func^(0+256)
  4812                           
  4813                           ;MotorDrive.c: 1222:             cbAfterDetectLoadFunc[ 1 ] = ((void*)0);
  4814  0CAC  0021               	movlb	1	; select bank1
  4815  0CAD  01A2               	clrf	(low ((_cbAfterDetectLoadFunc| 0+2)))^(0+128)
  4816  0CAE  01A3               	clrf	((low ((_cbAfterDetectLoadFunc| 0+2))+1))^(0+128)
  4817                           
  4818                           ;MotorDrive.c: 1223:             func(1);
  4819  0CAF  0020               	movlb	0	; select bank0
  4820  0CB0  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4821  0CB1  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4822  0CB2  0022               	movlb	2	; select bank2
  4823  0CB3  086B               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4824  0CB4  008A               	movwf	10
  4825  0CB5  086A               	movf	WatchMotorDriveFinish@func^(0+256),w
  4826  0CB6  000A               	callw
  4827  0CB7  318C               	pagesel	$
  4828  0CB8                     l6530:
  4829                           
  4830                           ;MotorDrive.c: 1227:     if (reqAfterMotorStopFuncBit & 0x01) {
  4831  0CB8  0021               	movlb	1	; select bank1
  4832  0CB9  1C59               	btfss	_reqAfterMotorStopFuncBit^(0+128),0
  4833  0CBA  2CD7               	goto	l6540
  4834                           
  4835                           ;MotorDrive.c: 1229:         reqAfterMotorStopFuncBit &= (UB) (~0x01);
  4836  0CBB  30FE               	movlw	254
  4837  0CBC  0020               	movlb	0	; select bank0
  4838  0CBD  00CE               	movwf	??_WatchMotorDriveFinish
  4839  0CBE  084E               	movf	??_WatchMotorDriveFinish,w
  4840  0CBF  0021               	movlb	1	; select bank1
  4841  0CC0  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4842                           
  4843                           ;MotorDrive.c: 1231:         if (cbAfterMotorStopFunc[ 0 ]) {
  4844  0CC1  0830               	movf	_cbAfterMotorStopFunc^(0+128),w
  4845  0CC2  0431               	iorwf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4846  0CC3  1903               	btfsc	3,2
  4847  0CC4  2CD7               	goto	l6540
  4848                           
  4849                           ;MotorDrive.c: 1232:             func = cbAfterMotorStopFunc[ 0 ];
  4850  0CC5  0831               	movf	(_cbAfterMotorStopFunc+1)^(0+128),w
  4851  0CC6  0022               	movlb	2	; select bank2
  4852  0CC7  00EB               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4853  0CC8  0021               	movlb	1	; select bank1
  4854  0CC9  0830               	movf	_cbAfterMotorStopFunc^(0+128),w
  4855  0CCA  0022               	movlb	2	; select bank2
  4856  0CCB  00EA               	movwf	WatchMotorDriveFinish@func^(0+256)
  4857                           
  4858                           ;MotorDrive.c: 1233:             cbAfterMotorStopFunc[ 0 ] = ((void*)0);
  4859  0CCC  0021               	movlb	1	; select bank1
  4860  0CCD  01B0               	clrf	_cbAfterMotorStopFunc^(0+128)
  4861  0CCE  01B1               	clrf	(_cbAfterMotorStopFunc+1)^(0+128)
  4862                           
  4863                           ;MotorDrive.c: 1234:             func(0);
  4864  0CCF  0020               	movlb	0	; select bank0
  4865  0CD0  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4866  0CD1  0022               	movlb	2	; select bank2
  4867  0CD2  086B               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4868  0CD3  008A               	movwf	10
  4869  0CD4  086A               	movf	WatchMotorDriveFinish@func^(0+256),w
  4870  0CD5  000A               	callw
  4871  0CD6  318C               	pagesel	$
  4872  0CD7                     l6540:
  4873                           
  4874                           ;MotorDrive.c: 1238:     if (reqAfterMotorStopFuncBit & 0x02) {
  4875  0CD7  0021               	movlb	1	; select bank1
  4876  0CD8  1CD9               	btfss	_reqAfterMotorStopFuncBit^(0+128),1
  4877  0CD9  0008               	return
  4878                           
  4879                           ;MotorDrive.c: 1240:         reqAfterMotorStopFuncBit &= (UB) (~0x02);
  4880  0CDA  30FD               	movlw	253
  4881  0CDB  0020               	movlb	0	; select bank0
  4882  0CDC  00CE               	movwf	??_WatchMotorDriveFinish
  4883  0CDD  084E               	movf	??_WatchMotorDriveFinish,w
  4884  0CDE  0021               	movlb	1	; select bank1
  4885  0CDF  05D9               	andwf	_reqAfterMotorStopFuncBit^(0+128),f
  4886                           
  4887                           ;MotorDrive.c: 1242:         if (cbAfterMotorStopFunc[ 1 ]) {
  4888  0CE0  0832               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4889  0CE1  0433               	iorwf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4890  0CE2  1903               	btfsc	3,2
  4891  0CE3  0008               	return
  4892                           
  4893                           ;MotorDrive.c: 1243:             func = cbAfterMotorStopFunc[ 1 ];
  4894  0CE4  0833               	movf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128),w
  4895  0CE5  0022               	movlb	2	; select bank2
  4896  0CE6  00EB               	movwf	(WatchMotorDriveFinish@func+1)^(0+256)
  4897  0CE7  0021               	movlb	1	; select bank1
  4898  0CE8  0832               	movf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128),w
  4899  0CE9  0022               	movlb	2	; select bank2
  4900  0CEA  00EA               	movwf	WatchMotorDriveFinish@func^(0+256)
  4901                           
  4902                           ;MotorDrive.c: 1244:             cbAfterMotorStopFunc[ 1 ] = ((void*)0);
  4903  0CEB  0021               	movlb	1	; select bank1
  4904  0CEC  01B2               	clrf	(low ((_cbAfterMotorStopFunc| 0+2)))^(0+128)
  4905  0CED  01B3               	clrf	((low ((_cbAfterMotorStopFunc| 0+2))+1))^(0+128)
  4906                           
  4907                           ;MotorDrive.c: 1245:             func(1);
  4908  0CEE  0020               	movlb	0	; select bank0
  4909  0CEF  01BD               	clrf	SetFwdPulseWithCorrectProc@motor_no
  4910  0CF0  0ABD               	incf	SetFwdPulseWithCorrectProc@motor_no,f
  4911  0CF1  0022               	movlb	2	; select bank2
  4912  0CF2  086B               	movf	(WatchMotorDriveFinish@func+1)^(0+256),w
  4913  0CF3  008A               	movwf	10
  4914  0CF4  086A               	movf	WatchMotorDriveFinish@func^(0+256),w
  4915  0CF5  000A               	callw
  4916  0CF6  318C               	pagesel	$
  4917  0CF7  0008               	return
  4918  0CF8                     __end_of_WatchMotorDriveFinish:
  4919                           
  4920                           	psect	text15
  4921  0910                     __ptext15:	
  4922 ;; *************** function _SetFwdPulseWithCorrectProc *****************
  4923 ;; Defined at:
  4924 ;;		line 374 in file "spi_control.c"
  4925 ;; Parameters:    Size  Location     Type
  4926 ;;  motor_no        1   29[BANK0 ] unsigned char 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;  motor_bit       1   32[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  1    wreg      void 
  4931 ;; Registers used:
  4932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 1D/2
  4935 ;;		On exit  : 1F/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4938 ;;      Params:         0       1       0       0       0       0       0       0
  4939 ;;      Locals:         0       1       0       0       0       0       0       0
  4940 ;;      Temps:          0       2       0       0       0       0       0       0
  4941 ;;      Totals:         0       4       0       0       0       0       0       0
  4942 ;;Total ram usage:        4 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    8
  4945 ;; This function calls:
  4946 ;;		_CalcMotorStepCounter
  4947 ;;		_SetAfterDetectLoadFunc
  4948 ;;		_SetDriveType
  4949 ;;		_SetMotorFrequency
  4950 ;;		_SetMotorStart
  4951 ;;		_UpdateTargetPosition
  4952 ;; This function is called by:
  4953 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  4954 ;;		_WatchMotorDriveFinish
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           
  4959                           ;psect for function _SetFwdPulseWithCorrectProc
  4960  0910                     _SetFwdPulseWithCorrectProc:
  4961                           
  4962                           ;spi_control.c: 374: void SetFwdPulseWithCorrectProc( UB motor_no );spi_control.c: 375: 
      +                          {;spi_control.c: 376:     UB motor_bit = ( UB )( 0x01 << motor_no );
  4963                           
  4964                           ;incstack = 0
  4965                           ; Regs used in _SetFwdPulseWithCorrectProc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4966  0910  3001               	movlw	1
  4967  0911  0020               	movlb	0	; select bank0
  4968  0912  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  4969  0913  0A3D               	incf	SetFwdPulseWithCorrectProc@motor_no,w
  4970  0914  2916               	goto	u4604
  4971  0915                     u4605:
  4972  0915  35BE               	lslf	??_SetFwdPulseWithCorrectProc,f
  4973  0916                     u4604:
  4974  0916  0B89               	decfsz	9,f
  4975  0917  2915               	goto	u4605
  4976  0918  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  4977  0919  00BF               	movwf	??_SetFwdPulseWithCorrectProc+1
  4978  091A  083F               	movf	??_SetFwdPulseWithCorrectProc+1,w
  4979  091B  00C0               	movwf	SetFwdPulseWithCorrectProc@motor_bit
  4980                           
  4981                           ;spi_control.c: 378:     if ( 0 == ( actCorrectDriveBit & motor_bit ) ) {
  4982  091C  0857               	movf	_actCorrectDriveBit,w
  4983  091D  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  4984  091E  1D03               	btfss	3,2
  4985  091F  2932               	goto	l1336
  4986                           
  4987                           ;spi_control.c: 380:      SetDriveType( motor_no, DRIVE_CHECK_POSITION );
  4988  0920  3002               	movlw	2
  4989  0921  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  4990  0922  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  4991  0923  00A0               	movwf	SetDriveType@drive_type
  4992  0924  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  4993  0925  318D  2586  3189   	fcall	_SetDriveType
  4994                           
  4995                           ;spi_control.c: 381:      SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  4996  0928  3002               	movlw	2
  4997  0929  0020               	movlb	0	; select bank0
  4998  092A  00BE               	movwf	??_SetFwdPulseWithCorrectProc
  4999  092B  083E               	movf	??_SetFwdPulseWithCorrectProc,w
  5000  092C  00A0               	movwf	SetMotorFrequency@type
  5001  092D  01A1               	clrf	SetMotorFrequency@set_freq
  5002  092E  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5003  092F  3188  20D3  3189   	fcall	_SetMotorFrequency
  5004  0932                     l1336:	
  5005                           ;spi_control.c: 382:     }
  5006                           
  5007                           
  5008                           ;spi_control.c: 384:  UpdateTargetPosition( motor_no, 1 );
  5009  0932  3001               	movlw	1
  5010  0933  00AD               	movwf	UpdateTargetPosition@steps
  5011  0934  3000               	movlw	0
  5012  0935  00AE               	movwf	UpdateTargetPosition@steps+1
  5013  0936  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5014  0937  3197  2746  3189   	fcall	_UpdateTargetPosition
  5015                           
  5016                           ;spi_control.c: 385:  CalcMotorStepCounter( motor_no );
  5017  093A  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5018  093B  3185  25F0  3189   	fcall	_CalcMotorStepCounter
  5019                           
  5020                           ;spi_control.c: 388:  if ( ( reqCorrectBasePosBit | actCorrectDriveBit ) & motor_bit ) {
  5021  093E  0020               	movlb	0	; select bank0
  5022  093F  0858               	movf	_reqCorrectBasePosBit,w
  5023  0940  0457               	iorwf	_actCorrectDriveBit,w
  5024  0941  0540               	andwf	SetFwdPulseWithCorrectProc@motor_bit,w
  5025  0942  1D03               	btfss	3,2
  5026  0943  294C               	goto	l6094
  5027                           
  5028                           ;spi_control.c: 393:   SetAfterDetectLoadFunc( motor_no, VerifyHandPosition_LoadPosition
      +                           );
  5029  0944  30C0               	movlw	low _VerifyHandPosition_LoadPosition
  5030  0945  00A0               	movwf	SetAfterDetectLoadFunc@func
  5031  0946  3006               	movlw	high _VerifyHandPosition_LoadPosition
  5032  0947  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  5033  0948  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5034  0949  3191  2186  3189   	fcall	_SetAfterDetectLoadFunc
  5035  094C                     l6094:
  5036                           
  5037                           ;spi_control.c: 397:     SetMotorStart( motor_no );
  5038  094C  083D               	movf	SetFwdPulseWithCorrectProc@motor_no,w
  5039  094D  3191  2172         	fcall	_SetMotorStart
  5040  094F  0008               	return
  5041  0950                     __end_of_SetFwdPulseWithCorrectProc:
  5042                           
  5043                           	psect	text16
  5044  0833                     __ptext16:	
  5045 ;; *************** function _SpiCmdFunc_Search1008Position *****************
  5046 ;; Defined at:
  5047 ;;		line 495 in file "spi_control.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 1D/2
  5058 ;;		On exit  : 1F/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5061 ;;      Params:         0       1       0       0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0
  5063 ;;      Temps:          0       1       0       0       0       0       0       0
  5064 ;;      Totals:         0       2       0       0       0       0       0       0
  5065 ;;Total ram usage:        2 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    9
  5068 ;; This function calls:
  5069 ;;		_DeactivateHandPosition
  5070 ;;		_SetDriveType
  5071 ;;		_SetMotorDirection
  5072 ;;		_SetMotorFrequency
  5073 ;;		_SetMotorPositionSearchStart
  5074 ;;		_SetMotorStepCounter
  5075 ;; This function is called by:
  5076 ;;		_WatchMotorDriveFinish
  5077 ;;		_SPIControl_ExecuteCommand
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           
  5082                           ;psect for function _SpiCmdFunc_Search1008Position
  5083  0833                     _SpiCmdFunc_Search1008Position:
  5084                           
  5085                           ;spi_control.c: 495: void SpiCmdFunc_Search1008Position( UB motor_no );spi_control.c: 49
      +                          6: {;spi_control.c: 502:  DeactivateHandPosition( motor_no );
  5086                           
  5087                           ;incstack = 0
  5088                           ; Regs used in _SpiCmdFunc_Search1008Position: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5089  0833  0020               	movlb	0	; select bank0
  5090  0834  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5091  0835  3194  243D  3188   	fcall	_DeactivateHandPosition
  5092                           
  5093                           ;spi_control.c: 505:  SetDriveType( motor_no, DRIVE_SEARCH_1008_POSITION );
  5094  0838  3005               	movlw	5
  5095  0839  0020               	movlb	0	; select bank0
  5096  083A  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5097  083B  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5098  083C  00A0               	movwf	SetDriveType@drive_type
  5099  083D  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5100  083E  318D  2586  3188   	fcall	_SetDriveType
  5101                           
  5102                           ;spi_control.c: 507:     SetMotorDirection( motor_no, 1 );
  5103  0841  0020               	movlb	0	; select bank0
  5104  0842  01A0               	clrf	SetMotorDirection@dir
  5105  0843  0AA0               	incf	SetMotorDirection@dir,f
  5106  0844  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5107  0845  3195  25B7  3188   	fcall	_SetMotorDirection
  5108                           
  5109                           ;spi_control.c: 509:     SetMotorStepCounter( motor_no, 0 );
  5110  0848  3000               	movlw	0
  5111  0849  00B0               	movwf	SetMotorStepCounter@steps
  5112  084A  00B1               	movwf	SetMotorStepCounter@steps+1
  5113  084B  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5114  084C  3192  2255  3188   	fcall	_SetMotorStepCounter
  5115                           
  5116                           ;spi_control.c: 511:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5117  084F  0020               	movlb	0	; select bank0
  5118  0850  01A0               	clrf	SetMotorFrequency@type
  5119  0851  0AA0               	incf	SetMotorFrequency@type,f
  5120  0852  3088               	movlw	136
  5121  0853  00BE               	movwf	??_SpiCmdFunc_Search1008Position
  5122  0854  083E               	movf	??_SpiCmdFunc_Search1008Position,w
  5123  0855  00A1               	movwf	SetMotorFrequency@set_freq
  5124  0856  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5125  0857  3188  20D3  3188   	fcall	_SetMotorFrequency
  5126                           
  5127                           ;spi_control.c: 513:     SetMotorPositionSearchStart( motor_no );
  5128  085A  083D               	movf	SpiCmdFunc_Search1008Position@motor_no,w
  5129  085B  3196  26C2         	fcall	_SetMotorPositionSearchStart
  5130  085D  0008               	return
  5131  085E                     __end_of_SpiCmdFunc_Search1008Position:
  5132                           
  5133                           	psect	text17
  5134  1159                     __ptext17:	
  5135 ;; *************** function _SpiCmdFunc_DisableExcitating *****************
  5136 ;; Defined at:
  5137 ;;		line 483 in file "spi_control.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      void 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, pclath, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 1D/2
  5148 ;;		On exit  : 1F/1
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5151 ;;      Params:         0       1       0       0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0
  5154 ;;      Totals:         0       1       0       0       0       0       0       0
  5155 ;;Total ram usage:        1 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    6
  5158 ;; This function calls:
  5159 ;;		_SetMotorDisableExcitating
  5160 ;; This function is called by:
  5161 ;;		_WatchMotorDriveFinish
  5162 ;;		_SPIControl_ExecuteCommand
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _SpiCmdFunc_DisableExcitating
  5168  1159                     _SpiCmdFunc_DisableExcitating:
  5169                           
  5170                           ;spi_control.c: 483: void SpiCmdFunc_DisableExcitating( UB motor_no );spi_control.c: 484
      +                          : {;spi_control.c: 485:  SetMotorDisableExcitating( motor_no );
  5171                           
  5172                           ;incstack = 0
  5173                           ; Regs used in _SpiCmdFunc_DisableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5174  1159  0020               	movlb	0	; select bank0
  5175  115A  083D               	movf	SpiCmdFunc_DisableExcitating@motor_no,w
  5176  115B  3194  2407         	fcall	_SetMotorDisableExcitating
  5177  115D  0008               	return
  5178  115E                     __end_of_SpiCmdFunc_DisableExcitating:
  5179                           
  5180                           	psect	text18
  5181  1154                     __ptext18:	
  5182 ;; *************** function _SpiCmdFunc_EnableExcitating *****************
  5183 ;; Defined at:
  5184 ;;		line 471 in file "spi_control.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;		None
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      void 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0, pclath, cstack
  5193 ;; Tracked objects:
  5194 ;;		On entry : 1D/2
  5195 ;;		On exit  : 1F/1
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5198 ;;      Params:         0       1       0       0       0       0       0       0
  5199 ;;      Locals:         0       0       0       0       0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0       0
  5201 ;;      Totals:         0       1       0       0       0       0       0       0
  5202 ;;Total ram usage:        1 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    6
  5205 ;; This function calls:
  5206 ;;		_SetMotorEnableExcitating
  5207 ;; This function is called by:
  5208 ;;		_WatchMotorDriveFinish
  5209 ;;		_SPIControl_ExecuteCommand
  5210 ;; This function uses a non-reentrant model
  5211 ;;
  5212                           
  5213                           
  5214                           ;psect for function _SpiCmdFunc_EnableExcitating
  5215  1154                     _SpiCmdFunc_EnableExcitating:
  5216                           
  5217                           ;spi_control.c: 471: void SpiCmdFunc_EnableExcitating( UB motor_no );spi_control.c: 472:
      +                           {;spi_control.c: 473:  SetMotorEnableExcitating( motor_no );
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _SpiCmdFunc_EnableExcitating: [wreg+status,2+status,0+pclath+cstack]
  5221  1154  0020               	movlb	0	; select bank0
  5222  1155  083D               	movf	SpiCmdFunc_EnableExcitating@motor_no,w
  5223  1156  3194  2419         	fcall	_SetMotorEnableExcitating
  5224  1158  0008               	return
  5225  1159                     __end_of_SpiCmdFunc_EnableExcitating:
  5226                           
  5227                           	psect	text19
  5228  1149                     __ptext19:	
  5229 ;; *************** function _SpiCmdFunc_StopDetectVrs *****************
  5230 ;; Defined at:
  5231 ;;		line 459 in file "spi_control.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, pclath, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 1D/2
  5242 ;;		On exit  : 1F/2
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5245 ;;      Params:         0       1       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0
  5248 ;;      Totals:         0       1       0       0       0       0       0       0
  5249 ;;Total ram usage:        1 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    8
  5252 ;; This function calls:
  5253 ;;		_SetMotorStopSPK
  5254 ;; This function is called by:
  5255 ;;		_WatchMotorDriveFinish
  5256 ;;		_SPIControl_ExecuteCommand
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _SpiCmdFunc_StopDetectVrs
  5262  1149                     _SpiCmdFunc_StopDetectVrs:
  5263                           
  5264                           ;spi_control.c: 459: void SpiCmdFunc_StopDetectVrs( UB motor_no );spi_control.c: 460: {;
      +                          spi_control.c: 461:  SetMotorStopSPK();
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _SpiCmdFunc_StopDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5268  1149  3195  2540         	fcall	_SetMotorStopSPK
  5269  114B  0008               	return
  5270  114C                     __end_of_SpiCmdFunc_StopDetectVrs:
  5271                           
  5272                           	psect	text20
  5273  1146                     __ptext20:	
  5274 ;; *************** function _SpiCmdFunc_StartDetectVrs *****************
  5275 ;; Defined at:
  5276 ;;		line 447 in file "spi_control.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      void 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 1D/2
  5287 ;;		On exit  : 1F/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5290 ;;      Params:         0       1       0       0       0       0       0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0
  5293 ;;      Totals:         0       1       0       0       0       0       0       0
  5294 ;;Total ram usage:        1 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    8
  5297 ;; This function calls:
  5298 ;;		_SetMotorStartSPK
  5299 ;; This function is called by:
  5300 ;;		_WatchMotorDriveFinish
  5301 ;;		_SPIControl_ExecuteCommand
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _SpiCmdFunc_StartDetectVrs
  5307  1146                     _SpiCmdFunc_StartDetectVrs:
  5308                           
  5309                           ;spi_control.c: 447: void SpiCmdFunc_StartDetectVrs( UB motor_no );spi_control.c: 448: {
      +                          ;spi_control.c: 449:  SetMotorStartSPK();
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in _SpiCmdFunc_StartDetectVrs: [wreg+status,2+status,0+pclath+cstack]
  5313  1146  3197  27B0         	fcall	_SetMotorStartSPK
  5314  1148  0008               	return
  5315  1149                     __end_of_SpiCmdFunc_StartDetectVrs:
  5316                           
  5317                           	psect	text21
  5318  1703                     __ptext21:	
  5319 ;; *************** function _SpiCmdFunc_RevPulsePositionCtl *****************
  5320 ;; Defined at:
  5321 ;;		line 427 in file "spi_control.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;		None
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 1D/2
  5332 ;;		On exit  : 1F/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5335 ;;      Params:         0       1       0       0       0       0       0       0
  5336 ;;      Locals:         0       0       0       0       0       0       0       0
  5337 ;;      Temps:          0       1       0       0       0       0       0       0
  5338 ;;      Totals:         0       2       0       0       0       0       0       0
  5339 ;;Total ram usage:        2 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    8
  5342 ;; This function calls:
  5343 ;;		_CalcMotorStepCounter
  5344 ;;		_SetDriveType
  5345 ;;		_SetMotorFrequency
  5346 ;;		_SetMotorStart
  5347 ;;		_UpdateTargetPosition
  5348 ;; This function is called by:
  5349 ;;		_WatchMotorDriveFinish
  5350 ;;		_SPIControl_ExecuteCommand
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _SpiCmdFunc_RevPulsePositionCtl
  5356  1703                     _SpiCmdFunc_RevPulsePositionCtl:
  5357                           
  5358                           ;spi_control.c: 427: void SpiCmdFunc_RevPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          28: {;spi_control.c: 429:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in _SpiCmdFunc_RevPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5362  1703  0020               	movlb	0	; select bank0
  5363  1704  01A0               	clrf	SetDriveType@drive_type
  5364  1705  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5365  1706  318D  2586  3197   	fcall	_SetDriveType
  5366                           
  5367                           ;spi_control.c: 431:  UpdateTargetPosition( motor_no, -1 );
  5368  1709  30FF               	movlw	255
  5369  170A  0020               	movlb	0	; select bank0
  5370  170B  00AD               	movwf	UpdateTargetPosition@steps
  5371  170C  30FF               	movlw	255
  5372  170D  00AE               	movwf	UpdateTargetPosition@steps+1
  5373  170E  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5374  170F  3197  2746  3197   	fcall	_UpdateTargetPosition
  5375                           
  5376                           ;spi_control.c: 432:  CalcMotorStepCounter( motor_no );
  5377  1712  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5378  1713  3185  25F0  3197   	fcall	_CalcMotorStepCounter
  5379                           
  5380                           ;spi_control.c: 435:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5381  1716  3002               	movlw	2
  5382  1717  0020               	movlb	0	; select bank0
  5383  1718  00BE               	movwf	??_SpiCmdFunc_RevPulsePositionCtl
  5384  1719  083E               	movf	??_SpiCmdFunc_RevPulsePositionCtl,w
  5385  171A  00A0               	movwf	SetMotorFrequency@type
  5386  171B  01A1               	clrf	SetMotorFrequency@set_freq
  5387  171C  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5388  171D  3188  20D3  3197   	fcall	_SetMotorFrequency
  5389                           
  5390                           ;spi_control.c: 437:     SetMotorStart( motor_no );
  5391  1720  083D               	movf	SpiCmdFunc_RevPulsePositionCtl@motor_no,w
  5392  1721  3191  2172         	fcall	_SetMotorStart
  5393  1723  0008               	return
  5394  1724                     __end_of_SpiCmdFunc_RevPulsePositionCtl:
  5395                           
  5396                           	psect	text22
  5397  16E2                     __ptext22:	
  5398 ;; *************** function _SpiCmdFunc_FwdPulsePositionCtl *****************
  5399 ;; Defined at:
  5400 ;;		line 407 in file "spi_control.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5403 ;; Auto vars:     Size  Location     Type
  5404 ;;		None
  5405 ;; Return value:  Size  Location     Type
  5406 ;;                  1    wreg      void 
  5407 ;; Registers used:
  5408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5409 ;; Tracked objects:
  5410 ;;		On entry : 1D/2
  5411 ;;		On exit  : 1F/0
  5412 ;;		Unchanged: 0/0
  5413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5414 ;;      Params:         0       1       0       0       0       0       0       0
  5415 ;;      Locals:         0       0       0       0       0       0       0       0
  5416 ;;      Temps:          0       1       0       0       0       0       0       0
  5417 ;;      Totals:         0       2       0       0       0       0       0       0
  5418 ;;Total ram usage:        2 bytes
  5419 ;; Hardware stack levels used:    1
  5420 ;; Hardware stack levels required when called:    8
  5421 ;; This function calls:
  5422 ;;		_CalcMotorStepCounter
  5423 ;;		_SetDriveType
  5424 ;;		_SetMotorFrequency
  5425 ;;		_SetMotorStart
  5426 ;;		_UpdateTargetPosition
  5427 ;; This function is called by:
  5428 ;;		_WatchMotorDriveFinish
  5429 ;;		_SPIControl_ExecuteCommand
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _SpiCmdFunc_FwdPulsePositionCtl
  5435  16E2                     _SpiCmdFunc_FwdPulsePositionCtl:
  5436                           
  5437                           ;spi_control.c: 407: void SpiCmdFunc_FwdPulsePositionCtl( UB motor_no );spi_control.c: 4
      +                          08: {;spi_control.c: 409:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5438                           
  5439                           ;incstack = 0
  5440                           ; Regs used in _SpiCmdFunc_FwdPulsePositionCtl: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5441  16E2  0020               	movlb	0	; select bank0
  5442  16E3  01A0               	clrf	SetDriveType@drive_type
  5443  16E4  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5444  16E5  318D  2586  3196   	fcall	_SetDriveType
  5445                           
  5446                           ;spi_control.c: 411:  UpdateTargetPosition( motor_no, 1 );
  5447  16E8  3001               	movlw	1
  5448  16E9  0020               	movlb	0	; select bank0
  5449  16EA  00AD               	movwf	UpdateTargetPosition@steps
  5450  16EB  3000               	movlw	0
  5451  16EC  00AE               	movwf	UpdateTargetPosition@steps+1
  5452  16ED  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5453  16EE  3197  2746  3196   	fcall	_UpdateTargetPosition
  5454                           
  5455                           ;spi_control.c: 412:  CalcMotorStepCounter( motor_no );
  5456  16F1  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5457  16F2  3185  25F0  3196   	fcall	_CalcMotorStepCounter
  5458                           
  5459                           ;spi_control.c: 415:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5460  16F5  3002               	movlw	2
  5461  16F6  0020               	movlb	0	; select bank0
  5462  16F7  00BE               	movwf	??_SpiCmdFunc_FwdPulsePositionCtl
  5463  16F8  083E               	movf	??_SpiCmdFunc_FwdPulsePositionCtl,w
  5464  16F9  00A0               	movwf	SetMotorFrequency@type
  5465  16FA  01A1               	clrf	SetMotorFrequency@set_freq
  5466  16FB  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5467  16FC  3188  20D3  3196   	fcall	_SetMotorFrequency
  5468                           
  5469                           ;spi_control.c: 417:     SetMotorStart( motor_no );
  5470  16FF  083D               	movf	SpiCmdFunc_FwdPulsePositionCtl@motor_no,w
  5471  1700  3191  2172         	fcall	_SetMotorStart
  5472  1702  0008               	return
  5473  1703                     __end_of_SpiCmdFunc_FwdPulsePositionCtl:
  5474                           
  5475                           	psect	text23
  5476  1689                     __ptext23:	
  5477 ;; *************** function _SpiCmdFunc_FwdPulseWithCorrect *****************
  5478 ;; Defined at:
  5479 ;;		line 348 in file "spi_control.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5482 ;; Auto vars:     Size  Location     Type
  5483 ;;  motor_bit       1    0        unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  1    wreg      void 
  5486 ;; Registers used:
  5487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 1D/2
  5490 ;;		On exit  : 1F/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5493 ;;      Params:         0       1       0       0       0       0       0       0
  5494 ;;      Locals:         0       1       0       0       0       0       0       0
  5495 ;;      Temps:          0       1       0       0       0       0       0       0
  5496 ;;      Totals:         0       3       0       0       0       0       0       0
  5497 ;;Total ram usage:        3 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    9
  5500 ;; This function calls:
  5501 ;;		_GetIsMotorActive
  5502 ;;		_SetAfterMotorStopFunc
  5503 ;;		_SetFwdPulseWithCorrectProc
  5504 ;;		_SetMotorStop
  5505 ;; This function is called by:
  5506 ;;		_WatchMotorDriveFinish
  5507 ;;		_SPIControl_ExecuteCommand
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _SpiCmdFunc_FwdPulseWithCorrect
  5513  1689                     _SpiCmdFunc_FwdPulseWithCorrect:
  5514                           
  5515                           ;spi_control.c: 354:  if ( GetIsMotorActive( motor_no ) ) {
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in _SpiCmdFunc_FwdPulseWithCorrect: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5519  1689  0020               	movlb	0	; select bank0
  5520  168A  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5521  168B  3194  24E8  3196   	fcall	_GetIsMotorActive
  5522  168E  3A00               	xorlw	0
  5523  168F  1903               	skipnz
  5524  1690  2E9E               	goto	l6408
  5525                           
  5526                           ;spi_control.c: 356:   SetMotorStop( motor_no );
  5527  1691  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5528  1692  3194  242B  3196   	fcall	_SetMotorStop
  5529                           
  5530                           ;spi_control.c: 357:   SetAfterMotorStopFunc( motor_no, SetFwdPulseWithCorrectProc );
  5531  1695  3010               	movlw	low _SetFwdPulseWithCorrectProc
  5532  1696  0020               	movlb	0	; select bank0
  5533  1697  00A0               	movwf	SetAfterMotorStopFunc@func
  5534  1698  3009               	movlw	high _SetFwdPulseWithCorrectProc
  5535  1699  00A1               	movwf	SetAfterMotorStopFunc@func+1
  5536  169A  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5537  169B  3191  217C         	fcall	_SetAfterMotorStopFunc
  5538                           
  5539                           ;spi_control.c: 358:  } else {
  5540  169D  0008               	return
  5541  169E                     l6408:
  5542                           
  5543                           ;spi_control.c: 360:   SetFwdPulseWithCorrectProc( motor_no );
  5544  169E  083D               	movf	SpiCmdFunc_FwdPulseWithCorrect@motor_no,w
  5545  169F  00BE               	movwf	??_SpiCmdFunc_FwdPulseWithCorrect
  5546  16A0  083E               	movf	??_SpiCmdFunc_FwdPulseWithCorrect,w
  5547  16A1  00BD               	movwf	SetFwdPulseWithCorrectProc@motor_no
  5548  16A2  3189  2110         	fcall	_SetFwdPulseWithCorrectProc
  5549  16A4  0008               	return
  5550  16A5                     __end_of_SpiCmdFunc_FwdPulseWithCorrect:
  5551                           
  5552                           	psect	text24
  5553  17D7                     __ptext24:	
  5554 ;; *************** function _SpiCmdFunc_SearchBasePosition *****************
  5555 ;; Defined at:
  5556 ;;		line 317 in file "spi_control.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;		None
  5561 ;; Return value:  Size  Location     Type
  5562 ;;                  1    wreg      void 
  5563 ;; Registers used:
  5564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5565 ;; Tracked objects:
  5566 ;;		On entry : 1D/2
  5567 ;;		On exit  : 1F/0
  5568 ;;		Unchanged: 0/0
  5569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5570 ;;      Params:         0       1       0       0       0       0       0       0
  5571 ;;      Locals:         0       0       0       0       0       0       0       0
  5572 ;;      Temps:          0       1       0       0       0       0       0       0
  5573 ;;      Totals:         0       2       0       0       0       0       0       0
  5574 ;;Total ram usage:        2 bytes
  5575 ;; Hardware stack levels used:    1
  5576 ;; Hardware stack levels required when called:    9
  5577 ;; This function calls:
  5578 ;;		_DeactivateHandPosition
  5579 ;;		_SetDriveType
  5580 ;;		_SetMotorDirection
  5581 ;;		_SetMotorFrequency
  5582 ;;		_SetMotorPositionSearchStart
  5583 ;;		_SetMotorStepCounter
  5584 ;; This function is called by:
  5585 ;;		_WatchMotorDriveFinish
  5586 ;;		_SPIControl_ExecuteCommand
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           
  5591                           ;psect for function _SpiCmdFunc_SearchBasePosition
  5592  17D7                     _SpiCmdFunc_SearchBasePosition:
  5593                           
  5594                           ;spi_control.c: 317: void SpiCmdFunc_SearchBasePosition( UB motor_no );spi_control.c: 31
      +                          8: {;spi_control.c: 324:  DeactivateHandPosition( motor_no );
  5595                           
  5596                           ;incstack = 0
  5597                           ; Regs used in _SpiCmdFunc_SearchBasePosition: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5598  17D7  0020               	movlb	0	; select bank0
  5599  17D8  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5600  17D9  3194  243D  3197   	fcall	_DeactivateHandPosition
  5601                           
  5602                           ;spi_control.c: 327:  SetDriveType( motor_no, DRIVE_SEARCH_BASE_POSITION );
  5603  17DC  0020               	movlb	0	; select bank0
  5604  17DD  01A0               	clrf	SetDriveType@drive_type
  5605  17DE  0AA0               	incf	SetDriveType@drive_type,f
  5606  17DF  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5607  17E0  318D  2586  3197   	fcall	_SetDriveType
  5608                           
  5609                           ;spi_control.c: 329:     SetMotorDirection( motor_no, 1 );
  5610  17E3  0020               	movlb	0	; select bank0
  5611  17E4  01A0               	clrf	SetMotorDirection@dir
  5612  17E5  0AA0               	incf	SetMotorDirection@dir,f
  5613  17E6  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5614  17E7  3195  25B7  3197   	fcall	_SetMotorDirection
  5615                           
  5616                           ;spi_control.c: 331:     SetMotorStepCounter( motor_no, 0 );
  5617  17EA  3000               	movlw	0
  5618  17EB  00B0               	movwf	SetMotorStepCounter@steps
  5619  17EC  00B1               	movwf	SetMotorStepCounter@steps+1
  5620  17ED  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5621  17EE  3192  2255  3197   	fcall	_SetMotorStepCounter
  5622                           
  5623                           ;spi_control.c: 333:     SetMotorFrequency( motor_no, FREQ_SET_SELF_CONTROL_SHAKE, 136 )
      +                          ;
  5624  17F1  0020               	movlb	0	; select bank0
  5625  17F2  01A0               	clrf	SetMotorFrequency@type
  5626  17F3  0AA0               	incf	SetMotorFrequency@type,f
  5627  17F4  3088               	movlw	136
  5628  17F5  00BE               	movwf	??_SpiCmdFunc_SearchBasePosition
  5629  17F6  083E               	movf	??_SpiCmdFunc_SearchBasePosition,w
  5630  17F7  00A1               	movwf	SetMotorFrequency@set_freq
  5631  17F8  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5632  17F9  3188  20D3  3197   	fcall	_SetMotorFrequency
  5633                           
  5634                           ;spi_control.c: 335:     SetMotorPositionSearchStart( motor_no );
  5635  17FC  083D               	movf	SpiCmdFunc_SearchBasePosition@motor_no,w
  5636  17FD  3196  26C2         	fcall	_SetMotorPositionSearchStart
  5637  17FF  0008               	return
  5638  1800                     __end_of_SpiCmdFunc_SearchBasePosition:
  5639                           
  5640                           	psect	text25
  5641  0800                     __ptext25:	
  5642 ;; *************** function _SpiCmdFunc_SearchLoadPosition *****************
  5643 ;; Defined at:
  5644 ;;		line 305 in file "spi_control.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;		None
  5649 ;; Return value:  Size  Location     Type
  5650 ;;                  1    wreg      void 
  5651 ;; Registers used:
  5652 ;;		None
  5653 ;; Tracked objects:
  5654 ;;		On entry : 1D/2
  5655 ;;		On exit  : 1D/0
  5656 ;;		Unchanged: 1D/0
  5657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5658 ;;      Params:         0       1       0       0       0       0       0       0
  5659 ;;      Locals:         0       0       0       0       0       0       0       0
  5660 ;;      Temps:          0       0       0       0       0       0       0       0
  5661 ;;      Totals:         0       1       0       0       0       0       0       0
  5662 ;;Total ram usage:        1 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    5
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_WatchMotorDriveFinish
  5669 ;;		_SPIControl_ExecuteCommand
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           
  5674                           ;psect for function _SpiCmdFunc_SearchLoadPosition
  5675  0800                     _SpiCmdFunc_SearchLoadPosition:
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in _SpiCmdFunc_SearchLoadPosition: []
  5679  0800  0008               	return
  5680  0801                     __end_of_SpiCmdFunc_SearchLoadPosition:
  5681                           
  5682                           	psect	text26
  5683  113A                     __ptext26:	
  5684 ;; *************** function _SpiCmdFunc_FwdPulseWithShake *****************
  5685 ;; Defined at:
  5686 ;;		line 293 in file "spi_control.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		None
  5695 ;; Tracked objects:
  5696 ;;		On entry : 1D/2
  5697 ;;		On exit  : 1D/0
  5698 ;;		Unchanged: 1D/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5700 ;;      Params:         0       1       0       0       0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0
  5703 ;;      Totals:         0       1       0       0       0       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    5
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_WatchMotorDriveFinish
  5711 ;;		_SPIControl_ExecuteCommand
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _SpiCmdFunc_FwdPulseWithShake
  5717  113A                     _SpiCmdFunc_FwdPulseWithShake:
  5718                           
  5719                           ;incstack = 0
  5720                           ; Regs used in _SpiCmdFunc_FwdPulseWithShake: []
  5721  113A  0008               	return
  5722  113B                     __end_of_SpiCmdFunc_FwdPulseWithShake:
  5723                           
  5724                           	psect	text27
  5725  1724                     __ptext27:	
  5726 ;; *************** function _SpiCmdFunc_RevPulseNormal *****************
  5727 ;; Defined at:
  5728 ;;		line 273 in file "spi_control.c"
  5729 ;; Parameters:    Size  Location     Type
  5730 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;		None
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      void 
  5735 ;; Registers used:
  5736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 1D/2
  5739 ;;		On exit  : 1F/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5742 ;;      Params:         0       1       0       0       0       0       0       0
  5743 ;;      Locals:         0       0       0       0       0       0       0       0
  5744 ;;      Temps:          0       1       0       0       0       0       0       0
  5745 ;;      Totals:         0       2       0       0       0       0       0       0
  5746 ;;Total ram usage:        2 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    8
  5749 ;; This function calls:
  5750 ;;		_SetDriveType
  5751 ;;		_SetMotorDirection
  5752 ;;		_SetMotorFrequency
  5753 ;;		_SetMotorStart
  5754 ;;		_SetMotorStepCounter
  5755 ;; This function is called by:
  5756 ;;		_WatchMotorDriveFinish
  5757 ;;		_SPIControl_ExecuteCommand
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _SpiCmdFunc_RevPulseNormal
  5763  1724                     _SpiCmdFunc_RevPulseNormal:
  5764                           
  5765                           ;spi_control.c: 273: void SpiCmdFunc_RevPulseNormal( UB motor_no );spi_control.c: 274: {
      +                          ;spi_control.c: 275:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _SpiCmdFunc_RevPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5769  1724  0020               	movlb	0	; select bank0
  5770  1725  01A0               	clrf	SetDriveType@drive_type
  5771  1726  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5772  1727  318D  2586  3197   	fcall	_SetDriveType
  5773                           
  5774                           ;spi_control.c: 277:     SetMotorDirection( motor_no, 0 );
  5775  172A  0020               	movlb	0	; select bank0
  5776  172B  01A0               	clrf	SetMotorDirection@dir
  5777  172C  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5778  172D  3195  25B7  3197   	fcall	_SetMotorDirection
  5779                           
  5780                           ;spi_control.c: 279:     SetMotorStepCounter( motor_no, 1 );
  5781  1730  3001               	movlw	1
  5782  1731  00B0               	movwf	SetMotorStepCounter@steps
  5783  1732  3000               	movlw	0
  5784  1733  00B1               	movwf	SetMotorStepCounter@steps+1
  5785  1734  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5786  1735  3192  2255  3197   	fcall	_SetMotorStepCounter
  5787                           
  5788                           ;spi_control.c: 281:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5789  1738  3002               	movlw	2
  5790  1739  0020               	movlb	0	; select bank0
  5791  173A  00BE               	movwf	??_SpiCmdFunc_RevPulseNormal
  5792  173B  083E               	movf	??_SpiCmdFunc_RevPulseNormal,w
  5793  173C  00A0               	movwf	SetMotorFrequency@type
  5794  173D  01A1               	clrf	SetMotorFrequency@set_freq
  5795  173E  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5796  173F  3188  20D3  3197   	fcall	_SetMotorFrequency
  5797                           
  5798                           ;spi_control.c: 283:     SetMotorStart( motor_no );
  5799  1742  083D               	movf	SpiCmdFunc_RevPulseNormal@motor_no,w
  5800  1743  3191  2172         	fcall	_SetMotorStart
  5801  1745  0008               	return
  5802  1746                     __end_of_SpiCmdFunc_RevPulseNormal:
  5803                           
  5804                           	psect	text28
  5805  1769                     __ptext28:	
  5806 ;; *************** function _SpiCmdFunc_FwdPulseNormal *****************
  5807 ;; Defined at:
  5808 ;;		line 253 in file "spi_control.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;		None
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 1D/2
  5819 ;;		On exit  : 1F/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5822 ;;      Params:         0       1       0       0       0       0       0       0
  5823 ;;      Locals:         0       0       0       0       0       0       0       0
  5824 ;;      Temps:          0       1       0       0       0       0       0       0
  5825 ;;      Totals:         0       2       0       0       0       0       0       0
  5826 ;;Total ram usage:        2 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    8
  5829 ;; This function calls:
  5830 ;;		_SetDriveType
  5831 ;;		_SetMotorDirection
  5832 ;;		_SetMotorFrequency
  5833 ;;		_SetMotorStart
  5834 ;;		_SetMotorStepCounter
  5835 ;; This function is called by:
  5836 ;;		_WatchMotorDriveFinish
  5837 ;;		_SPIControl_ExecuteCommand
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _SpiCmdFunc_FwdPulseNormal
  5843  1769                     _SpiCmdFunc_FwdPulseNormal:
  5844                           
  5845                           ;spi_control.c: 253: void SpiCmdFunc_FwdPulseNormal( UB motor_no );spi_control.c: 254: {
      +                          ;spi_control.c: 255:  SetDriveType( motor_no, DRIVE_SIMPLE );
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in _SpiCmdFunc_FwdPulseNormal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5849  1769  0020               	movlb	0	; select bank0
  5850  176A  01A0               	clrf	SetDriveType@drive_type
  5851  176B  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5852  176C  318D  2586  3197   	fcall	_SetDriveType
  5853                           
  5854                           ;spi_control.c: 257:     SetMotorDirection( motor_no, 1 );
  5855  176F  0020               	movlb	0	; select bank0
  5856  1770  01A0               	clrf	SetMotorDirection@dir
  5857  1771  0AA0               	incf	SetMotorDirection@dir,f
  5858  1772  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5859  1773  3195  25B7  3197   	fcall	_SetMotorDirection
  5860                           
  5861                           ;spi_control.c: 259:     SetMotorStepCounter( motor_no, 1 );
  5862  1776  3001               	movlw	1
  5863  1777  00B0               	movwf	SetMotorStepCounter@steps
  5864  1778  3000               	movlw	0
  5865  1779  00B1               	movwf	SetMotorStepCounter@steps+1
  5866  177A  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5867  177B  3192  2255  3197   	fcall	_SetMotorStepCounter
  5868                           
  5869                           ;spi_control.c: 261:     SetMotorFrequency( motor_no, FREQ_SET_EXTERNAL_CONTROL, 0 );
  5870  177E  3002               	movlw	2
  5871  177F  0020               	movlb	0	; select bank0
  5872  1780  00BE               	movwf	??_SpiCmdFunc_FwdPulseNormal
  5873  1781  083E               	movf	??_SpiCmdFunc_FwdPulseNormal,w
  5874  1782  00A0               	movwf	SetMotorFrequency@type
  5875  1783  01A1               	clrf	SetMotorFrequency@set_freq
  5876  1784  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5877  1785  3188  20D3  3197   	fcall	_SetMotorFrequency
  5878                           
  5879                           ;spi_control.c: 263:     SetMotorStart( motor_no );
  5880  1788  083D               	movf	SpiCmdFunc_FwdPulseNormal@motor_no,w
  5881  1789  3191  2172         	fcall	_SetMotorStart
  5882  178B  0008               	return
  5883  178C                     __end_of_SpiCmdFunc_FwdPulseNormal:
  5884                           
  5885                           	psect	text29
  5886  1139                     __ptext29:	
  5887 ;; *************** function _SpiCmdFunc_Test *****************
  5888 ;; Defined at:
  5889 ;;		line 239 in file "spi_control.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		None
  5898 ;; Tracked objects:
  5899 ;;		On entry : 1D/2
  5900 ;;		On exit  : 1D/0
  5901 ;;		Unchanged: 1D/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5903 ;;      Params:         0       1       0       0       0       0       0       0
  5904 ;;      Locals:         0       0       0       0       0       0       0       0
  5905 ;;      Temps:          0       0       0       0       0       0       0       0
  5906 ;;      Totals:         0       1       0       0       0       0       0       0
  5907 ;;Total ram usage:        1 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    5
  5910 ;; This function calls:
  5911 ;;		Nothing
  5912 ;; This function is called by:
  5913 ;;		_WatchMotorDriveFinish
  5914 ;;		_SPIControl_ExecuteCommand
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _SpiCmdFunc_Test
  5920  1139                     _SpiCmdFunc_Test:
  5921                           
  5922                           ;incstack = 0
  5923                           ; Regs used in _SpiCmdFunc_Test: []
  5924  1139  0008               	return
  5925  113A                     __end_of_SpiCmdFunc_Test:
  5926                           
  5927                           	psect	text30
  5928  166D                     __ptext30:	
  5929 ;; *************** function _SPIControl_SetNotification *****************
  5930 ;; Defined at:
  5931 ;;		line 523 in file "spi_control.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  motor_no        1   29[BANK0 ] unsigned char 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, status,2, status,0
  5940 ;; Tracked objects:
  5941 ;;		On entry : 1F/2
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5945 ;;      Params:         0       1       0       0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0       0
  5947 ;;      Temps:          0       1       0       0       0       0       0       0
  5948 ;;      Totals:         0       2       0       0       0       0       0       0
  5949 ;;Total ram usage:        2 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    5
  5952 ;; This function calls:
  5953 ;;		Nothing
  5954 ;; This function is called by:
  5955 ;;		_AfterDetectedLoadPosition
  5956 ;;		_WatchMotorDriveFinish
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function _SPIControl_SetNotification
  5962  166D                     _SPIControl_SetNotification:
  5963                           
  5964                           ;spi_control.c: 523: void SPIControl_SetNotification( UB motor_no );spi_control.c: 524: 
      +                          {;spi_control.c: 525:  if ( ( 0x01 + 0x02 )== handPositionActiveBit ) {
  5965                           
  5966                           ;incstack = 0
  5967                           ; Regs used in _SPIControl_SetNotification: [wreg+status,2+status,0]
  5968  166D  3003               	movlw	3
  5969  166E  0021               	movlb	1	; select bank1
  5970  166F  0651               	xorwf	_handPositionActiveBit^(0+128),w
  5971  1670  1D03               	btfss	3,2
  5972  1671  0008               	return
  5973                           
  5974                           ;spi_control.c: 527:      LATC0 = 1;
  5975  1672  0022               	movlb	2	; select bank2
  5976  1673  140E               	bsf	14,0	;volatile
  5977                           
  5978                           ;spi_control.c: 530:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  5979  1674  3006               	movlw	6
  5980  1675  0020               	movlb	0	; select bank0
  5981  1676  00BE               	movwf	??_SPIControl_SetNotification
  5982  1677  3030               	movlw	48
  5983  1678                     u5387:
  5984  1678  0B89               	decfsz	9,f
  5985  1679  2E78               	goto	u5387
  5986  167A  0BBE               	decfsz	??_SPIControl_SetNotification,f
  5987  167B  2E78               	goto	u5387
  5988  167C  0000               	nop
  5989                           
  5990                           ;spi_control.c: 533:      LATC0 = 0;
  5991  167D  0022               	movlb	2	; select bank2
  5992  167E  100E               	bcf	14,0	;volatile
  5993                           
  5994                           ;spi_control.c: 535:   _delay((unsigned long)((1000)*(16000000/4000000.0)));
  5995  167F  3006               	movlw	6
  5996  1680  0020               	movlb	0	; select bank0
  5997  1681  00BE               	movwf	??_SPIControl_SetNotification
  5998  1682  3030               	movlw	48
  5999  1683                     u5397:
  6000  1683  0B89               	decfsz	9,f
  6001  1684  2E83               	goto	u5397
  6002  1685  0BBE               	decfsz	??_SPIControl_SetNotification,f
  6003  1686  2E83               	goto	u5397
  6004  1687  0000               	nop
  6005  1688  0008               	return
  6006  1689                     __end_of_SPIControl_SetNotification:
  6007                           
  6008                           	psect	text31
  6009  005D                     __ptext31:	
  6010 ;; *************** function _AfterDetectedLoadPosition *****************
  6011 ;; Defined at:
  6012 ;;		line 2033 in file "MotorDrive.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  motor_no        1   29[BANK0 ] unsigned char 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  move_steps      2   36[BANK0 ] short 
  6017 ;;  res             1   35[BANK0 ] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 1F/2
  6024 ;;		On exit  : 1F/1
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6027 ;;      Params:         0       1       0       0       0       0       0       0
  6028 ;;      Locals:         0       3       0       0       0       0       0       0
  6029 ;;      Temps:          0       7       0       0       0       0       0       0
  6030 ;;      Totals:         0      11       0       0       0       0       0       0
  6031 ;;Total ram usage:       11 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    9
  6034 ;; This function calls:
  6035 ;;		_ActivateHandPosition
  6036 ;;		_CorrectPosition
  6037 ;;		_DetermineBasePosition
  6038 ;;		_InitPositionSearch
  6039 ;;		_MoveTargetPosition
  6040 ;;		_SaveLoadPosition
  6041 ;;		_SetAfterDetectLoadFunc
  6042 ;;		_SetAfterMotorStopFunc
  6043 ;;		_SetDriveType
  6044 ;;		_SetMotorBitMotorNo
  6045 ;;		_SetMotorStart
  6046 ;;		_UpdataHandPosition
  6047 ;;		_UpdateCurrentPositionByFinePosition
  6048 ;; This function is called by:
  6049 ;;		_SetMotorPositionSearchStart
  6050 ;;		_SetMotorCorrectPositionStart
  6051 ;;		_WatchMotorDriveFinish
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           
  6056                           ;psect for function _AfterDetectedLoadPosition
  6057  005D                     _AfterDetectedLoadPosition:
  6058                           
  6059                           ;MotorDrive.c: 2033: void AfterDetectedLoadPosition(UB motor_no);MotorDrive.c: 2034: {;M
      +                          otorDrive.c: 2035:     H move_steps;;MotorDrive.c: 2036:     UB res = ID_SEARCH_RESULT_N
      +                          ULL;
  6060                           
  6061                           ;incstack = 0
  6062                           ; Regs used in _AfterDetectedLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6063  005D  0020               	movlb	0	; select bank0
  6064  005E  01C3               	clrf	AfterDetectedLoadPosition@res
  6065                           
  6066                           ;MotorDrive.c: 2038:     SetMotorBitMotorNo(motor_no);
  6067  005F  083D               	movf	AfterDetectedLoadPosition@motor_no,w
  6068  0060  3193  23AE  3180   	fcall	_SetMotorBitMotorNo
  6069                           
  6070                           ;MotorDrive.c: 2041:     if (reqSearchBasePosBit & motorBitOperation) {
  6071  0063  0859               	movf	_reqSearchBasePosBit,w
  6072  0064  0574               	andwf	_motorBitOperation,w
  6073  0065  1903               	btfsc	3,2
  6074  0066  2876               	goto	l6106
  6075                           
  6076                           ;MotorDrive.c: 2042:         searchTotalSteps[ motorNoOperation ] += positionSearchCt[ m
      +                          otorNoOperation ];
  6077  0067  356B               	lslf	_motorNoOperation,w
  6078  0068  3EA8               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6079  0069  0086               	movwf	6
  6080  006A  0187               	clrf	7
  6081  006B  356B               	lslf	_motorNoOperation,w
  6082  006C  3E20               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6083  006D  0084               	movwf	4
  6084  006E  3001               	movlw	1	; select bank2/3
  6085  006F  0085               	movwf	5
  6086  0070  3F40               	moviw [0]fsr1
  6087  0071  0780               	addwf	0,f
  6088  0072  3101               	addfsr 0,1
  6089  0073  3F41               	moviw [1]fsr1
  6090  0074  3D80               	addwfc	0,f
  6091  0075  313F               	addfsr 0,-1
  6092  0076                     l6106:
  6093                           
  6094                           ;MotorDrive.c: 2045:     move_steps = positionSearchCt[ motorNoOperation ];
  6095  0076  356B               	lslf	_motorNoOperation,w
  6096  0077  3EA8               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6097  0078  0086               	movwf	6
  6098  0079  0187               	clrf	7
  6099  007A  3F40               	moviw [0]fsr1
  6100  007B  00C4               	movwf	AfterDetectedLoadPosition@move_steps
  6101  007C  3F41               	moviw [1]fsr1
  6102  007D  00C5               	movwf	AfterDetectedLoadPosition@move_steps+1
  6103                           
  6104                           ;MotorDrive.c: 2048:     if (reqSearchBasePosBit & motorBitOperation) {
  6105  007E  0859               	movf	_reqSearchBasePosBit,w
  6106  007F  0574               	andwf	_motorBitOperation,w
  6107  0080  1903               	btfsc	3,2
  6108  0081  2890               	goto	l6112
  6109                           
  6110                           ;MotorDrive.c: 2049:         currentPosition[ motorNoOperation ] += positionSearchCt[ mo
      +                          torNoOperation ];
  6111  0082  356B               	lslf	_motorNoOperation,w
  6112  0083  3EA8               	addlw	(low (_positionSearchCt| 0))& (0+255)
  6113  0084  0086               	movwf	6
  6114  0085  0187               	clrf	7
  6115  0086  356B               	lslf	_motorNoOperation,w
  6116  0087  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6117  0088  0084               	movwf	4
  6118  0089  0185               	clrf	5
  6119  008A  3F40               	moviw [0]fsr1
  6120  008B  0780               	addwf	0,f
  6121  008C  3101               	addfsr 0,1
  6122  008D  3F41               	moviw [1]fsr1
  6123  008E  3D80               	addwfc	0,f
  6124  008F  313F               	addfsr 0,-1
  6125  0090                     l6112:	
  6126                           ;MotorDrive.c: 2050:     } else {
  6127                           
  6128                           
  6129                           ;MotorDrive.c: 2054:     if (searchTotalSteps[ motorNoOperation ] > TblMaxSearchSteps[ m
      +                          otorNoOperation ]) {
  6130  0090  356B               	lslf	_motorNoOperation,w
  6131  0091  3E20               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  6132  0092  0086               	movwf	6
  6133  0093  3001               	movlw	1	; select bank2/3
  6134  0094  0087               	movwf	7
  6135  0095  3F40               	moviw [0]fsr1
  6136  0096  00BC               	movwf	??_AfterDetectedLoadPosition
  6137  0097  3F41               	moviw [1]fsr1
  6138  0098  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6139  0099  086B               	movf	_motorNoOperation,w
  6140  009A  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6141  009B  01BF               	clrf	??_AfterDetectedLoadPosition+3
  6142  009C  35BE               	lslf	??_AfterDetectedLoadPosition+2,f
  6143  009D  0DBF               	rlf	??_AfterDetectedLoadPosition+3,f
  6144  009E  3052               	movlw	low (_TblMaxSearchSteps| (0+32768))
  6145  009F  073E               	addwf	??_AfterDetectedLoadPosition+2,w
  6146  00A0  0084               	movwf	4
  6147  00A1  3098               	movlw	high (_TblMaxSearchSteps| (0+32768))
  6148  00A2  3D3F               	addwfc	??_AfterDetectedLoadPosition+3,w
  6149  00A3  0085               	movwf	5
  6150  00A4  3F00               	moviw [0]fsr0
  6151  00A5  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6152  00A6  3F01               	moviw [1]fsr0
  6153  00A7  00C1               	movwf	??_AfterDetectedLoadPosition+5
  6154  00A8  0841               	movf	??_AfterDetectedLoadPosition+5,w
  6155  00A9  3A80               	xorlw	128
  6156  00AA  00C2               	movwf	??_AfterDetectedLoadPosition+6
  6157  00AB  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6158  00AC  3A80               	xorlw	128
  6159  00AD  0242               	subwf	??_AfterDetectedLoadPosition+6,w
  6160  00AE  1D03               	skipz
  6161  00AF  28B2               	goto	u4655
  6162  00B0  083C               	movf	??_AfterDetectedLoadPosition,w
  6163  00B1  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6164  00B2                     u4655:
  6165  00B2  1803               	skipnc
  6166  00B3  28B6               	goto	l6116
  6167                           
  6168                           ;MotorDrive.c: 2056:         res = ID_SEARCH_RESULT_ERR;
  6169  00B4  3005               	movlw	5
  6170  00B5  2942               	goto	L1
  6171  00B6                     l6116:	
  6172                           ;MotorDrive.c: 2057:     } else {
  6173                           
  6174                           
  6175                           ;MotorDrive.c: 2059:         if (move_steps > 47) {
  6176  00B6  0020               	movlb	0	; select bank0
  6177  00B7  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6178  00B8  3A80               	xorlw	128
  6179  00B9  00BC               	movwf	??_AfterDetectedLoadPosition
  6180  00BA  3080               	movlw	128
  6181  00BB  023C               	subwf	??_AfterDetectedLoadPosition,w
  6182  00BC  1D03               	skipz
  6183  00BD  28C0               	goto	u4665
  6184  00BE  3030               	movlw	48
  6185  00BF  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6186  00C0                     u4665:
  6187  00C0  1C03               	skipc
  6188  00C1  2944               	goto	l6144
  6189                           
  6190                           ;MotorDrive.c: 2062:             if (((47 * 2) >= move_steps)
  6191  00C2  0020               	movlb	0	; select bank0
  6192  00C3  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6193  00C4  3A80               	xorlw	128
  6194  00C5  00BC               	movwf	??_AfterDetectedLoadPosition
  6195  00C6  3080               	movlw	128
  6196  00C7  023C               	subwf	??_AfterDetectedLoadPosition,w
  6197  00C8  1D03               	skipz
  6198  00C9  28CC               	goto	u4675
  6199  00CA  305F               	movlw	95
  6200  00CB  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6201  00CC                     u4675:
  6202  00CC  1803               	skipnc
  6203  00CD  2905               	goto	l6130
  6204  00CE  0020               	movlb	0	; select bank0
  6205  00CF  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6206  00D0  3A80               	xorlw	128
  6207  00D1  00BC               	movwf	??_AfterDetectedLoadPosition
  6208  00D2  3080               	movlw	128
  6209  00D3  023C               	subwf	??_AfterDetectedLoadPosition,w
  6210  00D4  1D03               	skipz
  6211  00D5  28D8               	goto	u4685
  6212  00D6  3056               	movlw	86
  6213  00D7  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6214  00D8                     u4685:
  6215  00D8  1C03               	skipc
  6216  00D9  2905               	goto	l6130
  6217                           
  6218                           ;MotorDrive.c: 2063:                     && ((move_steps >= 43 * 2))) {;MotorDrive.c: 20
      +                          66:                 if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motorNoOperation ]
      +                          ) {
  6219  00DA  0020               	movlb	0	; select bank0
  6220  00DB  086B               	movf	_motorNoOperation,w
  6221  00DC  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6222  00DD  0086               	movwf	6
  6223  00DE  0187               	clrf	7
  6224  00DF  0801               	movf	1,w
  6225  00E0  1D03               	btfss	3,2
  6226  00E1  28E8               	goto	l6126
  6227                           
  6228                           ;MotorDrive.c: 2068:                     positionSearchStat[ motorNoOperation ] = ID_SEA
      +                          RCH_FINE_ROUGH_POS;
  6229  00E2  086B               	movf	_motorNoOperation,w
  6230  00E3  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6231  00E4  0086               	movwf	6
  6232  00E5  0187               	clrf	7
  6233  00E6  0181               	clrf	1
  6234  00E7  0A81               	incf	1,f
  6235  00E8                     l6126:
  6236                           
  6237                           ;MotorDrive.c: 2071:                 doubleInterval = 1;
  6238  00E8  0021               	movlb	1	; select bank1
  6239  00E9  01CD               	clrf	_doubleInterval^(0+128)
  6240  00EA  0ACD               	incf	_doubleInterval^(0+128),f
  6241                           
  6242                           ;MotorDrive.c: 2072:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6243  00EB  0020               	movlb	0	; select bank0
  6244  00EC  086B               	movf	_motorNoOperation,w
  6245  00ED  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6246  00EE  0086               	movwf	6
  6247  00EF  0187               	clrf	7
  6248  00F0  0181               	clrf	1
  6249  00F1  0A81               	incf	1,f
  6250                           
  6251                           ;MotorDrive.c: 2073:                 detectFinePosCt[ motorNoOperation ] += 2;
  6252  00F2  3002               	movlw	2
  6253  00F3  00BC               	movwf	??_AfterDetectedLoadPosition
  6254  00F4  086B               	movf	_motorNoOperation,w
  6255  00F5  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6256  00F6  0086               	movwf	6
  6257  00F7  0187               	clrf	7
  6258  00F8  083C               	movf	??_AfterDetectedLoadPosition,w
  6259  00F9  0781               	addwf	1,f
  6260                           
  6261                           ;MotorDrive.c: 2074:                 detectLoadCont[ motorNoOperation ] = 2;
  6262  00FA  3002               	movlw	2
  6263  00FB  00BC               	movwf	??_AfterDetectedLoadPosition
  6264  00FC  086B               	movf	_motorNoOperation,w
  6265  00FD  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6266  00FE  0086               	movwf	6
  6267  00FF  0187               	clrf	7
  6268  0100  083C               	movf	??_AfterDetectedLoadPosition,w
  6269  0101  0081               	movwf	1
  6270  0102                     l6128:
  6271                           
  6272                           ;MotorDrive.c: 2076:                 res = ID_SEARCH_RESULT_NEW_POS;
  6273  0102  01C3               	clrf	AfterDetectedLoadPosition@res
  6274  0103  0AC3               	incf	AfterDetectedLoadPosition@res,f
  6275                           
  6276                           ;MotorDrive.c: 2078:             } else if ((ID_DETECT_LOAD_ROUGH == detectLoadType[ mot
      +                          orNoOperation ])
  6277  0104  2A30               	goto	l6200
  6278  0105                     l6130:
  6279  0105  0020               	movlb	0	; select bank0
  6280  0106  086B               	movf	_motorNoOperation,w
  6281  0107  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6282  0108  0086               	movwf	6
  6283  0109  0187               	clrf	7
  6284  010A  3002               	movlw	2
  6285  010B  0601               	xorwf	1,w
  6286  010C  1D03               	btfss	3,2
  6287  010D  2941               	goto	l6142
  6288  010E  356B               	lslf	_motorNoOperation,w
  6289  010F  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6290  0110  0086               	movwf	6
  6291  0111  0187               	clrf	7
  6292  0112  3F40               	moviw [0]fsr1
  6293  0113  00BC               	movwf	??_AfterDetectedLoadPosition
  6294  0114  3F41               	moviw [1]fsr1
  6295  0115  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6296  0116  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6297  0117  073C               	addwf	??_AfterDetectedLoadPosition,w
  6298  0118  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6299  0119  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6300  011A  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6301  011B  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6302  011C  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6303  011D  3A80               	xorlw	128
  6304  011E  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6305  011F  3080               	movlw	128
  6306  0120  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6307  0121  1D03               	skipz
  6308  0122  2925               	goto	u4715
  6309  0123  305F               	movlw	95
  6310  0124  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6311  0125                     u4715:
  6312  0125  1803               	skipnc
  6313  0126  2941               	goto	l6142
  6314  0127  0020               	movlb	0	; select bank0
  6315  0128  356B               	lslf	_motorNoOperation,w
  6316  0129  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6317  012A  0086               	movwf	6
  6318  012B  0187               	clrf	7
  6319  012C  3F40               	moviw [0]fsr1
  6320  012D  00BC               	movwf	??_AfterDetectedLoadPosition
  6321  012E  3F41               	moviw [1]fsr1
  6322  012F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6323  0130  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6324  0131  073C               	addwf	??_AfterDetectedLoadPosition,w
  6325  0132  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6326  0133  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6327  0134  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6328  0135  00BF               	movwf	??_AfterDetectedLoadPosition+3
  6329  0136  083F               	movf	??_AfterDetectedLoadPosition+3,w
  6330  0137  3A80               	xorlw	128
  6331  0138  00C0               	movwf	??_AfterDetectedLoadPosition+4
  6332  0139  3080               	movlw	128
  6333  013A  0240               	subwf	??_AfterDetectedLoadPosition+4,w
  6334  013B  1D03               	skipz
  6335  013C  293F               	goto	u4725
  6336  013D  3056               	movlw	86
  6337  013E  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6338  013F                     u4725:
  6339  013F  1803               	btfsc	3,0
  6340  0140  28E8               	goto	l6126
  6341  0141                     l6142:	
  6342                           ;MotorDrive.c: 2085:                 detectLoadCont[ motorNoOperation ] = 2;
  6343                           
  6344                           ;MotorDrive.c: 2084:                 detectFinePosCt[ motorNoOperation ] += 2;
  6345                           
  6346                           ;MotorDrive.c: 2083:                 detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD
      +                          _FINE;
  6347                           
  6348                           ;MotorDrive.c: 2080:                     && ((detectRoughTotalMove[ motorNoOperation ] +
      +                           move_steps) >= (43 * 2))) {;MotorDrive.c: 2082:                 doubleInterval = 1;
  6349                           
  6350                           
  6351                           ;MotorDrive.c: 2091:                 res = ID_SEARCH_RESULT_RETRY;
  6352  0141  3003               	movlw	3
  6353  0142                     L1:
  6354  0142  0020               	movlb	0	; select bank0
  6355  0143  2A2D               	goto	L2
  6356  0144                     l6144:
  6357  0144  0020               	movlb	0	; select bank0
  6358  0145  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6359  0146  3A80               	xorlw	128
  6360  0147  00BC               	movwf	??_AfterDetectedLoadPosition
  6361  0148  3080               	movlw	128
  6362  0149  023C               	subwf	??_AfterDetectedLoadPosition,w
  6363  014A  1D03               	skipz
  6364  014B  294E               	goto	u4735
  6365  014C  3030               	movlw	48
  6366  014D  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6367  014E                     u4735:
  6368  014E  1803               	skipnc
  6369  014F  2965               	goto	l6154
  6370  0150  0020               	movlb	0	; select bank0
  6371  0151  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6372  0152  3A80               	xorlw	128
  6373  0153  00BC               	movwf	??_AfterDetectedLoadPosition
  6374  0154  3080               	movlw	128
  6375  0155  023C               	subwf	??_AfterDetectedLoadPosition,w
  6376  0156  1D03               	skipz
  6377  0157  295A               	goto	u4745
  6378  0158  302B               	movlw	43
  6379  0159  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6380  015A                     u4745:
  6381  015A  1C03               	skipc
  6382  015B  2965               	goto	l6154
  6383                           
  6384                           ;MotorDrive.c: 2095:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6385  015C  0020               	movlb	0	; select bank0
  6386  015D  086B               	movf	_motorNoOperation,w
  6387  015E  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6388  015F  0086               	movwf	6
  6389  0160  0187               	clrf	7
  6390  0161  0801               	movf	1,w
  6391  0162  1D03               	btfss	3,2
  6392  0163  2A06               	goto	L3
  6393  0164  2A00               	goto	L6
  6394  0165                     l6154:	
  6395                           ;MotorDrive.c: 2102:             detectLoadCont[ motorNoOperation ] = 1;
  6396                           
  6397                           ;MotorDrive.c: 2101:             detectFinePosCt[ motorNoOperation ]++;
  6398                           
  6399                           ;MotorDrive.c: 2100:             detectLoadType[ motorNoOperation ] = ID_DETECT_LOAD_FIN
      +                          E;
  6400                           
  6401                           ;MotorDrive.c: 2098:             }
  6402                           
  6403                           ;MotorDrive.c: 2097:                 positionSearchStat[ motorNoOperation ] = ID_SEARCH_
      +                          FINE_ROUGH_POS;
  6404                           
  6405  0165  0020               	movlb	0	; select bank0
  6406  0166  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6407  0167  3A80               	xorlw	128
  6408  0168  00BC               	movwf	??_AfterDetectedLoadPosition
  6409  0169  3080               	movlw	128
  6410  016A  023C               	subwf	??_AfterDetectedLoadPosition,w
  6411  016B  1D03               	skipz
  6412  016C  296F               	goto	u4765
  6413  016D  302B               	movlw	43
  6414  016E  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6415  016F                     u4765:
  6416  016F  1803               	skipnc
  6417  0170  2A30               	goto	l6200
  6418                           
  6419                           ;MotorDrive.c: 2108:             if (ID_SEARCH_FINE_POS_1ST == positionSearchStat[ motor
      +                          NoOperation ]) {
  6420  0171  0020               	movlb	0	; select bank0
  6421  0172  086B               	movf	_motorNoOperation,w
  6422  0173  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6423  0174  0086               	movwf	6
  6424  0175  0187               	clrf	7
  6425  0176  0801               	movf	1,w
  6426  0177  1903               	btfsc	3,2
  6427  0178  2A30               	goto	l6200
  6428  0179  086B               	movf	_motorNoOperation,w
  6429  017A  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6430  017B  0086               	movwf	6
  6431  017C  0187               	clrf	7
  6432  017D  0301               	decf	1,w
  6433  017E  1D03               	btfss	3,2
  6434  017F  29BA               	goto	l6174
  6435                           
  6436                           ;MotorDrive.c: 2116:                 if (move_steps > 2) {
  6437  0180  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6438  0181  3A80               	xorlw	128
  6439  0182  00BC               	movwf	??_AfterDetectedLoadPosition
  6440  0183  3080               	movlw	128
  6441  0184  023C               	subwf	??_AfterDetectedLoadPosition,w
  6442  0185  1D03               	skipz
  6443  0186  2989               	goto	u4795
  6444  0187  3003               	movlw	3
  6445  0188  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6446  0189                     u4795:
  6447  0189  1C03               	skipc
  6448  018A  29AB               	goto	l6168
  6449  018B                     l6164:
  6450                           
  6451                           ;MotorDrive.c: 2118:                     detectLoadType[ motorNoOperation ] = ID_DETECT_
      +                          LOAD_ROUGH;
  6452  018B  3002               	movlw	2
  6453  018C  0020               	movlb	0	; select bank0
  6454  018D  00BC               	movwf	??_AfterDetectedLoadPosition
  6455  018E  086B               	movf	_motorNoOperation,w
  6456  018F  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6457  0190  0086               	movwf	6
  6458  0191  0187               	clrf	7
  6459  0192  083C               	movf	??_AfterDetectedLoadPosition,w
  6460  0193  0081               	movwf	1
  6461                           
  6462                           ;MotorDrive.c: 2119:                     detectRoughPosCt[ motorNoOperation ]++;
  6463  0194  3001               	movlw	1
  6464  0195  00BC               	movwf	??_AfterDetectedLoadPosition
  6465  0196  086B               	movf	_motorNoOperation,w
  6466  0197  3EB6               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6467  0198  0086               	movwf	6
  6468  0199  0187               	clrf	7
  6469  019A  083C               	movf	??_AfterDetectedLoadPosition,w
  6470  019B  0781               	addwf	1,f
  6471                           
  6472                           ;MotorDrive.c: 2120:                     detectLoadCont[ motorNoOperation ] = 1;
  6473  019C  086B               	movf	_motorNoOperation,w
  6474  019D  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6475  019E  0086               	movwf	6
  6476  019F  0187               	clrf	7
  6477  01A0  0181               	clrf	1
  6478  01A1  0A81               	incf	1,f
  6479                           
  6480                           ;MotorDrive.c: 2121:                     detectRoughTotalMove[ motorNoOperation ] = move
      +                          _steps;
  6481  01A2  356B               	lslf	_motorNoOperation,w
  6482  01A3  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6483  01A4  0086               	movwf	6
  6484  01A5  0187               	clrf	7
  6485  01A6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6486  01A7  3FC0               	movwi [0]fsr1
  6487  01A8  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6488  01A9  3FC1               	movwi [1]fsr1
  6489  01AA  2902               	goto	l6128
  6490  01AB                     l6168:
  6491                           
  6492                           ;MotorDrive.c: 2125:                     detectLoadCont[ motorNoOperation ]++;
  6493  01AB  3001               	movlw	1
  6494  01AC  0020               	movlb	0	; select bank0
  6495  01AD  00BC               	movwf	??_AfterDetectedLoadPosition
  6496  01AE  086B               	movf	_motorNoOperation,w
  6497  01AF  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6498  01B0  0086               	movwf	6
  6499  01B1  0187               	clrf	7
  6500  01B2  083C               	movf	??_AfterDetectedLoadPosition,w
  6501  01B3  0781               	addwf	1,f
  6502                           
  6503                           ;MotorDrive.c: 2126:                     if (detectLoadCont[ motorNoOperation ] > 2) {
  6504  01B4  086B               	movf	_motorNoOperation,w
  6505  01B5  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6506  01B6  0086               	movwf	6
  6507  01B7  0187               	clrf	7
  6508  01B8  3003               	movlw	3
  6509  01B9  2A29               	goto	L7
  6510  01BA                     l6174:
  6511  01BA  086B               	movf	_motorNoOperation,w
  6512  01BB  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6513  01BC  0086               	movwf	6
  6514  01BD  0187               	clrf	7
  6515  01BE  3002               	movlw	2
  6516  01BF  0601               	xorwf	1,w
  6517  01C0  1D03               	btfss	3,2
  6518  01C1  2941               	goto	l6142
  6519                           
  6520                           ;MotorDrive.c: 2136:                 detectRoughTotalMove[ motorNoOperation ] += move_st
      +                          eps;
  6521  01C2  356B               	lslf	_motorNoOperation,w
  6522  01C3  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6523  01C4  0086               	movwf	6
  6524  01C5  0187               	clrf	7
  6525  01C6  0844               	movf	AfterDetectedLoadPosition@move_steps,w
  6526  01C7  0781               	addwf	1,f
  6527  01C8  3141               	addfsr 1,1
  6528  01C9  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6529  01CA  3D81               	addwfc	1,f
  6530  01CB  317F               	addfsr 1,-1
  6531                           
  6532                           ;MotorDrive.c: 2138:                 if (move_steps > 3) {
  6533  01CC  0845               	movf	AfterDetectedLoadPosition@move_steps+1,w
  6534  01CD  3A80               	xorlw	128
  6535  01CE  00BC               	movwf	??_AfterDetectedLoadPosition
  6536  01CF  3080               	movlw	128
  6537  01D0  023C               	subwf	??_AfterDetectedLoadPosition,w
  6538  01D1  1D03               	skipz
  6539  01D2  29D5               	goto	u4825
  6540  01D3  3004               	movlw	4
  6541  01D4  0244               	subwf	AfterDetectedLoadPosition@move_steps,w
  6542  01D5                     u4825:
  6543  01D5  1C03               	skipc
  6544  01D6  2A1B               	goto	l6192
  6545                           
  6546                           ;MotorDrive.c: 2141:                     if ((47 >= detectRoughTotalMove[ motorNoOperati
      +                          on ]) && (detectRoughTotalMove[ motorNoOperation ] >= 43)) {
  6547  01D7  0020               	movlb	0	; select bank0
  6548  01D8  356B               	lslf	_motorNoOperation,w
  6549  01D9  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6550  01DA  0086               	movwf	6
  6551  01DB  0187               	clrf	7
  6552  01DC  3F40               	moviw [0]fsr1
  6553  01DD  00BC               	movwf	??_AfterDetectedLoadPosition
  6554  01DE  3F41               	moviw [1]fsr1
  6555  01DF  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6556  01E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6557  01E1  3A80               	xorlw	128
  6558  01E2  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6559  01E3  3080               	movlw	128
  6560  01E4  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6561  01E5  1D03               	skipz
  6562  01E6  29E9               	goto	u4835
  6563  01E7  3030               	movlw	48
  6564  01E8  023C               	subwf	??_AfterDetectedLoadPosition,w
  6565  01E9                     u4835:
  6566  01E9  1803               	skipnc
  6567  01EA  298B               	goto	l6164
  6568  01EB  0020               	movlb	0	; select bank0
  6569  01EC  356B               	lslf	_motorNoOperation,w
  6570  01ED  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  6571  01EE  0086               	movwf	6
  6572  01EF  0187               	clrf	7
  6573  01F0  3F40               	moviw [0]fsr1
  6574  01F1  00BC               	movwf	??_AfterDetectedLoadPosition
  6575  01F2  3F41               	moviw [1]fsr1
  6576  01F3  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6577  01F4  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6578  01F5  3A80               	xorlw	128
  6579  01F6  00BE               	movwf	??_AfterDetectedLoadPosition+2
  6580  01F7  3080               	movlw	128
  6581  01F8  023E               	subwf	??_AfterDetectedLoadPosition+2,w
  6582  01F9  1D03               	skipz
  6583  01FA  29FD               	goto	u4845
  6584  01FB  302B               	movlw	43
  6585  01FC  023C               	subwf	??_AfterDetectedLoadPosition,w
  6586  01FD                     u4845:
  6587  01FD  1C03               	skipc
  6588  01FE  298B               	goto	l6164
  6589                           
  6590                           ;MotorDrive.c: 2143:                         positionSearchStat[ motorNoOperation ] = ID
      +                          _SEARCH_FINE_ROUGH_POS;
  6591  01FF  0020               	movlb	0	; select bank0
  6592  0200                     L6:
  6593  0200  086B               	movf	_motorNoOperation,w
  6594  0201  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  6595  0202  0086               	movwf	6
  6596  0203  0187               	clrf	7
  6597  0204  0181               	clrf	1
  6598  0205  0A81               	incf	1,f
  6599  0206                     L3:
  6600                           
  6601                           ;MotorDrive.c: 2144:                         detectLoadType[ motorNoOperation ] = ID_DET
      +                          ECT_LOAD_FINE;
  6602  0206  086B               	movf	_motorNoOperation,w
  6603  0207  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6604  0208  0086               	movwf	6
  6605  0209  0187               	clrf	7
  6606  020A  0181               	clrf	1
  6607  020B  0A81               	incf	1,f
  6608                           
  6609                           ;MotorDrive.c: 2145:                         detectFinePosCt[ motorNoOperation ]++;
  6610  020C  3001               	movlw	1
  6611  020D  00BC               	movwf	??_AfterDetectedLoadPosition
  6612  020E  086B               	movf	_motorNoOperation,w
  6613  020F  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6614  0210  0086               	movwf	6
  6615  0211  0187               	clrf	7
  6616  0212  083C               	movf	??_AfterDetectedLoadPosition,w
  6617  0213  0781               	addwf	1,f
  6618                           
  6619                           ;MotorDrive.c: 2146:                         detectLoadCont[ motorNoOperation ] = 1;
  6620  0214  086B               	movf	_motorNoOperation,w
  6621  0215  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6622  0216  0086               	movwf	6
  6623  0217  0187               	clrf	7
  6624  0218  0181               	clrf	1
  6625  0219  0A81               	incf	1,f
  6626  021A  2902               	goto	l6128
  6627  021B                     l6192:
  6628                           
  6629                           ;MotorDrive.c: 2160:                     detectLoadCont[ motorNoOperation ]++;
  6630  021B  3001               	movlw	1
  6631  021C  0020               	movlb	0	; select bank0
  6632  021D  00BC               	movwf	??_AfterDetectedLoadPosition
  6633  021E  086B               	movf	_motorNoOperation,w
  6634  021F  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6635  0220  0086               	movwf	6
  6636  0221  0187               	clrf	7
  6637  0222  083C               	movf	??_AfterDetectedLoadPosition,w
  6638  0223  0781               	addwf	1,f
  6639                           
  6640                           ;MotorDrive.c: 2161:                     if (detectLoadCont[ motorNoOperation ] > 9) {
  6641  0224  086B               	movf	_motorNoOperation,w
  6642  0225  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  6643  0226  0086               	movwf	6
  6644  0227  0187               	clrf	7
  6645  0228  300A               	movlw	10
  6646  0229                     L7:
  6647  0229  0201               	subwf	1,w
  6648  022A  1803               	btfsc	3,0
  6649  022B  2941               	goto	l6142
  6650                           
  6651                           ;MotorDrive.c: 2130:                         res = ID_SEARCH_RESULT_CONT;
  6652  022C  3002               	movlw	2
  6653  022D                     L2:
  6654  022D  00BC               	movwf	??_AfterDetectedLoadPosition
  6655  022E  083C               	movf	??_AfterDetectedLoadPosition,w
  6656  022F  00C3               	movwf	AfterDetectedLoadPosition@res
  6657  0230                     l6200:
  6658                           
  6659                           ;MotorDrive.c: 2177:     if ((detectFinePosCt[ motorNoOperation ] == 8)
  6660  0230  0020               	movlb	0	; select bank0
  6661  0231  086B               	movf	_motorNoOperation,w
  6662  0232  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6663  0233  0086               	movwf	6
  6664  0234  0187               	clrf	7
  6665  0235  3008               	movlw	8
  6666  0236  0601               	xorwf	1,w
  6667  0237  1D03               	btfss	3,2
  6668  0238  2A42               	goto	l6206
  6669  0239  086B               	movf	_motorNoOperation,w
  6670  023A  3EB6               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6671  023B  0086               	movwf	6
  6672  023C  0187               	clrf	7
  6673  023D  0301               	decf	1,w
  6674  023E  1D03               	btfss	3,2
  6675  023F  2A42               	goto	l6206
  6676  0240                     l6204:
  6677                           
  6678                           ;MotorDrive.c: 2178:             && (detectRoughPosCt[ motorNoOperation ] == 1)) {;Motor
      +                          Drive.c: 2180:         res = ID_SEARCH_RESULT_SUCCESS;
  6679  0240  3004               	movlw	4
  6680  0241  2A62               	goto	L4
  6681  0242                     l6206:	
  6682                           ;MotorDrive.c: 2182:     } else if ((detectFinePosCt[ motorNoOperation ] == (8 + 1))
  6683                           
  6684  0242  086B               	movf	_motorNoOperation,w
  6685  0243  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6686  0244  0086               	movwf	6
  6687  0245  0187               	clrf	7
  6688  0246  3009               	movlw	9
  6689  0247  0601               	xorwf	1,w
  6690  0248  1D03               	btfss	3,2
  6691  0249  2A51               	goto	l6212
  6692  024A  086B               	movf	_motorNoOperation,w
  6693  024B  3EB6               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6694  024C  0086               	movwf	6
  6695  024D  0187               	clrf	7
  6696  024E  0301               	decf	1,w
  6697  024F  1903               	btfsc	3,2
  6698  0250  2A40               	goto	l6204
  6699  0251                     l6212:
  6700  0251  086B               	movf	_motorNoOperation,w
  6701  0252  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  6702  0253  0086               	movwf	6
  6703  0254  0187               	clrf	7
  6704  0255  300A               	movlw	10
  6705  0256  0201               	subwf	1,w
  6706  0257  1803               	btfsc	3,0
  6707  0258  2A61               	goto	l6214
  6708                           
  6709                           ;MotorDrive.c: 2193:     } else if (detectRoughPosCt[ motorNoOperation ] > 1) {
  6710  0259  086B               	movf	_motorNoOperation,w
  6711  025A  3EB6               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  6712  025B  0086               	movwf	6
  6713  025C  0187               	clrf	7
  6714  025D  3002               	movlw	2
  6715  025E  0201               	subwf	1,w
  6716  025F  1C03               	skipc
  6717  0260  2A65               	goto	l6220
  6718  0261                     l6214:
  6719                           
  6720                           ;MotorDrive.c: 2192:         res = ID_SEARCH_RESULT_RETRY;
  6721  0261  3003               	movlw	3
  6722  0262                     L4:
  6723  0262  00BC               	movwf	??_AfterDetectedLoadPosition
  6724  0263  083C               	movf	??_AfterDetectedLoadPosition,w
  6725  0264  00C3               	movwf	AfterDetectedLoadPosition@res
  6726  0265                     l6220:
  6727                           
  6728                           ;MotorDrive.c: 2198:     if (ID_SEARCH_RESULT_ERR == res) {
  6729  0265  3005               	movlw	5
  6730  0266  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6731  0267  1903               	btfsc	3,2
  6732  0268  2BEE               	goto	l6326
  6733  0269  0843               	movf	AfterDetectedLoadPosition@res,w
  6734  026A  1D03               	btfss	3,2
  6735  026B  2A7D               	goto	l6232
  6736                           
  6737                           ;MotorDrive.c: 2205:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6738  026C  305D               	movlw	low _AfterDetectedLoadPosition
  6739  026D  00A0               	movwf	SetAfterDetectLoadFunc@func
  6740  026E  3000               	movlw	high _AfterDetectedLoadPosition
  6741  026F  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6742  0270  086B               	movf	_motorNoOperation,w
  6743  0271  3191  2186  3180   	fcall	_SetAfterDetectLoadFunc
  6744                           
  6745                           ;MotorDrive.c: 2206:         if (reqSearchBasePosBit & motorBitOperation) {
  6746  0274  0859               	movf	_reqSearchBasePosBit,w
  6747  0275  0574               	andwf	_motorBitOperation,w
  6748  0276  1903               	btfsc	3,2
  6749  0277  2BEE               	goto	l6326
  6750                           
  6751                           ;MotorDrive.c: 2207:             SetMotorStart(motorNoOperation);
  6752  0278  086B               	movf	_motorNoOperation,w
  6753  0279  3191  2172  3180   	fcall	_SetMotorStart
  6754  027C  2BEE               	goto	l6326
  6755  027D                     l6232:
  6756  027D  3003               	movlw	3
  6757  027E  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6758  027F  1D03               	btfss	3,2
  6759  0280  2A9C               	goto	l6244
  6760                           
  6761                           ;MotorDrive.c: 2216:         InitPositionSearch(motorNoOperation);
  6762  0281  086B               	movf	_motorNoOperation,w
  6763  0282  318E  261A  3180   	fcall	_InitPositionSearch
  6764                           
  6765                           ;MotorDrive.c: 2217:         SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedLoadP
      +                          osition);
  6766  0285  305D               	movlw	low _AfterDetectedLoadPosition
  6767  0286  00A0               	movwf	SetAfterDetectLoadFunc@func
  6768  0287  3000               	movlw	high _AfterDetectedLoadPosition
  6769  0288  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  6770  0289  086B               	movf	_motorNoOperation,w
  6771  028A  3191  2186  3180   	fcall	_SetAfterDetectLoadFunc
  6772                           
  6773                           ;MotorDrive.c: 2218:         if (reqSearchBasePosBit & motorBitOperation) {
  6774  028D  0859               	movf	_reqSearchBasePosBit,w
  6775  028E  0574               	andwf	_motorBitOperation,w
  6776  028F  1903               	btfsc	3,2
  6777  0290  2A96               	goto	l6242
  6778                           
  6779                           ;MotorDrive.c: 2219:             SetMotorStart(motorNoOperation);
  6780  0291  086B               	movf	_motorNoOperation,w
  6781  0292  3191  2172  3180   	fcall	_SetMotorStart
  6782                           
  6783                           ;MotorDrive.c: 2220:         } else {
  6784  0295  2BEE               	goto	l6326
  6785  0296                     l6242:
  6786                           
  6787                           ;MotorDrive.c: 2221:             reqCorrectFinePoBit |= motorBitOperation;
  6788  0296  0874               	movf	_motorBitOperation,w
  6789  0297  00BC               	movwf	??_AfterDetectedLoadPosition
  6790  0298  083C               	movf	??_AfterDetectedLoadPosition,w
  6791  0299  0021               	movlb	1	; select bank1
  6792  029A  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  6793                           
  6794                           ;MotorDrive.c: 2223:     } else {
  6795                           
  6796                           ;MotorDrive.c: 2222:         }
  6797  029B  2BEE               	goto	l6326
  6798  029C                     l6244:
  6799                           
  6800                           ;MotorDrive.c: 2225:         if (0 == (reqCorrectFinePoBit & motorBitOperation)) {
  6801  029C  0021               	movlb	1	; select bank1
  6802  029D  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  6803  029E  0574               	andwf	_motorBitOperation,w
  6804  029F  1D03               	btfss	3,2
  6805  02A0  2B5A               	goto	l6272
  6806                           
  6807                           ;MotorDrive.c: 2229:             if (1 == doubleInterval) {
  6808  02A1  034D               	decf	_doubleInterval^(0+128),w
  6809  02A2  1D03               	btfss	3,2
  6810  02A3  2B0A               	goto	l6260
  6811                           
  6812                           ;MotorDrive.c: 2230:                 detectLoadPositionIndex[ motorNoOperation ]++;
  6813  02A4  3001               	movlw	1
  6814  02A5  0020               	movlb	0	; select bank0
  6815  02A6  00BC               	movwf	??_AfterDetectedLoadPosition
  6816  02A7  086B               	movf	_motorNoOperation,w
  6817  02A8  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6818  02A9  0086               	movwf	6
  6819  02AA  0187               	clrf	7
  6820  02AB  083C               	movf	??_AfterDetectedLoadPosition,w
  6821  02AC  0781               	addwf	1,f
  6822                           
  6823                           ;MotorDrive.c: 2231:                 missingDetectFinePosition = currentPosition[ motorN
      +                          oOperation ] - 45;
  6824  02AD  356B               	lslf	_motorNoOperation,w
  6825  02AE  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6826  02AF  0086               	movwf	6
  6827  02B0  0187               	clrf	7
  6828  02B1  3F40               	moviw [0]fsr1
  6829  02B2  00BC               	movwf	??_AfterDetectedLoadPosition
  6830  02B3  3F41               	moviw [1]fsr1
  6831  02B4  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6832  02B5  083C               	movf	??_AfterDetectedLoadPosition,w
  6833  02B6  3ED3               	addlw	211
  6834  02B7  0021               	movlb	1	; select bank1
  6835  02B8  00EE               	movwf	_missingDetectFinePosition^(0+128)
  6836  02B9  30FF               	movlw	255
  6837  02BA  0020               	movlb	0	; select bank0
  6838  02BB  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6839  02BC  0021               	movlb	1	; select bank1
  6840  02BD  00EF               	movwf	(_missingDetectFinePosition+1)^(0+128)
  6841                           
  6842                           ;MotorDrive.c: 2232:                 CorrectPosition(&missingDetectFinePosition, TblMaxS
      +                          teps[ motorNoOperation ]);
  6843  02BE  30EE               	movlw	low _missingDetectFinePosition
  6844  02BF  0020               	movlb	0	; select bank0
  6845  02C0  00A6               	movwf	CorrectPosition@pos
  6846  02C1  3000               	movlw	high _missingDetectFinePosition
  6847  02C2  00A7               	movwf	CorrectPosition@pos+1
  6848  02C3  086B               	movf	_motorNoOperation,w
  6849  02C4  00BC               	movwf	??_AfterDetectedLoadPosition
  6850  02C5  01BD               	clrf	??_AfterDetectedLoadPosition+1
  6851  02C6  35BC               	lslf	??_AfterDetectedLoadPosition,f
  6852  02C7  0DBD               	rlf	??_AfterDetectedLoadPosition+1,f
  6853  02C8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  6854  02C9  073C               	addwf	??_AfterDetectedLoadPosition,w
  6855  02CA  0084               	movwf	4
  6856  02CB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  6857  02CC  3D3D               	addwfc	??_AfterDetectedLoadPosition+1,w
  6858  02CD  0085               	movwf	5
  6859  02CE  3F00               	moviw [0]fsr0
  6860  02CF  00A8               	movwf	CorrectPosition@max
  6861  02D0  3F01               	moviw [1]fsr0
  6862  02D1  00A9               	movwf	CorrectPosition@max+1
  6863  02D2  3188  205E  3180   	fcall	_CorrectPosition
  6864                           
  6865                           ;MotorDrive.c: 2234:                 *detectLoadPositionPtr[ motorNoOperation ] = missin
      +                          gDetectFinePosition;
  6866  02D5  356B               	lslf	_motorNoOperation,w
  6867  02D6  3E24               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6868  02D7  0086               	movwf	6
  6869  02D8  3001               	movlw	1	; select bank2/3
  6870  02D9  0087               	movwf	7
  6871  02DA  3F40               	moviw [0]fsr1
  6872  02DB  00BC               	movwf	??_AfterDetectedLoadPosition
  6873  02DC  3F41               	moviw [1]fsr1
  6874  02DD  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6875  02DE  083C               	movf	??_AfterDetectedLoadPosition,w
  6876  02DF  0086               	movwf	6
  6877  02E0  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6878  02E1  0087               	movwf	7
  6879  02E2  0021               	movlb	1	; select bank1
  6880  02E3  086E               	movf	_missingDetectFinePosition^(0+128),w
  6881  02E4  3FC0               	movwi [0]fsr1
  6882  02E5  086F               	movf	(_missingDetectFinePosition+1)^(0+128),w
  6883  02E6  3FC1               	movwi [1]fsr1
  6884                           
  6885                           ;MotorDrive.c: 2235:                 detectLoadPositionPtr[ motorNoOperation ]++;
  6886  02E7  0020               	movlb	0	; select bank0
  6887  02E8  356B               	lslf	_motorNoOperation,w
  6888  02E9  3E24               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6889  02EA  0086               	movwf	6
  6890  02EB  3001               	movlw	1	; select bank2/3
  6891  02EC  0087               	movwf	7
  6892  02ED  3002               	movlw	2
  6893  02EE  0781               	addwf	1,f
  6894  02EF  3141               	addfsr 1,1
  6895  02F0  1803               	skipnc
  6896  02F1  0A81               	incf	1,f
  6897                           
  6898                           ;MotorDrive.c: 2237:                 *detectLoadPositionTypePtr[ motorNoOperation ] = de
      +                          tectLoadType[ motorNoOperation ];
  6899  02F2  086B               	movf	_motorNoOperation,w
  6900  02F3  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6901  02F4  0086               	movwf	6
  6902  02F5  0187               	clrf	7
  6903  02F6  0801               	movf	1,w
  6904  02F7  00BC               	movwf	??_AfterDetectedLoadPosition
  6905  02F8  086B               	movf	_motorNoOperation,w
  6906  02F9  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6907  02FA  0086               	movwf	6
  6908  02FB  0187               	clrf	7
  6909  02FC  0801               	movf	1,w
  6910  02FD  0086               	movwf	6
  6911  02FE  3001               	movlw	1	; select bank2/3
  6912  02FF  0087               	movwf	7
  6913  0300  083C               	movf	??_AfterDetectedLoadPosition,w
  6914  0301  0081               	movwf	1
  6915                           
  6916                           ;MotorDrive.c: 2238:                 detectLoadPositionTypePtr[ motorNoOperation ]++;
  6917  0302  3001               	movlw	1
  6918  0303  00BC               	movwf	??_AfterDetectedLoadPosition
  6919  0304  086B               	movf	_motorNoOperation,w
  6920  0305  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6921  0306  0086               	movwf	6
  6922  0307  0187               	clrf	7
  6923  0308  083C               	movf	??_AfterDetectedLoadPosition,w
  6924  0309  0781               	addwf	1,f
  6925  030A                     l6260:
  6926                           
  6927                           ;MotorDrive.c: 2241:             detectLoadPositionIndex[ motorNoOperation ]++;
  6928  030A  3001               	movlw	1
  6929  030B  0020               	movlb	0	; select bank0
  6930  030C  00BC               	movwf	??_AfterDetectedLoadPosition
  6931  030D  086B               	movf	_motorNoOperation,w
  6932  030E  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  6933  030F  0086               	movwf	6
  6934  0310  0187               	clrf	7
  6935  0311  083C               	movf	??_AfterDetectedLoadPosition,w
  6936  0312  0781               	addwf	1,f
  6937                           
  6938                           ;MotorDrive.c: 2244:             *detectLoadPositionPtr[ motorNoOperation ] = currentPos
      +                          ition[ motorNoOperation ];
  6939  0313  356B               	lslf	_motorNoOperation,w
  6940  0314  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  6941  0315  0086               	movwf	6
  6942  0316  0187               	clrf	7
  6943  0317  356B               	lslf	_motorNoOperation,w
  6944  0318  3E24               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6945  0319  0084               	movwf	4
  6946  031A  3001               	movlw	1	; select bank2/3
  6947  031B  0085               	movwf	5
  6948  031C  3F00               	moviw [0]fsr0
  6949  031D  00BC               	movwf	??_AfterDetectedLoadPosition
  6950  031E  3F01               	moviw [1]fsr0
  6951  031F  00BD               	movwf	??_AfterDetectedLoadPosition+1
  6952  0320  083C               	movf	??_AfterDetectedLoadPosition,w
  6953  0321  0084               	movwf	4
  6954  0322  083D               	movf	??_AfterDetectedLoadPosition+1,w
  6955  0323  0085               	movwf	5
  6956  0324  3F40               	moviw [0]fsr1
  6957  0325  3F80               	movwi [0]fsr0
  6958  0326  3F41               	moviw [1]fsr1
  6959  0327  3F81               	movwi [1]fsr0
  6960                           
  6961                           ;MotorDrive.c: 2245:             detectLoadPositionPtr[ motorNoOperation ]++;
  6962  0328  356B               	lslf	_motorNoOperation,w
  6963  0329  3E24               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  6964  032A  0086               	movwf	6
  6965  032B  3001               	movlw	1	; select bank2/3
  6966  032C  0087               	movwf	7
  6967  032D  3002               	movlw	2
  6968  032E  0781               	addwf	1,f
  6969  032F  3141               	addfsr 1,1
  6970  0330  1803               	skipnc
  6971  0331  0A81               	incf	1,f
  6972                           
  6973                           ;MotorDrive.c: 2248:             *detectLoadPositionTypePtr[ motorNoOperation ] = detect
      +                          LoadType[ motorNoOperation ];
  6974  0332  086B               	movf	_motorNoOperation,w
  6975  0333  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  6976  0334  0086               	movwf	6
  6977  0335  0187               	clrf	7
  6978  0336  0801               	movf	1,w
  6979  0337  00BC               	movwf	??_AfterDetectedLoadPosition
  6980  0338  086B               	movf	_motorNoOperation,w
  6981  0339  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  6982  033A  0086               	movwf	6
  6983  033B  0187               	clrf	7
  6984  033C  0801               	movf	1,w
  6985  033D  0086               	movwf	6
  6986  033E  3001               	movlw	1	; select bank2/3
  6987  033F  0087               	movwf	7
  6988  0340  083C               	movf	??_AfterDetectedLoadPosition,w
  6989  0341  0081               	movwf	1
  6990                           
  6991                           ;MotorDrive.c: 2249:             if (ID_SEARCH_RESULT_CONT == res) {
  6992  0342  3002               	movlw	2
  6993  0343  0643               	xorwf	AfterDetectedLoadPosition@res,w
  6994  0344  1D03               	btfss	3,2
  6995  0345  2B52               	goto	l935
  6996                           
  6997                           ;MotorDrive.c: 2250:                 *detectLoadPositionTypePtr[ motorNoOperation ] += 1
      +                          0;
  6998  0346  300A               	movlw	10
  6999  0347  00BC               	movwf	??_AfterDetectedLoadPosition
  7000  0348  086B               	movf	_motorNoOperation,w
  7001  0349  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7002  034A  0086               	movwf	6
  7003  034B  0187               	clrf	7
  7004  034C  0801               	movf	1,w
  7005  034D  0086               	movwf	6
  7006  034E  3001               	movlw	1	; select bank2/3
  7007  034F  0087               	movwf	7
  7008  0350  083C               	movf	??_AfterDetectedLoadPosition,w
  7009  0351  0781               	addwf	1,f
  7010  0352                     l935:	
  7011                           ;MotorDrive.c: 2251:             }
  7012                           
  7013                           
  7014                           ;MotorDrive.c: 2253:             detectLoadPositionTypePtr[ motorNoOperation ]++;
  7015  0352  3001               	movlw	1
  7016  0353  00BC               	movwf	??_AfterDetectedLoadPosition
  7017  0354  086B               	movf	_motorNoOperation,w
  7018  0355  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  7019  0356  0086               	movwf	6
  7020  0357  0187               	clrf	7
  7021  0358  083C               	movf	??_AfterDetectedLoadPosition,w
  7022  0359  0781               	addwf	1,f
  7023  035A                     l6272:
  7024                           
  7025                           ;MotorDrive.c: 2257:         if (ID_SEARCH_RESULT_SUCCESS == res) {
  7026  035A  3004               	movlw	4
  7027  035B  0020               	movlb	0	; select bank0
  7028  035C  0643               	xorwf	AfterDetectedLoadPosition@res,w
  7029  035D  1D03               	btfss	3,2
  7030  035E  2BAF               	goto	l6302
  7031                           
  7032                           ;MotorDrive.c: 2259:             DetermineBasePosition(motorNoOperation);
  7033  035F  086B               	movf	_motorNoOperation,w
  7034  0360  318F  275A  3180   	fcall	_DetermineBasePosition
  7035                           
  7036                           ;MotorDrive.c: 2262:             UpdataHandPosition(motorNoOperation);
  7037  0363  086B               	movf	_motorNoOperation,w
  7038  0364  318E  26BA  3180   	fcall	_UpdataHandPosition
  7039                           
  7040                           ;MotorDrive.c: 2265:             SaveLoadPosition(motorNoOperation);
  7041  0367  086B               	movf	_motorNoOperation,w
  7042  0368  3187  277D  3180   	fcall	_SaveLoadPosition
  7043                           
  7044                           ;MotorDrive.c: 2268:             ActivateHandPosition(motorNoOperation);
  7045  036B  086B               	movf	_motorNoOperation,w
  7046  036C  3194  244F  3180   	fcall	_ActivateHandPosition
  7047                           
  7048                           ;MotorDrive.c: 2270:             if (reqSearchBasePosBit & motorBitOperation) {
  7049  036F  0020               	movlb	0	; select bank0
  7050  0370  0859               	movf	_reqSearchBasePosBit,w
  7051  0371  0574               	andwf	_motorBitOperation,w
  7052  0372  1903               	btfsc	3,2
  7053  0373  2B9E               	goto	l6294
  7054                           
  7055                           ;MotorDrive.c: 2272:                 if (DRIVE_SEARCH_1008_POSITION == driveType[ motorN
      +                          oOperation ]) {
  7056  0374  086B               	movf	_motorNoOperation,w
  7057  0375  3EC2               	addlw	(low (_driveType| 0))& (0+255)
  7058  0376  0086               	movwf	6
  7059  0377  0187               	clrf	7
  7060  0378  3005               	movlw	5
  7061  0379  0601               	xorwf	1,w
  7062  037A  1D03               	btfss	3,2
  7063  037B  2B8B               	goto	l6288
  7064                           
  7065                           ;MotorDrive.c: 2274:                     if (0 == motorNoOperation) {
  7066  037C  086B               	movf	_motorNoOperation,w
  7067  037D  1D03               	btfss	3,2
  7068  037E  2B85               	goto	l6286
  7069                           
  7070                           ;MotorDrive.c: 2275:                         targetPosition[ 0 ] = 48;
  7071  037F  3030               	movlw	48
  7072  0380  0022               	movlb	2	; select bank2
  7073  0381  00E0               	movwf	_targetPosition^(0+256)
  7074  0382  3000               	movlw	0
  7075  0383  00E1               	movwf	(_targetPosition^(0+256)+1)
  7076                           
  7077                           ;MotorDrive.c: 2276:                     } else {
  7078  0384  2B93               	goto	l6290
  7079  0385                     l6286:
  7080                           
  7081                           ;MotorDrive.c: 2277:                         targetPosition[ 1 ] = 304;
  7082  0385  3030               	movlw	48
  7083  0386  0022               	movlb	2	; select bank2
  7084  0387  00E2               	movwf	(_targetPosition^(0+256)+2)
  7085  0388  3001               	movlw	1
  7086  0389  00E3               	movwf	(_targetPosition^(0+256)+3)
  7087  038A  2B93               	goto	l6290
  7088  038B                     l6288:
  7089                           
  7090                           ;MotorDrive.c: 2280:                     targetPosition[ motorNoOperation ] = 0;
  7091  038B  356B               	lslf	_motorNoOperation,w
  7092  038C  3E60               	addlw	(low (_targetPosition| (0+256)))& (0+255)
  7093  038D  0086               	movwf	6
  7094  038E  3001               	movlw	1	; select bank2/3
  7095  038F  0087               	movwf	7
  7096  0390  3000               	movlw	0
  7097  0391  3FC0               	movwi [0]fsr1
  7098  0392  3FC1               	movwi [1]fsr1
  7099  0393                     l6290:
  7100                           
  7101                           ;MotorDrive.c: 2283:                 SetAfterMotorStopFunc(motorNoOperation, SPIControl_
      +                          SetNotification);
  7102  0393  306D               	movlw	low _SPIControl_SetNotification
  7103  0394  0020               	movlb	0	; select bank0
  7104  0395  00A0               	movwf	SetAfterMotorStopFunc@func
  7105  0396  3016               	movlw	high _SPIControl_SetNotification
  7106  0397  00A1               	movwf	SetAfterMotorStopFunc@func+1
  7107  0398  086B               	movf	_motorNoOperation,w
  7108  0399  3191  217C  3180   	fcall	_SetAfterMotorStopFunc
  7109                           
  7110                           ;MotorDrive.c: 2284:                 SetDriveType(motorNoOperation, DRIVE_SIMPLE);
  7111  039C  01A0               	clrf	SetDriveType@drive_type
  7112  039D  2BAA               	goto	L5
  7113  039E                     l6294:	
  7114                           ;MotorDrive.c: 2285:             } else if (reqCorrectBasePosBit & motorBitOperation) {
  7115                           
  7116  039E  0858               	movf	_reqCorrectBasePosBit,w
  7117  039F  0574               	andwf	_motorBitOperation,w
  7118  03A0  1903               	btfsc	3,2
  7119  03A1  2BEA               	goto	l6324
  7120                           
  7121                           ;MotorDrive.c: 2289:                 reqCorrectBasePosBit &= (UB) (~motorBitOperation);
  7122  03A2  0974               	comf	_motorBitOperation,w
  7123  03A3  00BC               	movwf	??_AfterDetectedLoadPosition
  7124  03A4  083C               	movf	??_AfterDetectedLoadPosition,w
  7125  03A5  05D8               	andwf	_reqCorrectBasePosBit,f
  7126                           
  7127                           ;MotorDrive.c: 2290:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7128  03A6  3004               	movlw	4
  7129  03A7  00BC               	movwf	??_AfterDetectedLoadPosition
  7130  03A8  083C               	movf	??_AfterDetectedLoadPosition,w
  7131  03A9  00A0               	movwf	SetDriveType@drive_type
  7132  03AA                     L5:
  7133  03AA  086B               	movf	_motorNoOperation,w
  7134  03AB  318D  2586  3180   	fcall	_SetDriveType
  7135  03AE  2BEA               	goto	l6324
  7136  03AF                     l6302:	
  7137                           ;MotorDrive.c: 2295:         } else {
  7138                           
  7139                           ;MotorDrive.c: 2294:             MoveTargetPosition(motorNoOperation);
  7140                           
  7141                           
  7142                           ;MotorDrive.c: 2297:             SetAfterDetectLoadFunc(motorNoOperation, AfterDetectedL
      +                          oadPosition);
  7143  03AF  305D               	movlw	low _AfterDetectedLoadPosition
  7144  03B0  00A0               	movwf	SetAfterDetectLoadFunc@func
  7145  03B1  3000               	movlw	high _AfterDetectedLoadPosition
  7146  03B2  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7147  03B3  086B               	movf	_motorNoOperation,w
  7148  03B4  3191  2186  3180   	fcall	_SetAfterDetectLoadFunc
  7149                           
  7150                           ;MotorDrive.c: 2298:             if (reqSearchBasePosBit & motorBitOperation) {
  7151  03B7  0859               	movf	_reqSearchBasePosBit,w
  7152  03B8  0574               	andwf	_motorBitOperation,w
  7153  03B9  1903               	btfsc	3,2
  7154  03BA  2BC0               	goto	l6308
  7155                           
  7156                           ;MotorDrive.c: 2302:                 SetMotorStart(motorNoOperation);
  7157  03BB  086B               	movf	_motorNoOperation,w
  7158  03BC  3191  2172  3180   	fcall	_SetMotorStart
  7159                           
  7160                           ;MotorDrive.c: 2304:             } else if ((reqCorrectBasePosBit & motorBitOperation)
  7161  03BF  2BEE               	goto	l6326
  7162  03C0                     l6308:
  7163  03C0  0858               	movf	_reqCorrectBasePosBit,w
  7164  03C1  0574               	andwf	_motorBitOperation,w
  7165  03C2  1903               	btfsc	3,2
  7166  03C3  2BEE               	goto	l6326
  7167  03C4  0021               	movlb	1	; select bank1
  7168  03C5  084F               	movf	_reqCorrectFinePoBit^(0+128),w
  7169  03C6  0574               	andwf	_motorBitOperation,w
  7170  03C7  1903               	btfsc	3,2
  7171  03C8  2BEE               	goto	l6326
  7172  03C9  0020               	movlb	0	; select bank0
  7173  03CA  086B               	movf	_motorNoOperation,w
  7174  03CB  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  7175  03CC  0086               	movwf	6
  7176  03CD  0187               	clrf	7
  7177  03CE  0301               	decf	1,w
  7178  03CF  1D03               	btfss	3,2
  7179  03D0  2BEE               	goto	l6326
  7180  03D1  0343               	decf	AfterDetectedLoadPosition@res,w
  7181  03D2  1D03               	btfss	3,2
  7182  03D3  2BEE               	goto	l6326
  7183                           
  7184                           ;MotorDrive.c: 2307:                     && (ID_SEARCH_RESULT_NEW_POS == res)) {;MotorDr
      +                          ive.c: 2311:                 UpdateCurrentPositionByFinePosition(motorNoOperation);
  7185  03D4  086B               	movf	_motorNoOperation,w
  7186  03D5  318C  24F8  3180   	fcall	_UpdateCurrentPositionByFinePosition
  7187                           
  7188                           ;MotorDrive.c: 2318:                 InitPositionSearch(motorNoOperation);
  7189  03D8  086B               	movf	_motorNoOperation,w
  7190  03D9  318E  261A  3180   	fcall	_InitPositionSearch
  7191                           
  7192                           ;MotorDrive.c: 2320:                 SetDriveType(motorNoOperation, DRIVE_ACT_CORRECT_PO
      +                          SITION);
  7193  03DC  3004               	movlw	4
  7194  03DD  00BC               	movwf	??_AfterDetectedLoadPosition
  7195  03DE  083C               	movf	??_AfterDetectedLoadPosition,w
  7196  03DF  00A0               	movwf	SetDriveType@drive_type
  7197  03E0  086B               	movf	_motorNoOperation,w
  7198  03E1  318D  2586  3180   	fcall	_SetDriveType
  7199                           
  7200                           ;MotorDrive.c: 2321:                 reqCorrectFinePoBit &= (UB) (~motorBitOperation);
  7201  03E4  0974               	comf	_motorBitOperation,w
  7202  03E5  0020               	movlb	0	; select bank0
  7203  03E6  00BC               	movwf	??_AfterDetectedLoadPosition
  7204  03E7  083C               	movf	??_AfterDetectedLoadPosition,w
  7205  03E8  0021               	movlb	1	; select bank1
  7206  03E9  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
  7207  03EA                     l6324:
  7208                           
  7209                           ;MotorDrive.c: 2323:                 MoveTargetPosition(motorNoOperation);
  7210  03EA  0020               	movlb	0	; select bank0
  7211  03EB  086B               	movf	_motorNoOperation,w
  7212  03EC  3194  2486         	fcall	_MoveTargetPosition
  7213  03EE                     l6326:	
  7214                           ;MotorDrive.c: 2325:             } else {
  7215                           
  7216                           
  7217                           ;MotorDrive.c: 2334:     positionSearchCt[ motorNoOperation ] = 0;
  7218  03EE  0020               	movlb	0	; select bank0
  7219  03EF  356B               	lslf	_motorNoOperation,w
  7220  03F0  3EA8               	addlw	(low (_positionSearchCt| 0))& (0+255)
  7221  03F1  0086               	movwf	6
  7222  03F2  0187               	clrf	7
  7223  03F3  3000               	movlw	0
  7224  03F4  3FC0               	movwi [0]fsr1
  7225  03F5  3FC1               	movwi [1]fsr1
  7226                           
  7227                           ;MotorDrive.c: 2337:     doubleInterval = 0;
  7228  03F6  0021               	movlb	1	; select bank1
  7229  03F7  01CD               	clrf	_doubleInterval^(0+128)
  7230  03F8  0008               	return
  7231  03F9                     __end_of_AfterDetectedLoadPosition:
  7232                           
  7233                           	psect	text32
  7234  06C0                     __ptext32:	
  7235 ;; *************** function _VerifyHandPosition_LoadPosition *****************
  7236 ;; Defined at:
  7237 ;;		line 2540 in file "MotorDrive.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  motor_no        1   29[BANK0 ] unsigned char 
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;  load_pos        2   44[BANK0 ] short 
  7242 ;;  curt_pos        2   41[BANK0 ] short 
  7243 ;;  remain_steps    2   38[BANK0 ] short 
  7244 ;;  load_pos_pl1    2    0        short 
  7245 ;;  i               1   43[BANK0 ] unsigned char 
  7246 ;;  misalignment    1   40[BANK0 ] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 1F/2
  7253 ;;		On exit  : 1F/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7256 ;;      Params:         0       1       0       0       0       0       0       0
  7257 ;;      Locals:         0       8       0       0       0       0       0       0
  7258 ;;      Temps:          0       8       0       0       0       0       0       0
  7259 ;;      Totals:         0      17       0       0       0       0       0       0
  7260 ;;Total ram usage:       17 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:    9
  7263 ;; This function calls:
  7264 ;;		_CorrectPosition
  7265 ;;		_MoveTargetPosition
  7266 ;;		_SetMotorCorrectPositionStart
  7267 ;;		___bmul
  7268 ;;		___wmul
  7269 ;; This function is called by:
  7270 ;;		_SetFwdPulseWithCorrectProc
  7271 ;;		_WatchMotorDriveFinish
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           
  7276                           ;psect for function _VerifyHandPosition_LoadPosition
  7277  06C0                     _VerifyHandPosition_LoadPosition:
  7278                           
  7279                           ;MotorDrive.c: 2540: void VerifyHandPosition_LoadPosition(UB motor_no);MotorDrive.c: 254
      +                          1: {;MotorDrive.c: 2542:     UB i;;MotorDrive.c: 2543:     UB misalignment_flag = 1;
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _VerifyHandPosition_LoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7283  06C0  0020               	movlb	0	; select bank0
  7284  06C1  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7285  06C2  0AC8               	incf	VerifyHandPosition_LoadPosition@misalignment_flag,f
  7286                           
  7287                           ;MotorDrive.c: 2544:     H remain_steps;;MotorDrive.c: 2545:     H curt_pos;;MotorDrive.
      +                          c: 2546:     H load_pos;;MotorDrive.c: 2547:     H load_pos_pl1;;MotorDrive.c: 2550:    
      +                           if (0 == motor_no) {
  7288  06C3  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7289  06C4  1D03               	btfss	3,2
  7290  06C5  2ECA               	goto	l6336
  7291                           
  7292                           ;MotorDrive.c: 2551:         remain_steps = motorM0StepCounter;
  7293  06C6  0856               	movf	_motorM0StepCounter+1,w
  7294  06C7  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7295  06C8  0855               	movf	_motorM0StepCounter,w
  7296  06C9  2ECD               	goto	L8
  7297  06CA                     l6336:	
  7298                           ;MotorDrive.c: 2552:     } else {
  7299                           
  7300                           
  7301                           ;MotorDrive.c: 2553:         remain_steps = motorM1StepCounter;
  7302  06CA  0854               	movf	_motorM1StepCounter+1,w
  7303  06CB  00C7               	movwf	VerifyHandPosition_LoadPosition@remain_steps+1
  7304  06CC  0853               	movf	_motorM1StepCounter,w
  7305  06CD                     L8:
  7306  06CD  00C6               	movwf	VerifyHandPosition_LoadPosition@remain_steps
  7307                           
  7308                           ;MotorDrive.c: 2557:     currentPosition[ motor_no ] -= remain_steps;
  7309  06CE  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7310  06CF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7311  06D0  0086               	movwf	6
  7312  06D1  0187               	clrf	7
  7313  06D2  0846               	movf	VerifyHandPosition_LoadPosition@remain_steps,w
  7314  06D3  0281               	subwf	1,f
  7315  06D4  3141               	addfsr 1,1
  7316  06D5  0847               	movf	VerifyHandPosition_LoadPosition@remain_steps+1,w
  7317  06D6  3B81               	subwfb	1,f
  7318  06D7  317F               	addfsr 1,-1
  7319                           
  7320                           ;MotorDrive.c: 2558:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7321  06D8  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7322  06D9  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7323  06DA  00A6               	movwf	CorrectPosition@pos
  7324  06DB  3000               	movlw	0
  7325  06DC  00A7               	movwf	CorrectPosition@pos+1
  7326  06DD  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7327  06DE  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7328  06DF  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7329  06E0  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7330  06E1  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7331  06E2  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7332  06E3  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7333  06E4  0084               	movwf	4
  7334  06E5  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7335  06E6  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7336  06E7  0085               	movwf	5
  7337  06E8  3F00               	moviw [0]fsr0
  7338  06E9  00A8               	movwf	CorrectPosition@max
  7339  06EA  3F01               	moviw [1]fsr0
  7340  06EB  00A9               	movwf	CorrectPosition@max+1
  7341  06EC  3188  205E  3186   	fcall	_CorrectPosition
  7342                           
  7343                           ;MotorDrive.c: 2560:     curt_pos = currentPosition[ motor_no ];
  7344  06EF  353D               	lslf	VerifyHandPosition_LoadPosition@motor_no,w
  7345  06F0  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7346  06F1  0086               	movwf	6
  7347  06F2  0187               	clrf	7
  7348  06F3  3F40               	moviw [0]fsr1
  7349  06F4  00C9               	movwf	VerifyHandPosition_LoadPosition@curt_pos
  7350  06F5  3F41               	moviw [1]fsr1
  7351  06F6  00CA               	movwf	VerifyHandPosition_LoadPosition@curt_pos+1
  7352                           
  7353                           ;MotorDrive.c: 2575:     for (i = 0; i < loadPositionIndex[ motor_no ]; i++) {
  7354  06F7  01CB               	clrf	VerifyHandPosition_LoadPosition@i
  7355  06F8  2F3A               	goto	l6366
  7356  06F9                     l6352:	
  7357                           ;MotorDrive.c: 2582:             break;
  7358                           
  7359                           
  7360                           ;MotorDrive.c: 2585:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7361  06F9  3017               	movlw	23
  7362  06FA  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7363  06FB  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7364  06FC  00A0               	movwf	___bmul@multiplicand
  7365  06FD  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7366  06FE  3193  239D  3186   	fcall	___bmul
  7367  0701  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7368  0702  074B               	addwf	VerifyHandPosition_LoadPosition@i,w
  7369  0703  00BF               	movwf	??_VerifyHandPosition_LoadPosition+1
  7370  0704  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7371  0705  0086               	movwf	6
  7372  0706  3001               	movlw	1	; select bank3/4
  7373  0707  0087               	movwf	7
  7374  0708  0301               	decf	1,w
  7375  0709  1D03               	btfss	3,2
  7376  070A  2F36               	goto	l6364
  7377                           
  7378                           ;MotorDrive.c: 2587:             load_pos++;
  7379  070B  3001               	movlw	1
  7380  070C  07CC               	addwf	VerifyHandPosition_LoadPosition@load_pos,f
  7381  070D  3000               	movlw	0
  7382  070E  3DCD               	addwfc	VerifyHandPosition_LoadPosition@load_pos+1,f
  7383                           
  7384                           ;MotorDrive.c: 2588:             if (load_pos >= TblMaxSteps[ motor_no ]) {
  7385  070F  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7386  0710  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7387  0711  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7388  0712  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7389  0713  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7390  0714  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7391  0715  073E               	addwf	??_VerifyHandPosition_LoadPosition,w
  7392  0716  0084               	movwf	4
  7393  0717  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7394  0718  3D3F               	addwfc	??_VerifyHandPosition_LoadPosition+1,w
  7395  0719  0085               	movwf	5
  7396  071A  3F00               	moviw [0]fsr0
  7397  071B  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7398  071C  3F01               	moviw [1]fsr0
  7399  071D  00C1               	movwf	??_VerifyHandPosition_LoadPosition+3
  7400  071E  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7401  071F  3A80               	xorlw	128
  7402  0720  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7403  0721  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7404  0722  3A80               	xorlw	128
  7405  0723  0242               	subwf	??_VerifyHandPosition_LoadPosition+4,w
  7406  0724  1D03               	skipz
  7407  0725  2F28               	goto	u5135
  7408  0726  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7409  0727  024C               	subwf	VerifyHandPosition_LoadPosition@load_pos,w
  7410  0728                     u5135:
  7411  0728  1C03               	skipc
  7412  0729  2F2D               	goto	l6360
  7413                           
  7414                           ;MotorDrive.c: 2589:                 load_pos = 0;
  7415  072A  0020               	movlb	0	; select bank0
  7416  072B  01CC               	clrf	VerifyHandPosition_LoadPosition@load_pos
  7417  072C  01CD               	clrf	VerifyHandPosition_LoadPosition@load_pos+1
  7418  072D                     l6360:
  7419                           
  7420                           ;MotorDrive.c: 2592:             if (curt_pos == load_pos) {
  7421  072D  0020               	movlb	0	; select bank0
  7422  072E  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7423  072F  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7424  0730  1D03               	skipz
  7425  0731  2F34               	goto	u5145
  7426  0732  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7427  0733  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7428  0734                     u5145:
  7429  0734  1903               	btfsc	3,2
  7430  0735  2F71               	goto	l6350
  7431  0736                     l6364:
  7432                           
  7433                           ;MotorDrive.c: 2598:     }
  7434  0736  3001               	movlw	1
  7435  0737  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7436  0738  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7437  0739  07CB               	addwf	VerifyHandPosition_LoadPosition@i,f
  7438  073A                     l6366:
  7439  073A  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7440  073B  3EBA               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7441  073C  0086               	movwf	6
  7442  073D  0187               	clrf	7
  7443  073E  0801               	movf	1,w
  7444  073F  024B               	subwf	VerifyHandPosition_LoadPosition@i,w
  7445  0740  1803               	btfsc	3,0
  7446  0741  2F72               	goto	l6368
  7447                           
  7448                           ;MotorDrive.c: 2577:         load_pos = loadPosition[ motor_no ][ i ];
  7449  0742  084B               	movf	VerifyHandPosition_LoadPosition@i,w
  7450  0743  00BE               	movwf	??_VerifyHandPosition_LoadPosition
  7451  0744  01BF               	clrf	??_VerifyHandPosition_LoadPosition+1
  7452  0745  35BE               	lslf	??_VerifyHandPosition_LoadPosition,f
  7453  0746  0DBF               	rlf	??_VerifyHandPosition_LoadPosition+1,f
  7454  0747  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7455  0748  00C0               	movwf	??_VerifyHandPosition_LoadPosition+2
  7456  0749  01C1               	clrf	??_VerifyHandPosition_LoadPosition+3
  7457  074A  0840               	movf	??_VerifyHandPosition_LoadPosition+2,w
  7458  074B  00A0               	movwf	___wmul@multiplier
  7459  074C  0841               	movf	??_VerifyHandPosition_LoadPosition+3,w
  7460  074D  00A1               	movwf	___wmul@multiplier+1
  7461  074E  302E               	movlw	46
  7462  074F  00A2               	movwf	___wmul@multiplicand
  7463  0750  3000               	movlw	0
  7464  0751  00A3               	movwf	___wmul@multiplicand+1
  7465  0752  3196  2636  3186   	fcall	___wmul
  7466  0755  3038               	movlw	56
  7467  0756  00C2               	movwf	??_VerifyHandPosition_LoadPosition+4
  7468  0757  3021               	movlw	33
  7469  0758  00C3               	movwf	??_VerifyHandPosition_LoadPosition+5
  7470  0759  0820               	movf	?___wmul,w
  7471  075A  0742               	addwf	??_VerifyHandPosition_LoadPosition+4,w
  7472  075B  00C4               	movwf	??_VerifyHandPosition_LoadPosition+6
  7473  075C  0821               	movf	?___wmul+1,w
  7474  075D  3D43               	addwfc	??_VerifyHandPosition_LoadPosition+5,w
  7475  075E  00C5               	movwf	??_VerifyHandPosition_LoadPosition+7
  7476  075F  083E               	movf	??_VerifyHandPosition_LoadPosition,w
  7477  0760  0744               	addwf	??_VerifyHandPosition_LoadPosition+6,w
  7478  0761  0086               	movwf	6
  7479  0762  083F               	movf	??_VerifyHandPosition_LoadPosition+1,w
  7480  0763  3D45               	addwfc	??_VerifyHandPosition_LoadPosition+7,w
  7481  0764  0087               	movwf	7
  7482  0765  3F40               	moviw [0]fsr1
  7483  0766  00CC               	movwf	VerifyHandPosition_LoadPosition@load_pos
  7484  0767  3F41               	moviw [1]fsr1
  7485  0768  00CD               	movwf	VerifyHandPosition_LoadPosition@load_pos+1
  7486                           
  7487                           ;MotorDrive.c: 2579:         if (curt_pos == load_pos) {
  7488  0769  084D               	movf	VerifyHandPosition_LoadPosition@load_pos+1,w
  7489  076A  064A               	xorwf	VerifyHandPosition_LoadPosition@curt_pos+1,w
  7490  076B  1D03               	skipz
  7491  076C  2F6F               	goto	u5115
  7492  076D  084C               	movf	VerifyHandPosition_LoadPosition@load_pos,w
  7493  076E  0649               	xorwf	VerifyHandPosition_LoadPosition@curt_pos,w
  7494  076F                     u5115:
  7495  076F  1D03               	skipz
  7496  0770  2EF9               	goto	l6352
  7497  0771                     l6350:
  7498                           
  7499                           ;MotorDrive.c: 2581:             misalignment_flag = 0;
  7500  0771  01C8               	clrf	VerifyHandPosition_LoadPosition@misalignment_flag
  7501  0772                     l6368:
  7502                           
  7503                           ;MotorDrive.c: 2600:     if (misalignment_flag) {
  7504  0772  0848               	movf	VerifyHandPosition_LoadPosition@misalignment_flag,w
  7505  0773  1903               	btfsc	3,2
  7506  0774  2F79               	goto	l6372
  7507                           
  7508                           ;MotorDrive.c: 2604:         SetMotorCorrectPositionStart(motor_no);
  7509  0775  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7510  0776  3188  2009         	fcall	_SetMotorCorrectPositionStart
  7511                           
  7512                           ;MotorDrive.c: 2605:     } else {
  7513  0778  0008               	return
  7514  0779                     l6372:
  7515                           
  7516                           ;MotorDrive.c: 2608:         MoveTargetPosition(motor_no);
  7517  0779  083D               	movf	VerifyHandPosition_LoadPosition@motor_no,w
  7518  077A  3194  2486         	fcall	_MoveTargetPosition
  7519  077C  0008               	return
  7520  077D                     __end_of_VerifyHandPosition_LoadPosition:
  7521                           
  7522                           	psect	text33
  7523  0809                     __ptext33:	
  7524 ;; *************** function _SetMotorCorrectPositionStart *****************
  7525 ;; Defined at:
  7526 ;;		line 1890 in file "MotorDrive.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  motor_no        1    wreg     unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;  motor_no        1   18[BANK0 ] unsigned char 
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  1    wreg      void 
  7533 ;; Registers used:
  7534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7535 ;; Tracked objects:
  7536 ;;		On entry : 1F/0
  7537 ;;		On exit  : 1F/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7540 ;;      Params:         0       0       0       0       0       0       0       0
  7541 ;;      Locals:         0       1       0       0       0       0       0       0
  7542 ;;      Temps:          0       2       0       0       0       0       0       0
  7543 ;;      Totals:         0       3       0       0       0       0       0       0
  7544 ;;Total ram usage:        3 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    7
  7547 ;; This function calls:
  7548 ;;		_InitPositionSearch
  7549 ;;		_SetAfterDetectLoadFunc
  7550 ;; This function is called by:
  7551 ;;		_VerifyHandPosition_LoadPosition
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           
  7556                           ;psect for function _SetMotorCorrectPositionStart
  7557  0809                     _SetMotorCorrectPositionStart:
  7558                           
  7559                           ;incstack = 0
  7560                           ; Regs used in _SetMotorCorrectPositionStart: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  7561                           ;SetMotorCorrectPositionStart@motor_no stored from wreg
  7562  0809  00B2               	movwf	SetMotorCorrectPositionStart@motor_no
  7563                           
  7564                           ;MotorDrive.c: 1890: void SetMotorCorrectPositionStart(UB motor_no);MotorDrive.c: 1891: 
      +                          {;MotorDrive.c: 1892:     motorBitOperation = (UB) (0x01 << motor_no);
  7565  080A  3001               	movlw	1
  7566  080B  00B0               	movwf	??_SetMotorCorrectPositionStart
  7567  080C  0A32               	incf	SetMotorCorrectPositionStart@motor_no,w
  7568  080D  280F               	goto	u4444
  7569  080E                     u4445:
  7570  080E  35B0               	lslf	??_SetMotorCorrectPositionStart,f
  7571  080F                     u4444:
  7572  080F  0B89               	decfsz	9,f
  7573  0810  280E               	goto	u4445
  7574  0811  0830               	movf	??_SetMotorCorrectPositionStart,w
  7575  0812  00B1               	movwf	??_SetMotorCorrectPositionStart+1
  7576  0813  0831               	movf	??_SetMotorCorrectPositionStart+1,w
  7577  0814  00F4               	movwf	_motorBitOperation
  7578                           
  7579                           ;MotorDrive.c: 1894:     reqCorrectBasePosBit |= motorBitOperation;
  7580  0815  0874               	movf	_motorBitOperation,w
  7581  0816  00B0               	movwf	??_SetMotorCorrectPositionStart
  7582  0817  0830               	movf	??_SetMotorCorrectPositionStart,w
  7583  0818  04D8               	iorwf	_reqCorrectBasePosBit,f
  7584                           
  7585                           ;MotorDrive.c: 1895:     reqCorrectFinePoBit |= motorBitOperation;
  7586  0819  0874               	movf	_motorBitOperation,w
  7587  081A  00B0               	movwf	??_SetMotorCorrectPositionStart
  7588  081B  0830               	movf	??_SetMotorCorrectPositionStart,w
  7589  081C  0021               	movlb	1	; select bank1
  7590  081D  04CF               	iorwf	_reqCorrectFinePoBit^(0+128),f
  7591                           
  7592                           ;MotorDrive.c: 1897:     searchTotalSteps[ motor_no ] = 0;
  7593  081E  0020               	movlb	0	; select bank0
  7594  081F  3532               	lslf	SetMotorCorrectPositionStart@motor_no,w
  7595  0820  3E20               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  7596  0821  0086               	movwf	6
  7597  0822  3001               	movlw	1	; select bank2/3
  7598  0823  0087               	movwf	7
  7599  0824  3000               	movlw	0
  7600  0825  3FC0               	movwi [0]fsr1
  7601  0826  3FC1               	movwi [1]fsr1
  7602                           
  7603                           ;MotorDrive.c: 1899:     InitPositionSearch(motor_no);
  7604  0827  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7605  0828  318E  261A  3188   	fcall	_InitPositionSearch
  7606                           
  7607                           ;MotorDrive.c: 1901:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  7608  082B  305D               	movlw	low _AfterDetectedLoadPosition
  7609  082C  00A0               	movwf	SetAfterDetectLoadFunc@func
  7610  082D  3000               	movlw	high _AfterDetectedLoadPosition
  7611  082E  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  7612  082F  0832               	movf	SetMotorCorrectPositionStart@motor_no,w
  7613  0830  3191  2186         	fcall	_SetAfterDetectLoadFunc
  7614  0832  0008               	return
  7615  0833                     __end_of_SetMotorCorrectPositionStart:
  7616                           
  7617                           	psect	text34
  7618  0CF8                     __ptext34:	
  7619 ;; *************** function _UpdateCurrentPositionByFinePosition *****************
  7620 ;; Defined at:
  7621 ;;		line 2437 in file "MotorDrive.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  motor_no        1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  motor_no        1   17[BANK0 ] unsigned char 
  7626 ;;  diff            2   14[BANK0 ] short 
  7627 ;;  revise_pos      2    0        short 
  7628 ;;  i               1   16[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 1F/0
  7635 ;;		On exit  : 1F/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7638 ;;      Params:         0       0       0       0       0       0       0       0
  7639 ;;      Locals:         0       4       0       0       0       0       0       0
  7640 ;;      Temps:          0       8       0       0       0       0       0       0
  7641 ;;      Totals:         0      12       0       0       0       0       0       0
  7642 ;;Total ram usage:       12 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    6
  7645 ;; This function calls:
  7646 ;;		___bmul
  7647 ;;		___wmul
  7648 ;; This function is called by:
  7649 ;;		_AfterDetectedLoadPosition
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _UpdateCurrentPositionByFinePosition
  7655  0CF8                     _UpdateCurrentPositionByFinePosition:
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _UpdateCurrentPositionByFinePosition: [wreg-fsr1h+status,2+status,0+pclat
      +                          h+cstack]
  7659                           ;UpdateCurrentPositionByFinePosition@motor_no stored from wreg
  7660  0CF8  00B1               	movwf	UpdateCurrentPositionByFinePosition@motor_no
  7661                           
  7662                           ;MotorDrive.c: 2437: void UpdateCurrentPositionByFinePosition(UB motor_no);MotorDrive.c:
      +                           2438: {;MotorDrive.c: 2439:     UB i;;MotorDrive.c: 2440:     H revise_pos;;MotorDrive.
      +                          c: 2441:     H diff;;MotorDrive.c: 2443:     for (i = 0; i < loadPositionIndex[ motor_no
      +                           ]; i++) {
  7663  0CF9  01B0               	clrf	UpdateCurrentPositionByFinePosition@i
  7664  0CFA                     l6068:
  7665  0CFA  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7666  0CFB  3EBA               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  7667  0CFC  0086               	movwf	6
  7668  0CFD  0187               	clrf	7
  7669  0CFE  0801               	movf	1,w
  7670  0CFF  0230               	subwf	UpdateCurrentPositionByFinePosition@i,w
  7671  0D00  1803               	btfsc	3,0
  7672  0D01  0008               	return
  7673                           
  7674                           ;MotorDrive.c: 2445:         if (ID_DETECT_LOAD_FINE == loadPositionType[ motor_no ][ i 
      +                          ]) {
  7675  0D02  3017               	movlw	23
  7676  0D03  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7677  0D04  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7678  0D05  00A0               	movwf	___bmul@multiplicand
  7679  0D06  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7680  0D07  3193  239D  318C   	fcall	___bmul
  7681  0D0A  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  7682  0D0B  0730               	addwf	UpdateCurrentPositionByFinePosition@i,w
  7683  0D0C  00A7               	movwf	??_UpdateCurrentPositionByFinePosition+1
  7684  0D0D  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7685  0D0E  0086               	movwf	6
  7686  0D0F  3001               	movlw	1	; select bank3/4
  7687  0D10  0087               	movwf	7
  7688  0D11  0301               	decf	1,w
  7689  0D12  1D03               	btfss	3,2
  7690  0D13  2D80               	goto	l6066
  7691                           
  7692                           ;MotorDrive.c: 2446:             diff = currentPosition[ motor_no ] - loadPosition[ moto
      +                          r_no ][ i ];
  7693  0D14  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7694  0D15  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7695  0D16  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7696  0D17  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7697  0D18  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7698  0D19  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7699  0D1A  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7700  0D1B  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7701  0D1C  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7702  0D1D  00A0               	movwf	___wmul@multiplier
  7703  0D1E  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7704  0D1F  00A1               	movwf	___wmul@multiplier+1
  7705  0D20  302E               	movlw	46
  7706  0D21  00A2               	movwf	___wmul@multiplicand
  7707  0D22  3000               	movlw	0
  7708  0D23  00A3               	movwf	___wmul@multiplicand+1
  7709  0D24  3196  2636  318C   	fcall	___wmul
  7710  0D27  3038               	movlw	56
  7711  0D28  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7712  0D29  3021               	movlw	33
  7713  0D2A  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7714  0D2B  0820               	movf	?___wmul,w
  7715  0D2C  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7716  0D2D  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7717  0D2E  0821               	movf	?___wmul+1,w
  7718  0D2F  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7719  0D30  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7720  0D31  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7721  0D32  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7722  0D33  0086               	movwf	6
  7723  0D34  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7724  0D35  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7725  0D36  0087               	movwf	7
  7726  0D37  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7727  0D38  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7728  0D39  0084               	movwf	4
  7729  0D3A  0185               	clrf	5
  7730  0D3B  3F40               	moviw [0]fsr1
  7731  0D3C  0200               	subwf	0,w
  7732  0D3D  00AE               	movwf	UpdateCurrentPositionByFinePosition@diff
  7733  0D3E  3101               	addfsr 0,1
  7734  0D3F  3F41               	moviw [1]fsr1
  7735  0D40  3B00               	subwfb	0,w
  7736  0D41  00AF               	movwf	UpdateCurrentPositionByFinePosition@diff+1
  7737                           
  7738                           ;MotorDrive.c: 2448:             if (diff < 0) {
  7739  0D42  1FAF               	btfss	UpdateCurrentPositionByFinePosition@diff+1,7
  7740  0D43  2D49               	goto	l6062
  7741                           
  7742                           ;MotorDrive.c: 2449:                 diff = -diff;
  7743  0D44  09AE               	comf	UpdateCurrentPositionByFinePosition@diff,f
  7744  0D45  09AF               	comf	UpdateCurrentPositionByFinePosition@diff+1,f
  7745  0D46  0AAE               	incf	UpdateCurrentPositionByFinePosition@diff,f
  7746  0D47  1903               	skipnz
  7747  0D48  0AAF               	incf	UpdateCurrentPositionByFinePosition@diff+1,f
  7748  0D49                     l6062:
  7749                           
  7750                           ;MotorDrive.c: 2452:             if (diff <= 22) {
  7751  0D49  082F               	movf	UpdateCurrentPositionByFinePosition@diff+1,w
  7752  0D4A  3A80               	xorlw	128
  7753  0D4B  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7754  0D4C  3080               	movlw	128
  7755  0D4D  0226               	subwf	??_UpdateCurrentPositionByFinePosition,w
  7756  0D4E  1D03               	skipz
  7757  0D4F  2D52               	goto	u4555
  7758  0D50  3017               	movlw	23
  7759  0D51  022E               	subwf	UpdateCurrentPositionByFinePosition@diff,w
  7760  0D52                     u4555:
  7761  0D52  1803               	skipnc
  7762  0D53  2D80               	goto	l6066
  7763                           
  7764                           ;MotorDrive.c: 2453:                 currentPosition[ motor_no ] = loadPosition[ motor_n
      +                          o ][ i ];
  7765  0D54  0020               	movlb	0	; select bank0
  7766  0D55  0830               	movf	UpdateCurrentPositionByFinePosition@i,w
  7767  0D56  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7768  0D57  01A7               	clrf	??_UpdateCurrentPositionByFinePosition+1
  7769  0D58  35A6               	lslf	??_UpdateCurrentPositionByFinePosition,f
  7770  0D59  0DA7               	rlf	??_UpdateCurrentPositionByFinePosition+1,f
  7771  0D5A  0831               	movf	UpdateCurrentPositionByFinePosition@motor_no,w
  7772  0D5B  00A8               	movwf	??_UpdateCurrentPositionByFinePosition+2
  7773  0D5C  01A9               	clrf	??_UpdateCurrentPositionByFinePosition+3
  7774  0D5D  0828               	movf	??_UpdateCurrentPositionByFinePosition+2,w
  7775  0D5E  00A0               	movwf	___wmul@multiplier
  7776  0D5F  0829               	movf	??_UpdateCurrentPositionByFinePosition+3,w
  7777  0D60  00A1               	movwf	___wmul@multiplier+1
  7778  0D61  302E               	movlw	46
  7779  0D62  00A2               	movwf	___wmul@multiplicand
  7780  0D63  3000               	movlw	0
  7781  0D64  00A3               	movwf	___wmul@multiplicand+1
  7782  0D65  3196  2636         	fcall	___wmul
  7783  0D67  3038               	movlw	56
  7784  0D68  00AA               	movwf	??_UpdateCurrentPositionByFinePosition+4
  7785  0D69  3021               	movlw	33
  7786  0D6A  00AB               	movwf	??_UpdateCurrentPositionByFinePosition+5
  7787  0D6B  0820               	movf	?___wmul,w
  7788  0D6C  072A               	addwf	??_UpdateCurrentPositionByFinePosition+4,w
  7789  0D6D  00AC               	movwf	??_UpdateCurrentPositionByFinePosition+6
  7790  0D6E  0821               	movf	?___wmul+1,w
  7791  0D6F  3D2B               	addwfc	??_UpdateCurrentPositionByFinePosition+5,w
  7792  0D70  00AD               	movwf	??_UpdateCurrentPositionByFinePosition+7
  7793  0D71  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7794  0D72  072C               	addwf	??_UpdateCurrentPositionByFinePosition+6,w
  7795  0D73  0086               	movwf	6
  7796  0D74  0827               	movf	??_UpdateCurrentPositionByFinePosition+1,w
  7797  0D75  3D2D               	addwfc	??_UpdateCurrentPositionByFinePosition+7,w
  7798  0D76  0087               	movwf	7
  7799  0D77  3531               	lslf	UpdateCurrentPositionByFinePosition@motor_no,w
  7800  0D78  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7801  0D79  0084               	movwf	4
  7802  0D7A  0185               	clrf	5
  7803  0D7B  3F40               	moviw [0]fsr1
  7804  0D7C  3F80               	movwi [0]fsr0
  7805  0D7D  3F41               	moviw [1]fsr1
  7806  0D7E  3F81               	movwi [1]fsr0
  7807                           
  7808                           ;MotorDrive.c: 2454:                 break;
  7809  0D7F  0008               	return
  7810  0D80                     l6066:
  7811                           
  7812                           ;MotorDrive.c: 2457:     }
  7813  0D80  3001               	movlw	1
  7814  0D81  0020               	movlb	0	; select bank0
  7815  0D82  00A6               	movwf	??_UpdateCurrentPositionByFinePosition
  7816  0D83  0826               	movf	??_UpdateCurrentPositionByFinePosition,w
  7817  0D84  07B0               	addwf	UpdateCurrentPositionByFinePosition@i,f
  7818  0D85  2CFA               	goto	l6068
  7819  0D86                     __end_of_UpdateCurrentPositionByFinePosition:
  7820                           
  7821                           	psect	text35
  7822  0EBA                     __ptext35:	
  7823 ;; *************** function _UpdataHandPosition *****************
  7824 ;; Defined at:
  7825 ;;		line 2405 in file "MotorDrive.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  motor_no        1    wreg     unsigned char 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  motor_no        1   24[BANK0 ] unsigned char 
  7830 ;;  i               1   23[BANK0 ] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      void 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 1F/0
  7837 ;;		On exit  : 1F/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7840 ;;      Params:         0       0       0       0       0       0       0       0
  7841 ;;      Locals:         0       2       0       0       0       0       0       0
  7842 ;;      Temps:          0      10       0       0       0       0       0       0
  7843 ;;      Totals:         0      12       0       0       0       0       0       0
  7844 ;;Total ram usage:       12 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:    6
  7847 ;; This function calls:
  7848 ;;		_CorrectPosition
  7849 ;;		___wmul
  7850 ;; This function is called by:
  7851 ;;		_AfterDetectedLoadPosition
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           
  7856                           ;psect for function _UpdataHandPosition
  7857  0EBA                     _UpdataHandPosition:
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in _UpdataHandPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7861                           ;UpdataHandPosition@motor_no stored from wreg
  7862  0EBA  00B8               	movwf	UpdataHandPosition@motor_no
  7863                           
  7864                           ;MotorDrive.c: 2405: void UpdataHandPosition(UB motor_no);MotorDrive.c: 2406: {;MotorDri
      +                          ve.c: 2407:     UB i;;MotorDrive.c: 2409:     currentPosition[ motor_no ] -= detectBaseP
      +                          osition[ motor_no ];
  7865  0EBB  3538               	lslf	UpdataHandPosition@motor_no,w
  7866  0EBC  3E5C               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7867  0EBD  0086               	movwf	6
  7868  0EBE  3001               	movlw	1	; select bank2/3
  7869  0EBF  0087               	movwf	7
  7870  0EC0  3F40               	moviw [0]fsr1
  7871  0EC1  00AD               	movwf	??_UpdataHandPosition
  7872  0EC2  3F41               	moviw [1]fsr1
  7873  0EC3  00AE               	movwf	??_UpdataHandPosition+1
  7874  0EC4  3538               	lslf	UpdataHandPosition@motor_no,w
  7875  0EC5  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7876  0EC6  0086               	movwf	6
  7877  0EC7  0187               	clrf	7
  7878  0EC8  082D               	movf	??_UpdataHandPosition,w
  7879  0EC9  0281               	subwf	1,f
  7880  0ECA  3141               	addfsr 1,1
  7881  0ECB  082E               	movf	??_UpdataHandPosition+1,w
  7882  0ECC  3B81               	subwfb	1,f
  7883  0ECD  317F               	addfsr 1,-1
  7884                           
  7885                           ;MotorDrive.c: 2410:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
  7886  0ECE  3538               	lslf	UpdataHandPosition@motor_no,w
  7887  0ECF  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  7888  0ED0  00A6               	movwf	CorrectPosition@pos
  7889  0ED1  3000               	movlw	0
  7890  0ED2  00A7               	movwf	CorrectPosition@pos+1
  7891  0ED3  0838               	movf	UpdataHandPosition@motor_no,w
  7892  0ED4  00AD               	movwf	??_UpdataHandPosition
  7893  0ED5  01AE               	clrf	??_UpdataHandPosition+1
  7894  0ED6  35AD               	lslf	??_UpdataHandPosition,f
  7895  0ED7  0DAE               	rlf	??_UpdataHandPosition+1,f
  7896  0ED8  3056               	movlw	low (_TblMaxSteps| (0+32768))
  7897  0ED9  072D               	addwf	??_UpdataHandPosition,w
  7898  0EDA  0084               	movwf	4
  7899  0EDB  3098               	movlw	high (_TblMaxSteps| (0+32768))
  7900  0EDC  3D2E               	addwfc	??_UpdataHandPosition+1,w
  7901  0EDD  0085               	movwf	5
  7902  0EDE  3F00               	moviw [0]fsr0
  7903  0EDF  00A8               	movwf	CorrectPosition@max
  7904  0EE0  3F01               	moviw [1]fsr0
  7905  0EE1  00A9               	movwf	CorrectPosition@max+1
  7906  0EE2  3188  205E  318E   	fcall	_CorrectPosition
  7907                           
  7908                           ;MotorDrive.c: 2412:     for (i = 0; i < detectLoadPositionIndex[ motor_no ]; i++) {
  7909  0EE5  01B7               	clrf	UpdataHandPosition@i
  7910  0EE6                     l6028:
  7911  0EE6  0838               	movf	UpdataHandPosition@motor_no,w
  7912  0EE7  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  7913  0EE8  0086               	movwf	6
  7914  0EE9  0187               	clrf	7
  7915  0EEA  0801               	movf	1,w
  7916  0EEB  0237               	subwf	UpdataHandPosition@i,w
  7917  0EEC  1803               	btfsc	3,0
  7918  0EED  0008               	return
  7919                           
  7920                           ;MotorDrive.c: 2414:         detectLoadPosition[ motor_no ][ i ] -= detectBasePosition[ 
      +                          motor_no ];
  7921  0EEE  3538               	lslf	UpdataHandPosition@motor_no,w
  7922  0EEF  3E5C               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  7923  0EF0  0086               	movwf	6
  7924  0EF1  3001               	movlw	1	; select bank2/3
  7925  0EF2  0087               	movwf	7
  7926  0EF3  3F40               	moviw [0]fsr1
  7927  0EF4  00AD               	movwf	??_UpdataHandPosition
  7928  0EF5  3F41               	moviw [1]fsr1
  7929  0EF6  00AE               	movwf	??_UpdataHandPosition+1
  7930  0EF7  0837               	movf	UpdataHandPosition@i,w
  7931  0EF8  00AF               	movwf	??_UpdataHandPosition+2
  7932  0EF9  01B0               	clrf	??_UpdataHandPosition+3
  7933  0EFA  35AF               	lslf	??_UpdataHandPosition+2,f
  7934  0EFB  0DB0               	rlf	??_UpdataHandPosition+3,f
  7935  0EFC  0838               	movf	UpdataHandPosition@motor_no,w
  7936  0EFD  00B1               	movwf	??_UpdataHandPosition+4
  7937  0EFE  01B2               	clrf	??_UpdataHandPosition+5
  7938  0EFF  0831               	movf	??_UpdataHandPosition+4,w
  7939  0F00  00A0               	movwf	___wmul@multiplier
  7940  0F01  0832               	movf	??_UpdataHandPosition+5,w
  7941  0F02  00A1               	movwf	___wmul@multiplier+1
  7942  0F03  302E               	movlw	46
  7943  0F04  00A2               	movwf	___wmul@multiplicand
  7944  0F05  3000               	movlw	0
  7945  0F06  00A3               	movwf	___wmul@multiplicand+1
  7946  0F07  3196  2636  318E   	fcall	___wmul
  7947  0F0A  3094               	movlw	148
  7948  0F0B  00B3               	movwf	??_UpdataHandPosition+6
  7949  0F0C  3021               	movlw	33
  7950  0F0D  00B4               	movwf	??_UpdataHandPosition+7
  7951  0F0E  0820               	movf	?___wmul,w
  7952  0F0F  0733               	addwf	??_UpdataHandPosition+6,w
  7953  0F10  00B5               	movwf	??_UpdataHandPosition+8
  7954  0F11  0821               	movf	?___wmul+1,w
  7955  0F12  3D34               	addwfc	??_UpdataHandPosition+7,w
  7956  0F13  00B6               	movwf	??_UpdataHandPosition+9
  7957  0F14  082F               	movf	??_UpdataHandPosition+2,w
  7958  0F15  0735               	addwf	??_UpdataHandPosition+8,w
  7959  0F16  0086               	movwf	6
  7960  0F17  0830               	movf	??_UpdataHandPosition+3,w
  7961  0F18  3D36               	addwfc	??_UpdataHandPosition+9,w
  7962  0F19  0087               	movwf	7
  7963  0F1A  082D               	movf	??_UpdataHandPosition,w
  7964  0F1B  0281               	subwf	1,f
  7965  0F1C  3141               	addfsr 1,1
  7966  0F1D  082E               	movf	??_UpdataHandPosition+1,w
  7967  0F1E  3B81               	subwfb	1,f
  7968  0F1F  317F               	addfsr 1,-1
  7969                           
  7970                           ;MotorDrive.c: 2415:         CorrectPosition(&detectLoadPosition[ motor_no ][ i ], TblMa
      +                          xSteps[ motor_no ]);
  7971  0F20  0837               	movf	UpdataHandPosition@i,w
  7972  0F21  00AD               	movwf	??_UpdataHandPosition
  7973  0F22  01AE               	clrf	??_UpdataHandPosition+1
  7974  0F23  35AD               	lslf	??_UpdataHandPosition,f
  7975  0F24  0DAE               	rlf	??_UpdataHandPosition+1,f
  7976  0F25  0838               	movf	UpdataHandPosition@motor_no,w
  7977  0F26  00AF               	movwf	??_UpdataHandPosition+2
  7978  0F27  01B0               	clrf	??_UpdataHandPosition+3
  7979  0F28  082F               	movf	??_UpdataHandPosition+2,w
  7980  0F29  00A0               	movwf	___wmul@multiplier
  7981  0F2A  0830               	movf	??_UpdataHandPosition+3,w
  7982  0F2B  00A1               	movwf	___wmul@multiplier+1
  7983  0F2C  302E               	movlw	46
  7984  0F2D  00A2               	movwf	___wmul@multiplicand
  7985  0F2E  3000               	movlw	0
  7986  0F2F  00A3               	movwf	___wmul@multiplicand+1
  7987  0F30  3196  2636  318E   	fcall	___wmul
  7988  0F33  3094               	movlw	148
  7989  0F34  00B1               	movwf	??_UpdataHandPosition+4
  7990  0F35  3021               	movlw	33
  7991  0F36  00B2               	movwf	??_UpdataHandPosition+5
  7992  0F37  0820               	movf	?___wmul,w
  7993  0F38  0731               	addwf	??_UpdataHandPosition+4,w
  7994  0F39  00B3               	movwf	??_UpdataHandPosition+6
  7995  0F3A  0821               	movf	?___wmul+1,w
  7996  0F3B  3D32               	addwfc	??_UpdataHandPosition+5,w
  7997  0F3C  00B4               	movwf	??_UpdataHandPosition+7
  7998  0F3D  082D               	movf	??_UpdataHandPosition,w
  7999  0F3E  0733               	addwf	??_UpdataHandPosition+6,w
  8000  0F3F  00A6               	movwf	CorrectPosition@pos
  8001  0F40  082E               	movf	??_UpdataHandPosition+1,w
  8002  0F41  3D34               	addwfc	??_UpdataHandPosition+7,w
  8003  0F42  00A7               	movwf	CorrectPosition@pos+1
  8004  0F43  0838               	movf	UpdataHandPosition@motor_no,w
  8005  0F44  00B5               	movwf	??_UpdataHandPosition+8
  8006  0F45  01B6               	clrf	??_UpdataHandPosition+9
  8007  0F46  35B5               	lslf	??_UpdataHandPosition+8,f
  8008  0F47  0DB6               	rlf	??_UpdataHandPosition+9,f
  8009  0F48  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8010  0F49  0735               	addwf	??_UpdataHandPosition+8,w
  8011  0F4A  0084               	movwf	4
  8012  0F4B  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8013  0F4C  3D36               	addwfc	??_UpdataHandPosition+9,w
  8014  0F4D  0085               	movwf	5
  8015  0F4E  3F00               	moviw [0]fsr0
  8016  0F4F  00A8               	movwf	CorrectPosition@max
  8017  0F50  3F01               	moviw [1]fsr0
  8018  0F51  00A9               	movwf	CorrectPosition@max+1
  8019  0F52  3188  205E  318E   	fcall	_CorrectPosition
  8020                           
  8021                           ;MotorDrive.c: 2417:     }
  8022  0F55  3001               	movlw	1
  8023  0F56  00AD               	movwf	??_UpdataHandPosition
  8024  0F57  082D               	movf	??_UpdataHandPosition,w
  8025  0F58  07B7               	addwf	UpdataHandPosition@i,f
  8026  0F59  2EE6               	goto	l6028
  8027  0F5A                     __end_of_UpdataHandPosition:
  8028                           
  8029                           	psect	text36
  8030  13AE                     __ptext36:	
  8031 ;; *************** function _SetMotorBitMotorNo *****************
  8032 ;; Defined at:
  8033 ;;		line 2637 in file "MotorDrive.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  motor_no        1    wreg     unsigned char 
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      void 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0
  8042 ;; Tracked objects:
  8043 ;;		On entry : 1F/0
  8044 ;;		On exit  : 1F/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8047 ;;      Params:         0       0       0       0       0       0       0       0
  8048 ;;      Locals:         0       1       0       0       0       0       0       0
  8049 ;;      Temps:          0       2       0       0       0       0       0       0
  8050 ;;      Totals:         0       3       0       0       0       0       0       0
  8051 ;;Total ram usage:        3 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    5
  8054 ;; This function calls:
  8055 ;;		Nothing
  8056 ;; This function is called by:
  8057 ;;		_AfterDetectedLoadPosition
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function _SetMotorBitMotorNo
  8063  13AE                     _SetMotorBitMotorNo:
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _SetMotorBitMotorNo: [wreg+status,2+status,0]
  8067                           ;SetMotorBitMotorNo@motor_no stored from wreg
  8068  13AE  00A2               	movwf	SetMotorBitMotorNo@motor_no
  8069                           
  8070                           ;MotorDrive.c: 2637: void SetMotorBitMotorNo(UB motor_no);MotorDrive.c: 2638: {;MotorDri
      +                          ve.c: 2639:     motorNoOperation = motor_no;
  8071  13AF  0822               	movf	SetMotorBitMotorNo@motor_no,w
  8072  13B0  00A0               	movwf	??_SetMotorBitMotorNo
  8073  13B1  0820               	movf	??_SetMotorBitMotorNo,w
  8074  13B2  00EB               	movwf	_motorNoOperation
  8075                           
  8076                           ;MotorDrive.c: 2640:     motorBitOperation = (UB) (0x01 << motor_no);
  8077  13B3  3001               	movlw	1
  8078  13B4  00A0               	movwf	??_SetMotorBitMotorNo
  8079  13B5  0A22               	incf	SetMotorBitMotorNo@motor_no,w
  8080  13B6  2BB8               	goto	u4464
  8081  13B7                     u4465:
  8082  13B7  35A0               	lslf	??_SetMotorBitMotorNo,f
  8083  13B8                     u4464:
  8084  13B8  0B89               	decfsz	9,f
  8085  13B9  2BB7               	goto	u4465
  8086  13BA  0820               	movf	??_SetMotorBitMotorNo,w
  8087  13BB  00A1               	movwf	??_SetMotorBitMotorNo+1
  8088  13BC  0821               	movf	??_SetMotorBitMotorNo+1,w
  8089  13BD  00F4               	movwf	_motorBitOperation
  8090  13BE  0008               	return
  8091  13BF                     __end_of_SetMotorBitMotorNo:
  8092                           
  8093                           	psect	text37
  8094  077D                     __ptext37:	
  8095 ;; *************** function _SaveLoadPosition *****************
  8096 ;; Defined at:
  8097 ;;		line 2469 in file "MotorDrive.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  motor_no        1    wreg     unsigned char 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  motor_no        1   22[BANK0 ] unsigned char 
  8102 ;;  i               1   23[BANK0 ] unsigned char 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      void 
  8105 ;; Registers used:
  8106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8107 ;; Tracked objects:
  8108 ;;		On entry : 1F/0
  8109 ;;		On exit  : 1F/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8112 ;;      Params:         0       0       0       0       0       0       0       0
  8113 ;;      Locals:         0       2       0       0       0       0       0       0
  8114 ;;      Temps:          0      16       0       0       0       0       0       0
  8115 ;;      Totals:         0      18       0       0       0       0       0       0
  8116 ;;Total ram usage:       18 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    6
  8119 ;; This function calls:
  8120 ;;		___bmul
  8121 ;;		___wmul
  8122 ;; This function is called by:
  8123 ;;		_AfterDetectedLoadPosition
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           
  8128                           ;psect for function _SaveLoadPosition
  8129  077D                     _SaveLoadPosition:
  8130                           
  8131                           ;incstack = 0
  8132                           ; Regs used in _SaveLoadPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8133                           ;SaveLoadPosition@motor_no stored from wreg
  8134  077D  00B6               	movwf	SaveLoadPosition@motor_no
  8135                           
  8136                           ;MotorDrive.c: 2469: void SaveLoadPosition(UB motor_no);MotorDrive.c: 2470: {;MotorDrive
      +                          .c: 2471:     UB i;;MotorDrive.c: 2473:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) 
      +                          - 2 ); i++) {
  8137  077E  01B7               	clrf	SaveLoadPosition@i
  8138  077F                     l6036:
  8139                           
  8140                           ;MotorDrive.c: 2474:         loadPosition[ motor_no ][ i ] = detectLoadPosition[ motor_n
      +                          o ][ i ];
  8141  077F  0837               	movf	SaveLoadPosition@i,w
  8142  0780  00A6               	movwf	??_SaveLoadPosition
  8143  0781  01A7               	clrf	??_SaveLoadPosition+1
  8144  0782  35A6               	lslf	??_SaveLoadPosition,f
  8145  0783  0DA7               	rlf	??_SaveLoadPosition+1,f
  8146  0784  0836               	movf	SaveLoadPosition@motor_no,w
  8147  0785  00A8               	movwf	??_SaveLoadPosition+2
  8148  0786  01A9               	clrf	??_SaveLoadPosition+3
  8149  0787  0828               	movf	??_SaveLoadPosition+2,w
  8150  0788  00A0               	movwf	___wmul@multiplier
  8151  0789  0829               	movf	??_SaveLoadPosition+3,w
  8152  078A  00A1               	movwf	___wmul@multiplier+1
  8153  078B  302E               	movlw	46
  8154  078C  00A2               	movwf	___wmul@multiplicand
  8155  078D  3000               	movlw	0
  8156  078E  00A3               	movwf	___wmul@multiplicand+1
  8157  078F  3196  2636  3187   	fcall	___wmul
  8158  0792  3094               	movlw	148
  8159  0793  00AA               	movwf	??_SaveLoadPosition+4
  8160  0794  3021               	movlw	33
  8161  0795  00AB               	movwf	??_SaveLoadPosition+5
  8162  0796  0820               	movf	?___wmul,w
  8163  0797  072A               	addwf	??_SaveLoadPosition+4,w
  8164  0798  00AC               	movwf	??_SaveLoadPosition+6
  8165  0799  0821               	movf	?___wmul+1,w
  8166  079A  3D2B               	addwfc	??_SaveLoadPosition+5,w
  8167  079B  00AD               	movwf	??_SaveLoadPosition+7
  8168  079C  0826               	movf	??_SaveLoadPosition,w
  8169  079D  072C               	addwf	??_SaveLoadPosition+6,w
  8170  079E  0086               	movwf	6
  8171  079F  0827               	movf	??_SaveLoadPosition+1,w
  8172  07A0  3D2D               	addwfc	??_SaveLoadPosition+7,w
  8173  07A1  0087               	movwf	7
  8174  07A2  0837               	movf	SaveLoadPosition@i,w
  8175  07A3  00AE               	movwf	??_SaveLoadPosition+8
  8176  07A4  01AF               	clrf	??_SaveLoadPosition+9
  8177  07A5  35AE               	lslf	??_SaveLoadPosition+8,f
  8178  07A6  0DAF               	rlf	??_SaveLoadPosition+9,f
  8179  07A7  0836               	movf	SaveLoadPosition@motor_no,w
  8180  07A8  00B0               	movwf	??_SaveLoadPosition+10
  8181  07A9  01B1               	clrf	??_SaveLoadPosition+11
  8182  07AA  0830               	movf	??_SaveLoadPosition+10,w
  8183  07AB  00A0               	movwf	___wmul@multiplier
  8184  07AC  0831               	movf	??_SaveLoadPosition+11,w
  8185  07AD  00A1               	movwf	___wmul@multiplier+1
  8186  07AE  302E               	movlw	46
  8187  07AF  00A2               	movwf	___wmul@multiplicand
  8188  07B0  3000               	movlw	0
  8189  07B1  00A3               	movwf	___wmul@multiplicand+1
  8190  07B2  3196  2636  3187   	fcall	___wmul
  8191  07B5  3038               	movlw	56
  8192  07B6  00B2               	movwf	??_SaveLoadPosition+12
  8193  07B7  3021               	movlw	33
  8194  07B8  00B3               	movwf	??_SaveLoadPosition+13
  8195  07B9  0820               	movf	?___wmul,w
  8196  07BA  0732               	addwf	??_SaveLoadPosition+12,w
  8197  07BB  00B4               	movwf	??_SaveLoadPosition+14
  8198  07BC  0821               	movf	?___wmul+1,w
  8199  07BD  3D33               	addwfc	??_SaveLoadPosition+13,w
  8200  07BE  00B5               	movwf	??_SaveLoadPosition+15
  8201  07BF  082E               	movf	??_SaveLoadPosition+8,w
  8202  07C0  0734               	addwf	??_SaveLoadPosition+14,w
  8203  07C1  0084               	movwf	4
  8204  07C2  082F               	movf	??_SaveLoadPosition+9,w
  8205  07C3  3D35               	addwfc	??_SaveLoadPosition+15,w
  8206  07C4  0085               	movwf	5
  8207  07C5  3F40               	moviw [0]fsr1
  8208  07C6  3F80               	movwi [0]fsr0
  8209  07C7  3F41               	moviw [1]fsr1
  8210  07C8  3F81               	movwi [1]fsr0
  8211                           
  8212                           ;MotorDrive.c: 2475:         loadPositionType[ motor_no ][ i ] = detectLoadPositionType[
      +                           motor_no ][ i ];
  8213  07C9  3017               	movlw	23
  8214  07CA  00A6               	movwf	??_SaveLoadPosition
  8215  07CB  0826               	movf	??_SaveLoadPosition,w
  8216  07CC  00A0               	movwf	___bmul@multiplicand
  8217  07CD  0836               	movf	SaveLoadPosition@motor_no,w
  8218  07CE  3193  239D  3187   	fcall	___bmul
  8219  07D1  3E2E               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8220  07D2  0737               	addwf	SaveLoadPosition@i,w
  8221  07D3  00A7               	movwf	??_SaveLoadPosition+1
  8222  07D4  0827               	movf	??_SaveLoadPosition+1,w
  8223  07D5  0086               	movwf	6
  8224  07D6  3001               	movlw	1	; select bank2/3
  8225  07D7  0087               	movwf	7
  8226  07D8  0801               	movf	1,w
  8227  07D9  00A8               	movwf	??_SaveLoadPosition+2
  8228  07DA  3017               	movlw	23
  8229  07DB  00A9               	movwf	??_SaveLoadPosition+3
  8230  07DC  0829               	movf	??_SaveLoadPosition+3,w
  8231  07DD  00A0               	movwf	___bmul@multiplicand
  8232  07DE  0836               	movf	SaveLoadPosition@motor_no,w
  8233  07DF  3193  239D  3187   	fcall	___bmul
  8234  07E2  3EA0               	addlw	(low (_loadPositionType| (0+256)))& (0+255)
  8235  07E3  0737               	addwf	SaveLoadPosition@i,w
  8236  07E4  00AA               	movwf	??_SaveLoadPosition+4
  8237  07E5  082A               	movf	??_SaveLoadPosition+4,w
  8238  07E6  0086               	movwf	6
  8239  07E7  3001               	movlw	1	; select bank3/4
  8240  07E8  0087               	movwf	7
  8241  07E9  0828               	movf	??_SaveLoadPosition+2,w
  8242  07EA  0081               	movwf	1
  8243                           
  8244                           ;MotorDrive.c: 2476:     }
  8245  07EB  3001               	movlw	1
  8246  07EC  00A6               	movwf	??_SaveLoadPosition
  8247  07ED  0826               	movf	??_SaveLoadPosition,w
  8248  07EE  07B7               	addwf	SaveLoadPosition@i,f
  8249  07EF  3017               	movlw	23
  8250  07F0  0237               	subwf	SaveLoadPosition@i,w
  8251  07F1  1C03               	skipc
  8252  07F2  2F7F               	goto	l6036
  8253                           
  8254                           ;MotorDrive.c: 2478:     loadPositionIndex[ motor_no ] = detectLoadPositionIndex[ motor_
      +                          no ];
  8255  07F3  0836               	movf	SaveLoadPosition@motor_no,w
  8256  07F4  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8257  07F5  0086               	movwf	6
  8258  07F6  0187               	clrf	7
  8259  07F7  0801               	movf	1,w
  8260  07F8  00A6               	movwf	??_SaveLoadPosition
  8261  07F9  0836               	movf	SaveLoadPosition@motor_no,w
  8262  07FA  3EBA               	addlw	(low (_loadPositionIndex| 0))& (0+255)
  8263  07FB  0086               	movwf	6
  8264  07FC  0187               	clrf	7
  8265  07FD  0826               	movf	??_SaveLoadPosition,w
  8266  07FE  0081               	movwf	1
  8267  07FF  0008               	return
  8268  0800                     __end_of_SaveLoadPosition:
  8269                           
  8270                           	psect	text38
  8271  1486                     __ptext38:	
  8272 ;; *************** function _MoveTargetPosition *****************
  8273 ;; Defined at:
  8274 ;;		line 2519 in file "MotorDrive.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;  motor_no        1    wreg     unsigned char 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  motor_no        1   28[BANK0 ] unsigned char 
  8279 ;; Return value:  Size  Location     Type
  8280 ;;                  1    wreg      void 
  8281 ;; Registers used:
  8282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8283 ;; Tracked objects:
  8284 ;;		On entry : 1F/0
  8285 ;;		On exit  : 1F/0
  8286 ;;		Unchanged: 0/0
  8287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8288 ;;      Params:         0       0       0       0       0       0       0       0
  8289 ;;      Locals:         0       1       0       0       0       0       0       0
  8290 ;;      Temps:          0       1       0       0       0       0       0       0
  8291 ;;      Totals:         0       2       0       0       0       0       0       0
  8292 ;;Total ram usage:        2 bytes
  8293 ;; Hardware stack levels used:    1
  8294 ;; Hardware stack levels required when called:    8
  8295 ;; This function calls:
  8296 ;;		_CalcMotorStepCounter
  8297 ;;		_SetMotorFrequency
  8298 ;;		_SetMotorStart
  8299 ;; This function is called by:
  8300 ;;		_AfterDetectedLoadPosition
  8301 ;;		_VerifyHandPosition_LoadPosition
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function _MoveTargetPosition
  8307  1486                     _MoveTargetPosition:
  8308                           
  8309                           ;incstack = 0
  8310                           ; Regs used in _MoveTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8311                           ;MoveTargetPosition@motor_no stored from wreg
  8312  1486  00BC               	movwf	MoveTargetPosition@motor_no
  8313                           
  8314                           ;MotorDrive.c: 2519: void MoveTargetPosition(UB motor_no);MotorDrive.c: 2520: {;MotorDri
      +                          ve.c: 2522:     CalcMotorStepCounter(motor_no);
  8315  1487  083C               	movf	MoveTargetPosition@motor_no,w
  8316  1488  3185  25F0  3194   	fcall	_CalcMotorStepCounter
  8317                           
  8318                           ;MotorDrive.c: 2525:     SetMotorFrequency(motor_no, FREQ_SET_SELF_CONTROL_NORMAL, 41);
  8319  148B  0020               	movlb	0	; select bank0
  8320  148C  01A0               	clrf	SetMotorFrequency@type
  8321  148D  3029               	movlw	41
  8322  148E  00BB               	movwf	??_MoveTargetPosition
  8323  148F  083B               	movf	??_MoveTargetPosition,w
  8324  1490  00A1               	movwf	SetMotorFrequency@set_freq
  8325  1491  083C               	movf	MoveTargetPosition@motor_no,w
  8326  1492  3188  20D3  3194   	fcall	_SetMotorFrequency
  8327                           
  8328                           ;MotorDrive.c: 2528:     SetMotorStart(motor_no);
  8329  1495  083C               	movf	MoveTargetPosition@motor_no,w
  8330  1496  3191  2172         	fcall	_SetMotorStart
  8331  1498  0008               	return
  8332  1499                     __end_of_MoveTargetPosition:
  8333                           
  8334                           	psect	text39
  8335  0F5A                     __ptext39:	
  8336 ;; *************** function _DetermineBasePosition *****************
  8337 ;; Defined at:
  8338 ;;		line 2354 in file "MotorDrive.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  motor_no        1    wreg     unsigned char 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  motor_no        1   24[BANK0 ] unsigned char 
  8343 ;;  load_pos_typ    2   21[BANK0 ] short 
  8344 ;;  base_pos_ind    1   23[BANK0 ] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      void 
  8347 ;; Registers used:
  8348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 1F/0
  8351 ;;		On exit  : 1F/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8354 ;;      Params:         0       0       0       0       0       0       0       0
  8355 ;;      Locals:         0       4       0       0       0       0       0       0
  8356 ;;      Temps:          0       8       0       0       0       0       0       0
  8357 ;;      Totals:         0      12       0       0       0       0       0       0
  8358 ;;Total ram usage:       12 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    6
  8361 ;; This function calls:
  8362 ;;		_CorrectPosition
  8363 ;;		___bmul
  8364 ;;		___wmul
  8365 ;; This function is called by:
  8366 ;;		_AfterDetectedLoadPosition
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           
  8371                           ;psect for function _DetermineBasePosition
  8372  0F5A                     _DetermineBasePosition:
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _DetermineBasePosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8376                           ;DetermineBasePosition@motor_no stored from wreg
  8377  0F5A  00B8               	movwf	DetermineBasePosition@motor_no
  8378                           
  8379                           ;MotorDrive.c: 2354: void DetermineBasePosition(UB motor_no);MotorDrive.c: 2355: {;Motor
      +                          Drive.c: 2356:     UB base_pos_index;;MotorDrive.c: 2357:     H load_pos_type;;MotorDriv
      +                          e.c: 2359:     base_pos_index = 0;
  8380  0F5B  01B7               	clrf	DetermineBasePosition@base_pos_index
  8381  0F5C                     l5990:
  8382                           
  8383                           ;MotorDrive.c: 2364:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8384  0F5C  3017               	movlw	23
  8385  0F5D  00AD               	movwf	??_DetermineBasePosition
  8386  0F5E  082D               	movf	??_DetermineBasePosition,w
  8387  0F5F  00A0               	movwf	___bmul@multiplicand
  8388  0F60  0838               	movf	DetermineBasePosition@motor_no,w
  8389  0F61  3193  239D  318F   	fcall	___bmul
  8390  0F64  3E2E               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8391  0F65  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8392  0F66  00AE               	movwf	??_DetermineBasePosition+1
  8393  0F67  082E               	movf	??_DetermineBasePosition+1,w
  8394  0F68  0086               	movwf	6
  8395  0F69  3001               	movlw	1	; select bank2/3
  8396  0F6A  0087               	movwf	7
  8397  0F6B  0801               	movf	1,w
  8398  0F6C  00AF               	movwf	??_DetermineBasePosition+2
  8399  0F6D  01B0               	clrf	??_DetermineBasePosition+3
  8400  0F6E  082F               	movf	??_DetermineBasePosition+2,w
  8401  0F6F  00B5               	movwf	DetermineBasePosition@load_pos_type
  8402  0F70  0830               	movf	??_DetermineBasePosition+3,w
  8403  0F71  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8404                           
  8405                           ;MotorDrive.c: 2365:         base_pos_index++;
  8406  0F72  3001               	movlw	1
  8407  0F73  00AD               	movwf	??_DetermineBasePosition
  8408  0F74  082D               	movf	??_DetermineBasePosition,w
  8409  0F75  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8410                           
  8411                           ;MotorDrive.c: 2367:         if (ID_DETECT_LOAD_ROUGH == load_pos_type) {
  8412  0F76  3002               	movlw	2
  8413  0F77  0635               	xorwf	DetermineBasePosition@load_pos_type,w
  8414  0F78  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8415  0F79  1D03               	btfss	3,2
  8416  0F7A  2F5C               	goto	l5990
  8417  0F7B                     l5998:
  8418                           
  8419                           ;MotorDrive.c: 2376:         load_pos_type = detectLoadPositionType[ motor_no ][ base_po
      +                          s_index ];
  8420  0F7B  3017               	movlw	23
  8421  0F7C  00AD               	movwf	??_DetermineBasePosition
  8422  0F7D  082D               	movf	??_DetermineBasePosition,w
  8423  0F7E  00A0               	movwf	___bmul@multiplicand
  8424  0F7F  0838               	movf	DetermineBasePosition@motor_no,w
  8425  0F80  3193  239D  318F   	fcall	___bmul
  8426  0F83  3E2E               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  8427  0F84  0737               	addwf	DetermineBasePosition@base_pos_index,w
  8428  0F85  00AE               	movwf	??_DetermineBasePosition+1
  8429  0F86  082E               	movf	??_DetermineBasePosition+1,w
  8430  0F87  0086               	movwf	6
  8431  0F88  3001               	movlw	1	; select bank2/3
  8432  0F89  0087               	movwf	7
  8433  0F8A  0801               	movf	1,w
  8434  0F8B  00AF               	movwf	??_DetermineBasePosition+2
  8435  0F8C  01B0               	clrf	??_DetermineBasePosition+3
  8436  0F8D  082F               	movf	??_DetermineBasePosition+2,w
  8437  0F8E  00B5               	movwf	DetermineBasePosition@load_pos_type
  8438  0F8F  0830               	movf	??_DetermineBasePosition+3,w
  8439  0F90  00B6               	movwf	DetermineBasePosition@load_pos_type+1
  8440                           
  8441                           ;MotorDrive.c: 2378:         if (ID_DETECT_LOAD_FINE == load_pos_type) {
  8442  0F91  0335               	decf	DetermineBasePosition@load_pos_type,w
  8443  0F92  0436               	iorwf	DetermineBasePosition@load_pos_type+1,w
  8444  0F93  1903               	btfsc	3,2
  8445  0F94  2FA3               	goto	l6010
  8446                           
  8447                           ;MotorDrive.c: 2383:         base_pos_index++;
  8448  0F95  3001               	movlw	1
  8449  0F96  00AD               	movwf	??_DetermineBasePosition
  8450  0F97  082D               	movf	??_DetermineBasePosition,w
  8451  0F98  07B7               	addwf	DetermineBasePosition@base_pos_index,f
  8452                           
  8453                           ;MotorDrive.c: 2384:         if (base_pos_index > detectLoadPositionIndex[ motor_no ]) {
  8454  0F99  0838               	movf	DetermineBasePosition@motor_no,w
  8455  0F9A  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  8456  0F9B  0086               	movwf	6
  8457  0F9C  0187               	clrf	7
  8458  0F9D  0837               	movf	DetermineBasePosition@base_pos_index,w
  8459  0F9E  0201               	subwf	1,w
  8460  0F9F  1803               	skipnc
  8461  0FA0  2F7B               	goto	l5998
  8462                           
  8463                           ;MotorDrive.c: 2385:             base_pos_index = 0;
  8464  0FA1  01B7               	clrf	DetermineBasePosition@base_pos_index
  8465  0FA2  2F7B               	goto	l5998
  8466  0FA3                     l6010:
  8467                           
  8468                           ;MotorDrive.c: 2389:     detectBasePosition[ motor_no ] = detectLoadPosition[ motor_no ]
      +                          [ base_pos_index ];
  8469  0FA3  0837               	movf	DetermineBasePosition@base_pos_index,w
  8470  0FA4  00AD               	movwf	??_DetermineBasePosition
  8471  0FA5  01AE               	clrf	??_DetermineBasePosition+1
  8472  0FA6  35AD               	lslf	??_DetermineBasePosition,f
  8473  0FA7  0DAE               	rlf	??_DetermineBasePosition+1,f
  8474  0FA8  0838               	movf	DetermineBasePosition@motor_no,w
  8475  0FA9  00AF               	movwf	??_DetermineBasePosition+2
  8476  0FAA  01B0               	clrf	??_DetermineBasePosition+3
  8477  0FAB  082F               	movf	??_DetermineBasePosition+2,w
  8478  0FAC  00A0               	movwf	___wmul@multiplier
  8479  0FAD  0830               	movf	??_DetermineBasePosition+3,w
  8480  0FAE  00A1               	movwf	___wmul@multiplier+1
  8481  0FAF  302E               	movlw	46
  8482  0FB0  00A2               	movwf	___wmul@multiplicand
  8483  0FB1  3000               	movlw	0
  8484  0FB2  00A3               	movwf	___wmul@multiplicand+1
  8485  0FB3  3196  2636  318F   	fcall	___wmul
  8486  0FB6  3094               	movlw	148
  8487  0FB7  00B1               	movwf	??_DetermineBasePosition+4
  8488  0FB8  3021               	movlw	33
  8489  0FB9  00B2               	movwf	??_DetermineBasePosition+5
  8490  0FBA  0820               	movf	?___wmul,w
  8491  0FBB  0731               	addwf	??_DetermineBasePosition+4,w
  8492  0FBC  00B3               	movwf	??_DetermineBasePosition+6
  8493  0FBD  0821               	movf	?___wmul+1,w
  8494  0FBE  3D32               	addwfc	??_DetermineBasePosition+5,w
  8495  0FBF  00B4               	movwf	??_DetermineBasePosition+7
  8496  0FC0  082D               	movf	??_DetermineBasePosition,w
  8497  0FC1  0733               	addwf	??_DetermineBasePosition+6,w
  8498  0FC2  0086               	movwf	6
  8499  0FC3  082E               	movf	??_DetermineBasePosition+1,w
  8500  0FC4  3D34               	addwfc	??_DetermineBasePosition+7,w
  8501  0FC5  0087               	movwf	7
  8502  0FC6  3538               	lslf	DetermineBasePosition@motor_no,w
  8503  0FC7  3E5C               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8504  0FC8  0084               	movwf	4
  8505  0FC9  3001               	movlw	1	; select bank2/3
  8506  0FCA  0085               	movwf	5
  8507  0FCB  3F40               	moviw [0]fsr1
  8508  0FCC  3F80               	movwi [0]fsr0
  8509  0FCD  3F41               	moviw [1]fsr1
  8510  0FCE  3F81               	movwi [1]fsr0
  8511                           
  8512                           ;MotorDrive.c: 2390:     detectBasePosition[ motor_no ] += offsetBasePosition[ motor_no 
      +                          ];
  8513  0FCF  0838               	movf	DetermineBasePosition@motor_no,w
  8514  0FD0  00AD               	movwf	??_DetermineBasePosition
  8515  0FD1  01AE               	clrf	??_DetermineBasePosition+1
  8516  0FD2  35AD               	lslf	??_DetermineBasePosition,f
  8517  0FD3  0DAE               	rlf	??_DetermineBasePosition+1,f
  8518  0FD4  304E               	movlw	low (_offsetBasePosition| (0+32768))
  8519  0FD5  072D               	addwf	??_DetermineBasePosition,w
  8520  0FD6  0084               	movwf	4
  8521  0FD7  3098               	movlw	high (_offsetBasePosition| (0+32768))
  8522  0FD8  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8523  0FD9  0085               	movwf	5
  8524  0FDA  3F00               	moviw [0]fsr0
  8525  0FDB  00AF               	movwf	??_DetermineBasePosition+2
  8526  0FDC  3F01               	moviw [1]fsr0
  8527  0FDD  00B0               	movwf	??_DetermineBasePosition+3
  8528  0FDE  3538               	lslf	DetermineBasePosition@motor_no,w
  8529  0FDF  3E5C               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8530  0FE0  0086               	movwf	6
  8531  0FE1  3001               	movlw	1	; select bank2/3
  8532  0FE2  0087               	movwf	7
  8533  0FE3  082F               	movf	??_DetermineBasePosition+2,w
  8534  0FE4  0781               	addwf	1,f
  8535  0FE5  3141               	addfsr 1,1
  8536  0FE6  0830               	movf	??_DetermineBasePosition+3,w
  8537  0FE7  3D81               	addwfc	1,f
  8538  0FE8  317F               	addfsr 1,-1
  8539                           
  8540                           ;MotorDrive.c: 2392:     CorrectPosition(&detectBasePosition[ motor_no ], TblMaxSteps[ m
      +                          otor_no ]);
  8541  0FE9  3538               	lslf	DetermineBasePosition@motor_no,w
  8542  0FEA  3E5C               	addlw	(low (_detectBasePosition| (0+256)))& (0+255)
  8543  0FEB  00A6               	movwf	CorrectPosition@pos
  8544  0FEC  3001               	movlw	1
  8545  0FED  00A7               	movwf	CorrectPosition@pos+1
  8546  0FEE  0838               	movf	DetermineBasePosition@motor_no,w
  8547  0FEF  00AD               	movwf	??_DetermineBasePosition
  8548  0FF0  01AE               	clrf	??_DetermineBasePosition+1
  8549  0FF1  35AD               	lslf	??_DetermineBasePosition,f
  8550  0FF2  0DAE               	rlf	??_DetermineBasePosition+1,f
  8551  0FF3  3056               	movlw	low (_TblMaxSteps| (0+32768))
  8552  0FF4  072D               	addwf	??_DetermineBasePosition,w
  8553  0FF5  0084               	movwf	4
  8554  0FF6  3098               	movlw	high (_TblMaxSteps| (0+32768))
  8555  0FF7  3D2E               	addwfc	??_DetermineBasePosition+1,w
  8556  0FF8  0085               	movwf	5
  8557  0FF9  3F00               	moviw [0]fsr0
  8558  0FFA  00A8               	movwf	CorrectPosition@max
  8559  0FFB  3F01               	moviw [1]fsr0
  8560  0FFC  00A9               	movwf	CorrectPosition@max+1
  8561  0FFD  3188  205E         	fcall	_CorrectPosition
  8562  0FFF  0008               	return
  8563  1000                     __end_of_DetermineBasePosition:
  8564                           
  8565                           	psect	text40
  8566  144F                     __ptext40:	
  8567 ;; *************** function _ActivateHandPosition *****************
  8568 ;; Defined at:
  8569 ;;		line 2489 in file "MotorDrive.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  motor_no        1    wreg     unsigned char 
  8572 ;; Auto vars:     Size  Location     Type
  8573 ;;  motor_no        1    2[BANK0 ] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      void 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2, status,0
  8578 ;; Tracked objects:
  8579 ;;		On entry : 1F/0
  8580 ;;		On exit  : 1F/1
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8583 ;;      Params:         0       0       0       0       0       0       0       0
  8584 ;;      Locals:         0       1       0       0       0       0       0       0
  8585 ;;      Temps:          0       2       0       0       0       0       0       0
  8586 ;;      Totals:         0       3       0       0       0       0       0       0
  8587 ;;Total ram usage:        3 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    5
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_AfterDetectedLoadPosition
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           
  8598                           ;psect for function _ActivateHandPosition
  8599  144F                     _ActivateHandPosition:
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _ActivateHandPosition: [wreg+status,2+status,0]
  8603                           ;ActivateHandPosition@motor_no stored from wreg
  8604  144F  00A2               	movwf	ActivateHandPosition@motor_no
  8605                           
  8606                           ;MotorDrive.c: 2489: void ActivateHandPosition(UB motor_no);MotorDrive.c: 2490: {;MotorD
      +                          rive.c: 2491:     motorBitOperation = (UB) (0x01 << motor_no);
  8607  1450  3001               	movlw	1
  8608  1451  00A0               	movwf	??_ActivateHandPosition
  8609  1452  0A22               	incf	ActivateHandPosition@motor_no,w
  8610  1453  2C55               	goto	u4524
  8611  1454                     u4525:
  8612  1454  35A0               	lslf	??_ActivateHandPosition,f
  8613  1455                     u4524:
  8614  1455  0B89               	decfsz	9,f
  8615  1456  2C54               	goto	u4525
  8616  1457  0820               	movf	??_ActivateHandPosition,w
  8617  1458  00A1               	movwf	??_ActivateHandPosition+1
  8618  1459  0821               	movf	??_ActivateHandPosition+1,w
  8619  145A  00F4               	movwf	_motorBitOperation
  8620                           
  8621                           ;MotorDrive.c: 2493:     handPositionActiveBit |= motorBitOperation;
  8622  145B  0874               	movf	_motorBitOperation,w
  8623  145C  00A0               	movwf	??_ActivateHandPosition
  8624  145D  0820               	movf	??_ActivateHandPosition,w
  8625  145E  0021               	movlb	1	; select bank1
  8626  145F  04D1               	iorwf	_handPositionActiveBit^(0+128),f
  8627  1460  0008               	return
  8628  1461                     __end_of_ActivateHandPosition:
  8629                           
  8630                           	psect	text41
  8631  1143                     __ptext41:	
  8632 ;; *************** function _SPI_ReadByte *****************
  8633 ;; Defined at:
  8634 ;;		line 136 in file "mcc_generated_files/spi.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;		None
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;		None
  8639 ;; Return value:  Size  Location     Type
  8640 ;;                  1    wreg      unsigned char 
  8641 ;; Registers used:
  8642 ;;		wreg
  8643 ;; Tracked objects:
  8644 ;;		On entry : 1F/0
  8645 ;;		On exit  : 1F/4
  8646 ;;		Unchanged: 0/0
  8647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8648 ;;      Params:         0       0       0       0       0       0       0       0
  8649 ;;      Locals:         0       0       0       0       0       0       0       0
  8650 ;;      Temps:          0       0       0       0       0       0       0       0
  8651 ;;      Totals:         0       0       0       0       0       0       0       0
  8652 ;;Total ram usage:        0 bytes
  8653 ;; Hardware stack levels used:    1
  8654 ;; Hardware stack levels required when called:    5
  8655 ;; This function calls:
  8656 ;;		Nothing
  8657 ;; This function is called by:
  8658 ;;		_SPIControl_RecieveComannd
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _SPI_ReadByte
  8664  1143                     _SPI_ReadByte:
  8665                           
  8666                           ;mcc_generated_files/spi.c: 138:     return SSP1BUF;
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _SPI_ReadByte: [wreg]
  8670  1143  0024               	movlb	4	; select bank4
  8671  1144  0811               	movf	17,w	;volatile
  8672  1145  0008               	return
  8673  1146                     __end_of_SPI_ReadByte:
  8674                           
  8675                           	psect	text42
  8676  0B1A                     __ptext42:	
  8677 ;; *************** function _SPIControl_ExecuteCommand *****************
  8678 ;; Defined at:
  8679 ;;		line 196 in file "spi_control.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  motor_select    1   36[BANK0 ] unsigned char 
  8684 ;;  cmd_type        1   35[BANK0 ] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  1    wreg      void 
  8687 ;; Registers used:
  8688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8689 ;; Tracked objects:
  8690 ;;		On entry : 1F/1
  8691 ;;		On exit  : 1C/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8694 ;;      Params:         0       0       0       0       0       0       0       0
  8695 ;;      Locals:         0       2       0       0       0       0       0       0
  8696 ;;      Temps:          0       3       0       0       0       0       0       0
  8697 ;;      Totals:         0       5       0       0       0       0       0       0
  8698 ;;Total ram usage:        5 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:   10
  8701 ;; This function calls:
  8702 ;;		_GetIsMotorActive
  8703 ;;		_SetAfterMotorStopFunc
  8704 ;;		_SpiCmdFunc_DisableExcitating
  8705 ;;		_SpiCmdFunc_EnableExcitating
  8706 ;;		_SpiCmdFunc_FwdPulseNormal
  8707 ;;		_SpiCmdFunc_FwdPulsePositionCtl
  8708 ;;		_SpiCmdFunc_FwdPulseWithCorrect
  8709 ;;		_SpiCmdFunc_FwdPulseWithShake
  8710 ;;		_SpiCmdFunc_RevPulseNormal
  8711 ;;		_SpiCmdFunc_RevPulsePositionCtl
  8712 ;;		_SpiCmdFunc_Search1008Position
  8713 ;;		_SpiCmdFunc_SearchBasePosition
  8714 ;;		_SpiCmdFunc_SearchLoadPosition
  8715 ;;		_SpiCmdFunc_StartDetectVrs
  8716 ;;		_SpiCmdFunc_StopDetectVrs
  8717 ;;		_SpiCmdFunc_Test
  8718 ;; This function is called by:
  8719 ;;		_SPIControl_RecieveComannd
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           
  8724                           ;psect for function _SPIControl_ExecuteCommand
  8725  0B1A                     _SPIControl_ExecuteCommand:
  8726                           
  8727                           ;spi_control.c: 198:     UB motor_select;;spi_control.c: 199:     UB cmd_type;;spi_contr
      +                          ol.c: 201:     motor_select = recieveCommand;
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _SPIControl_ExecuteCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8731  0B1A  084C               	movf	_recieveCommand^(0+128),w
  8732  0B1B  0020               	movlb	0	; select bank0
  8733  0B1C  00C0               	movwf	??_SPIControl_ExecuteCommand
  8734  0B1D  0840               	movf	??_SPIControl_ExecuteCommand,w
  8735  0B1E  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8736                           
  8737                           ;spi_control.c: 202:     motor_select &= 0xF0;
  8738  0B1F  30F0               	movlw	240
  8739  0B20  00C0               	movwf	??_SPIControl_ExecuteCommand
  8740  0B21  0840               	movf	??_SPIControl_ExecuteCommand,w
  8741  0B22  05C4               	andwf	SPIControl_ExecuteCommand@motor_select,f
  8742                           
  8743                           ;spi_control.c: 204:     cmd_type = recieveCommand;
  8744  0B23  0021               	movlb	1	; select bank1
  8745  0B24  084C               	movf	_recieveCommand^(0+128),w
  8746  0B25  0020               	movlb	0	; select bank0
  8747  0B26  00C0               	movwf	??_SPIControl_ExecuteCommand
  8748  0B27  0840               	movf	??_SPIControl_ExecuteCommand,w
  8749  0B28  00C3               	movwf	SPIControl_ExecuteCommand@cmd_type
  8750                           
  8751                           ;spi_control.c: 205:     cmd_type &= 0x0F;
  8752  0B29  300F               	movlw	15
  8753  0B2A  00C0               	movwf	??_SPIControl_ExecuteCommand
  8754  0B2B  0840               	movf	??_SPIControl_ExecuteCommand,w
  8755  0B2C  05C3               	andwf	SPIControl_ExecuteCommand@cmd_type,f
  8756                           
  8757                           ;spi_control.c: 207:     if ( ID_CMD_M0 == motor_select ) {
  8758  0B2D  30B0               	movlw	176
  8759  0B2E  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8760  0B2F  1D03               	btfss	3,2
  8761  0B30  2B33               	goto	l6558
  8762                           
  8763                           ;spi_control.c: 208:         motor_select = 0;
  8764  0B31  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8765                           
  8766                           ;spi_control.c: 209:     } else if ( ID_CMD_M1 == motor_select ) {
  8767  0B32  2B3E               	goto	l1302
  8768  0B33                     l6558:
  8769  0B33  30C0               	movlw	192
  8770  0B34  0644               	xorwf	SPIControl_ExecuteCommand@motor_select,w
  8771  0B35  1D03               	btfss	3,2
  8772  0B36  2B3A               	goto	l6562
  8773                           
  8774                           ;spi_control.c: 210:         motor_select = 1;
  8775  0B37  01C4               	clrf	SPIControl_ExecuteCommand@motor_select
  8776  0B38  0AC4               	incf	SPIControl_ExecuteCommand@motor_select,f
  8777                           
  8778                           ;spi_control.c: 211:     } else {
  8779  0B39  2B3E               	goto	l1302
  8780  0B3A                     l6562:
  8781                           
  8782                           ;spi_control.c: 212:         motor_select = 0xFF;
  8783  0B3A  30FF               	movlw	255
  8784  0B3B  00C0               	movwf	??_SPIControl_ExecuteCommand
  8785  0B3C  0840               	movf	??_SPIControl_ExecuteCommand,w
  8786  0B3D  00C4               	movwf	SPIControl_ExecuteCommand@motor_select
  8787  0B3E                     l1302:
  8788                           
  8789                           ;spi_control.c: 215:  if ( ( ID_CMD_TYPE_MAX > cmd_type ) && ( 0xFF != motor_select ) ) 
      +                          {
  8790  0B3E  300E               	movlw	14
  8791  0B3F  0243               	subwf	SPIControl_ExecuteCommand@cmd_type,w
  8792  0B40  1803               	skipnc
  8793  0B41  0008               	return
  8794  0B42  0A44               	incf	SPIControl_ExecuteCommand@motor_select,w
  8795  0B43  1903               	btfsc	3,2
  8796  0B44  0008               	return
  8797                           
  8798                           ;spi_control.c: 216:   if ( ID_CMD_FWD_WITH_CORRECT == cmd_type ) {
  8799  0B45  3006               	movlw	6
  8800  0B46  0643               	xorwf	SPIControl_ExecuteCommand@cmd_type,w
  8801  0B47  1D03               	btfss	3,2
  8802  0B48  2B5E               	goto	l6570
  8803                           
  8804                           ;spi_control.c: 218:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8805  0B49  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8806  0B4A  00C0               	movwf	??_SPIControl_ExecuteCommand
  8807  0B4B  0840               	movf	??_SPIControl_ExecuteCommand,w
  8808  0B4C  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8809  0B4D  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8810  0B4E  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8811  0B4F  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8812  0B50  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8813  0B51  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8814  0B52  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8815  0B53  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8816  0B54  0084               	movwf	4
  8817  0B55  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8818  0B56  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8819  0B57  0085               	movwf	5
  8820  0B58  3F01               	moviw [1]fsr0
  8821  0B59  008A               	movwf	10
  8822  0B5A  3F00               	moviw [0]fsr0
  8823  0B5B  000A               	callw
  8824  0B5C  318B               	pagesel	$
  8825                           
  8826                           ;spi_control.c: 219:   } else {
  8827  0B5D  0008               	return
  8828  0B5E                     l6570:
  8829                           
  8830                           ;spi_control.c: 221:    if ( GetIsMotorActive( motor_select ) ) {
  8831  0B5E  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8832  0B5F  3194  24E8  318B   	fcall	_GetIsMotorActive
  8833  0B62  3A00               	xorlw	0
  8834  0B63  1903               	skipnz
  8835  0B64  2B78               	goto	l6574
  8836                           
  8837                           ;spi_control.c: 223:        SetAfterMotorStopFunc( motor_select, SpiCmmandFunction[ cmd_
      +                          type ] );
  8838  0B65  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8839  0B66  00C0               	movwf	??_SPIControl_ExecuteCommand
  8840  0B67  01C1               	clrf	??_SPIControl_ExecuteCommand+1
  8841  0B68  35C0               	lslf	??_SPIControl_ExecuteCommand,f
  8842  0B69  0DC1               	rlf	??_SPIControl_ExecuteCommand+1,f
  8843  0B6A  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8844  0B6B  0740               	addwf	??_SPIControl_ExecuteCommand,w
  8845  0B6C  0084               	movwf	4
  8846  0B6D  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8847  0B6E  3D41               	addwfc	??_SPIControl_ExecuteCommand+1,w
  8848  0B6F  0085               	movwf	5
  8849  0B70  3F00               	moviw [0]fsr0
  8850  0B71  00A0               	movwf	SetAfterMotorStopFunc@func
  8851  0B72  3F01               	moviw [1]fsr0
  8852  0B73  00A1               	movwf	SetAfterMotorStopFunc@func+1
  8853  0B74  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8854  0B75  3191  217C         	fcall	_SetAfterMotorStopFunc
  8855                           
  8856                           ;spi_control.c: 224:    } else {
  8857  0B77  0008               	return
  8858  0B78                     l6574:
  8859                           
  8860                           ;spi_control.c: 226:        SpiCmmandFunction[ cmd_type ]( motor_select );
  8861  0B78  0844               	movf	SPIControl_ExecuteCommand@motor_select,w
  8862  0B79  00C0               	movwf	??_SPIControl_ExecuteCommand
  8863  0B7A  0840               	movf	??_SPIControl_ExecuteCommand,w
  8864  0B7B  00BD               	movwf	SpiCmdFunc_Search1008Position@motor_no
  8865  0B7C  0843               	movf	SPIControl_ExecuteCommand@cmd_type,w
  8866  0B7D  00C1               	movwf	??_SPIControl_ExecuteCommand+1
  8867  0B7E  01C2               	clrf	??_SPIControl_ExecuteCommand+2
  8868  0B7F  35C1               	lslf	??_SPIControl_ExecuteCommand+1,f
  8869  0B80  0DC2               	rlf	??_SPIControl_ExecuteCommand+2,f
  8870  0B81  3000               	movlw	low (_SpiCmmandFunction| (0+32768))
  8871  0B82  0741               	addwf	??_SPIControl_ExecuteCommand+1,w
  8872  0B83  0084               	movwf	4
  8873  0B84  3098               	movlw	high (_SpiCmmandFunction| (0+32768))
  8874  0B85  3D42               	addwfc	??_SPIControl_ExecuteCommand+2,w
  8875  0B86  0085               	movwf	5
  8876  0B87  3F01               	moviw [1]fsr0
  8877  0B88  008A               	movwf	10
  8878  0B89  3F00               	moviw [0]fsr0
  8879  0B8A  000A               	callw
  8880  0B8B  318B               	pagesel	$
  8881  0B8C  0008               	return
  8882  0B8D                     __end_of_SPIControl_ExecuteCommand:
  8883                           
  8884                           	psect	text43
  8885  1540                     __ptext43:	
  8886 ;; *************** function _SetMotorStopSPK *****************
  8887 ;; Defined at:
  8888 ;;		line 1459 in file "MotorDrive.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;		None
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;		None
  8893 ;; Return value:  Size  Location     Type
  8894 ;;                  1    wreg      void 
  8895 ;; Registers used:
  8896 ;;		wreg, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 1D/2
  8899 ;;		On exit  : 1F/2
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8902 ;;      Params:         0       0       0       0       0       0       0       0
  8903 ;;      Locals:         0       0       0       0       0       0       0       0
  8904 ;;      Temps:          0       0       0       0       0       0       0       0
  8905 ;;      Totals:         0       0       0       0       0       0       0       0
  8906 ;;Total ram usage:        0 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    7
  8909 ;; This function calls:
  8910 ;;		_SetExcitatingOutOffData
  8911 ;;		_SpkComparatorOff
  8912 ;;		_TMR2_SetInterruptHandler
  8913 ;;		_TMR2_StopTimer
  8914 ;; This function is called by:
  8915 ;;		_SpiCmdFunc_StopDetectVrs
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           
  8920                           ;psect for function _SetMotorStopSPK
  8921  1540                     _SetMotorStopSPK:
  8922                           
  8923                           ;MotorDrive.c: 1462:     TMR2_StopTimer();
  8924                           
  8925                           ;incstack = 0
  8926                           ; Regs used in _SetMotorStopSPK: [wreg+status,2+status,0+pclath+cstack]
  8927  1540  3191  2140  3195   	fcall	_TMR2_StopTimer
  8928                           
  8929                           ;MotorDrive.c: 1464:     PIR1bits.TMR2IF = 0;
  8930  1543  1091               	bcf	17,1	;volatile
  8931                           
  8932                           ;MotorDrive.c: 1466:     SpkComparatorOff();
  8933  1544  3192  2262  3195   	fcall	_SpkComparatorOff
  8934                           
  8935                           ;MotorDrive.c: 1467:     excitatingTime = 0;
  8936  1547  0022               	movlb	2	; select bank2
  8937  1548  01AC               	clrf	_excitatingTime^(0+256)
  8938  1549  01AD               	clrf	(_excitatingTime+1)^(0+256)
  8939                           
  8940                           ;MotorDrive.c: 1468:     excitatingOffMaskTime = 0;
  8941  154A  0021               	movlb	1	; select bank1
  8942  154B  01DF               	clrf	_excitatingOffMaskTime^(0+128)
  8943                           
  8944                           ;MotorDrive.c: 1470:     SetExcitatingOutOffData();
  8945  154C  3196  26A5  3195   	fcall	_SetExcitatingOutOffData
  8946                           
  8947                           ;MotorDrive.c: 1473:     TMR2_SetInterruptHandler(TMR2_Interrupt);
  8948  154F  30F9               	movlw	low _TMR2_Interrupt
  8949  1550  0020               	movlb	0	; select bank0
  8950  1551  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  8951  1552  3003               	movlw	high _TMR2_Interrupt
  8952  1553  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  8953  1554  3191  216A         	fcall	_TMR2_SetInterruptHandler
  8954  1556  0008               	return
  8955  1557                     __end_of_SetMotorStopSPK:
  8956                           
  8957                           	psect	text44
  8958  1140                     __ptext44:	
  8959 ;; *************** function _TMR2_StopTimer *****************
  8960 ;; Defined at:
  8961 ;;		line 93 in file "mcc_generated_files/tmr2.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;		None
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		None
  8970 ;; Tracked objects:
  8971 ;;		On entry : 1D/2
  8972 ;;		On exit  : 1F/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8975 ;;      Params:         0       0       0       0       0       0       0       0
  8976 ;;      Locals:         0       0       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0       0
  8978 ;;      Totals:         0       0       0       0       0       0       0       0
  8979 ;;Total ram usage:        0 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    5
  8982 ;; This function calls:
  8983 ;;		Nothing
  8984 ;; This function is called by:
  8985 ;;		_SetMotorStopSPK
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           
  8990                           ;psect for function _TMR2_StopTimer
  8991  1140                     _TMR2_StopTimer:
  8992                           
  8993                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in _TMR2_StopTimer: []
  8997  1140  0020               	movlb	0	; select bank0
  8998  1141  111C               	bcf	28,2	;volatile
  8999  1142  0008               	return
  9000  1143                     __end_of_TMR2_StopTimer:
  9001                           
  9002                           	psect	text45
  9003  1262                     __ptext45:	
  9004 ;; *************** function _SpkComparatorOff *****************
  9005 ;; Defined at:
  9006 ;;		line 2727 in file "MotorDrive.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		wreg
  9015 ;; Tracked objects:
  9016 ;;		On entry : 1F/0
  9017 ;;		On exit  : 1F/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9020 ;;      Params:         0       0       0       0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0
  9023 ;;      Totals:         0       0       0       0       0       0       0       0
  9024 ;;Total ram usage:        0 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    5
  9027 ;; This function calls:
  9028 ;;		Nothing
  9029 ;; This function is called by:
  9030 ;;		_SetMotorStopSPK
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           
  9035                           ;psect for function _SpkComparatorOff
  9036  1262                     _SpkComparatorOff:
  9037                           
  9038                           ;MotorDrive.c: 2729:     CM1CON0 = 0x14;
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in _SpkComparatorOff: [wreg]
  9042  1262  3014               	movlw	20
  9043  1263  0022               	movlb	2	; select bank2
  9044  1264  0091               	movwf	17	;volatile
  9045                           
  9046                           ;MotorDrive.c: 2730:     CM1CON1 = 0x90;
  9047  1265  3090               	movlw	144
  9048  1266  0092               	movwf	18	;volatile
  9049                           
  9050                           ;MotorDrive.c: 2732:     CM2CON0 = 0x14;
  9051  1267  3014               	movlw	20
  9052  1268  0093               	movwf	19	;volatile
  9053                           
  9054                           ;MotorDrive.c: 2733:     CM2CON1 = 0x90;
  9055  1269  3090               	movlw	144
  9056  126A  0094               	movwf	20	;volatile
  9057                           
  9058                           ;MotorDrive.c: 2735:     PIR2bits.C1IF = 0;
  9059  126B  0020               	movlb	0	; select bank0
  9060  126C  1292               	bcf	18,5	;volatile
  9061                           
  9062                           ;MotorDrive.c: 2736:     PIR2bits.C2IF = 0;
  9063  126D  1312               	bcf	18,6	;volatile
  9064  126E  0008               	return
  9065  126F                     __end_of_SpkComparatorOff:
  9066                           
  9067                           	psect	text46
  9068  16A5                     __ptext46:	
  9069 ;; *************** function _SetExcitatingOutOffData *****************
  9070 ;; Defined at:
  9071 ;;		line 2803 in file "MotorDrive.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;		None
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;		None
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  1    wreg      void 
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0, pclath, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 1F/1
  9082 ;;		On exit  : 1F/2
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9085 ;;      Params:         0       0       0       0       0       0       0       0
  9086 ;;      Locals:         0       0       0       0       0       0       0       0
  9087 ;;      Temps:          0       1       0       0       0       0       0       0
  9088 ;;      Totals:         0       1       0       0       0       0       0       0
  9089 ;;Total ram usage:        1 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    6
  9092 ;; This function calls:
  9093 ;;		_SetOutPutLATX
  9094 ;; This function is called by:
  9095 ;;		_SetMotorStopSPK
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           
  9100                           ;psect for function _SetExcitatingOutOffData
  9101  16A5                     _SetExcitatingOutOffData:
  9102                           
  9103                           ;MotorDrive.c: 2807:     dataTRISAWork_M0 = 0x00;
  9104                           
  9105                           ;incstack = 0
  9106                           ; Regs used in _SetExcitatingOutOffData: [wreg+status,2+status,0+pclath+cstack]
  9107  16A5  0020               	movlb	0	; select bank0
  9108  16A6  01E1               	clrf	_dataTRISAWork_M0
  9109                           
  9110                           ;MotorDrive.c: 2808:     dataTRISBWork_M0 = 0x00;
  9111  16A7  01E0               	clrf	_dataTRISBWork_M0
  9112                           
  9113                           ;MotorDrive.c: 2809:     dataTRISCWork_M0 = 0x20;
  9114  16A8  3020               	movlw	32
  9115  16A9  00A1               	movwf	??_SetExcitatingOutOffData
  9116  16AA  0821               	movf	??_SetExcitatingOutOffData,w
  9117  16AB  00DF               	movwf	_dataTRISCWork_M0
  9118                           
  9119                           ;MotorDrive.c: 2811:     dataTRISAWork_M1 = 0x00;
  9120  16AC  01DE               	clrf	_dataTRISAWork_M1
  9121                           
  9122                           ;MotorDrive.c: 2812:     dataTRISBWork_M1 = 0x00;
  9123  16AD  01DD               	clrf	_dataTRISBWork_M1
  9124                           
  9125                           ;MotorDrive.c: 2813:     dataTRISCWork_M1 = 0x10;
  9126  16AE  3010               	movlw	16
  9127  16AF  00A1               	movwf	??_SetExcitatingOutOffData
  9128  16B0  0821               	movf	??_SetExcitatingOutOffData,w
  9129  16B1  00DC               	movwf	_dataTRISCWork_M1
  9130                           
  9131                           ;MotorDrive.c: 2815:     pulseOutLATAWork_M0 = 0;
  9132  16B2  01E7               	clrf	_pulseOutLATAWork_M0
  9133                           
  9134                           ;MotorDrive.c: 2816:     pulseOutLATBWork_M0 = 0;
  9135  16B3  01E6               	clrf	_pulseOutLATBWork_M0
  9136                           
  9137                           ;MotorDrive.c: 2817:     pulseOutLATCWork_M0 = 0;
  9138  16B4  01E5               	clrf	_pulseOutLATCWork_M0
  9139                           
  9140                           ;MotorDrive.c: 2819:     pulseOutLATAWork_M1 = 0;
  9141  16B5  0021               	movlb	1	; select bank1
  9142  16B6  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
  9143                           
  9144                           ;MotorDrive.c: 2820:     pulseOutLATBWork_M1 = 0;
  9145  16B7  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
  9146                           
  9147                           ;MotorDrive.c: 2821:     pulseOutLATCWork_M1 = 0;
  9148  16B8  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
  9149                           
  9150                           ;MotorDrive.c: 2823:     SetOutPutLATX();
  9151  16B9  318A  22A8         	fcall	_SetOutPutLATX
  9152                           
  9153                           ;MotorDrive.c: 2824:     LATA &= ~0x04;
  9154  16BB  30FB               	movlw	251
  9155  16BC  0020               	movlb	0	; select bank0
  9156  16BD  00A1               	movwf	??_SetExcitatingOutOffData
  9157  16BE  0821               	movf	??_SetExcitatingOutOffData,w
  9158  16BF  0022               	movlb	2	; select bank2
  9159  16C0  058C               	andwf	12,f	;volatile
  9160  16C1  0008               	return
  9161  16C2                     __end_of_SetExcitatingOutOffData:
  9162                           
  9163                           	psect	text47
  9164  17B0                     __ptext47:	
  9165 ;; *************** function _SetMotorStartSPK *****************
  9166 ;; Defined at:
  9167 ;;		line 1416 in file "MotorDrive.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;		None
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		wreg, status,2, status,0, pclath, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 1D/2
  9178 ;;		On exit  : 1F/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9181 ;;      Params:         0       0       0       0       0       0       0       0
  9182 ;;      Locals:         0       0       0       0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0       0
  9184 ;;      Totals:         0       0       0       0       0       0       0       0
  9185 ;;Total ram usage:        0 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    7
  9188 ;; This function calls:
  9189 ;;		_ExcitatingOutOn
  9190 ;;		_SpkComparatorOn
  9191 ;;		_TMR2_SetInterruptHandler
  9192 ;;		_TMR2_StartTimer
  9193 ;; This function is called by:
  9194 ;;		_SpiCmdFunc_StartDetectVrs
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           
  9199                           ;psect for function _SetMotorStartSPK
  9200  17B0                     _SetMotorStartSPK:
  9201                           
  9202                           ;MotorDrive.c: 1419:     TMR2_SetInterruptHandler(TMR2_Interrupt_SPK);
  9203                           
  9204                           ;incstack = 0
  9205                           ; Regs used in _SetMotorStartSPK: [wreg+status,2+status,0+pclath+cstack]
  9206  17B0  3050               	movlw	low _TMR2_Interrupt_SPK
  9207  17B1  0020               	movlb	0	; select bank0
  9208  17B2  00A0               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9209  17B3  3009               	movlw	high _TMR2_Interrupt_SPK
  9210  17B4  00A1               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9211  17B5  3191  216A  3197   	fcall	_TMR2_SetInterruptHandler
  9212                           
  9213                           ;MotorDrive.c: 1421:     PIR1bits.TMR2IF = 0;
  9214  17B8  0020               	movlb	0	; select bank0
  9215  17B9  1091               	bcf	17,1	;volatile
  9216                           
  9217                           ;MotorDrive.c: 1423:     detectSpkTurnBit = 0x00;
  9218  17BA  0021               	movlb	1	; select bank1
  9219  17BB  01DE               	clrf	_detectSpkTurnBit^(0+128)
  9220                           
  9221                           ;MotorDrive.c: 1426:     dataTRISAWork_M0 = (0x00 | 0x00);
  9222  17BC  0020               	movlb	0	; select bank0
  9223  17BD  01E1               	clrf	_dataTRISAWork_M0
  9224                           
  9225                           ;MotorDrive.c: 1427:     dataTRISBWork_M0 = (0x00 | 0x00);
  9226  17BE  01E0               	clrf	_dataTRISBWork_M0
  9227                           
  9228                           ;MotorDrive.c: 1428:     dataTRISCWork_M0 = (0x00 | 0x00);
  9229  17BF  01DF               	clrf	_dataTRISCWork_M0
  9230                           
  9231                           ;MotorDrive.c: 1430:     dataTRISAWork_M1 = (0x00 | 0x00);
  9232  17C0  01DE               	clrf	_dataTRISAWork_M1
  9233                           
  9234                           ;MotorDrive.c: 1431:     dataTRISBWork_M1 = (0x00 | 0x00);
  9235  17C1  01DD               	clrf	_dataTRISBWork_M1
  9236                           
  9237                           ;MotorDrive.c: 1432:     dataTRISCWork_M1 = (0x00 | 0x00);
  9238  17C2  01DC               	clrf	_dataTRISCWork_M1
  9239                           
  9240                           ;MotorDrive.c: 1434:     spkOutTrisRequestFlug = 1;
  9241  17C3  0021               	movlb	1	; select bank1
  9242  17C4  01DB               	clrf	_spkOutTrisRequestFlug^(0+128)
  9243  17C5  0ADB               	incf	_spkOutTrisRequestFlug^(0+128),f
  9244                           
  9245                           ;MotorDrive.c: 1437:     SpkComparatorOn();
  9246  17C6  3191  21B0  3197   	fcall	_SpkComparatorOn
  9247                           
  9248                           ;MotorDrive.c: 1439:     spkPositionCt = 0;
  9249  17C9  0021               	movlb	1	; select bank1
  9250  17CA  01DD               	clrf	_spkPositionCt^(0+128)
  9251                           
  9252                           ;MotorDrive.c: 1440:     spkChangePosition = 1;
  9253  17CB  01DC               	clrf	_spkChangePosition^(0+128)
  9254  17CC  0ADC               	incf	_spkChangePosition^(0+128),f
  9255                           
  9256                           ;MotorDrive.c: 1442:     spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
  9257  17CD  30D4               	movlw	low _SetDataTRISxWork_SPK_SHORT
  9258  17CE  00C4               	movwf	_spkOutChangeFunc^(0+128)
  9259  17CF  3014               	movlw	high _SetDataTRISxWork_SPK_SHORT
  9260  17D0  00C5               	movwf	(_spkOutChangeFunc^(0+128)+1)
  9261                           
  9262                           ;MotorDrive.c: 1445:     ExcitatingOutOn();
  9263  17D1  3197  278C  3197   	fcall	_ExcitatingOutOn
  9264                           
  9265                           ;MotorDrive.c: 1448:     TMR2_StartTimer();
  9266  17D4  3191  213D         	fcall	_TMR2_StartTimer
  9267  17D6  0008               	return
  9268  17D7                     __end_of_SetMotorStartSPK:
  9269                           
  9270                           	psect	text48
  9271  116A                     __ptext48:	
  9272 ;; *************** function _TMR2_SetInterruptHandler *****************
  9273 ;; Defined at:
  9274 ;;		line 140 in file "mcc_generated_files/tmr2.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9277 ;;		 -> TMR2_Interrupt_SPK(1), TMR2_Interrupt(1), TMR2_DefaultInterruptHandler(1), 
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;                  1    wreg      void 
  9282 ;; Registers used:
  9283 ;;		wreg
  9284 ;; Tracked objects:
  9285 ;;		On entry : 1F/0
  9286 ;;		On exit  : 1F/2
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9289 ;;      Params:         0       2       0       0       0       0       0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0       0
  9291 ;;      Temps:          0       0       0       0       0       0       0       0
  9292 ;;      Totals:         0       2       0       0       0       0       0       0
  9293 ;;Total ram usage:        2 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    5
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_TMR2_Initialize
  9300 ;;		_main
  9301 ;;		_SetMotorStartSPK
  9302 ;;		_SetMotorStopSPK
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function _TMR2_SetInterruptHandler
  9308  116A                     _TMR2_SetInterruptHandler:
  9309                           
  9310                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
  9311                           
  9312                           ;incstack = 0
  9313                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9314  116A  0821               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9315  116B  0022               	movlb	2	; select bank2
  9316  116C  00E9               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  9317  116D  0020               	movlb	0	; select bank0
  9318  116E  0820               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9319  116F  0022               	movlb	2	; select bank2
  9320  1170  00E8               	movwf	_TMR2_InterruptHandler^(0+256)
  9321  1171  0008               	return
  9322  1172                     __end_of_TMR2_SetInterruptHandler:
  9323                           
  9324                           	psect	text49
  9325  11B0                     __ptext49:	
  9326 ;; *************** function _SpkComparatorOn *****************
  9327 ;; Defined at:
  9328 ;;		line 2745 in file "MotorDrive.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		wreg
  9337 ;; Tracked objects:
  9338 ;;		On entry : 1F/1
  9339 ;;		On exit  : 1F/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9342 ;;      Params:         0       0       0       0       0       0       0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0
  9345 ;;      Totals:         0       0       0       0       0       0       0       0
  9346 ;;Total ram usage:        0 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    5
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_SetMotorStartSPK
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _SpkComparatorOn
  9358  11B0                     _SpkComparatorOn:
  9359                           
  9360                           ;MotorDrive.c: 2747:     CM1CON0 = (0x14 | 0x80);
  9361                           
  9362                           ;incstack = 0
  9363                           ; Regs used in _SpkComparatorOn: [wreg]
  9364  11B0  3094               	movlw	148
  9365  11B1  0022               	movlb	2	; select bank2
  9366  11B2  0091               	movwf	17	;volatile
  9367                           
  9368                           ;MotorDrive.c: 2748:     PIR2bits.C1IF = 0;
  9369  11B3  0020               	movlb	0	; select bank0
  9370  11B4  1292               	bcf	18,5	;volatile
  9371                           
  9372                           ;MotorDrive.c: 2750:     CM2CON0 = (0x14 | 0x80);
  9373  11B5  3094               	movlw	148
  9374  11B6  0022               	movlb	2	; select bank2
  9375  11B7  0093               	movwf	19	;volatile
  9376                           
  9377                           ;MotorDrive.c: 2751:     PIR2bits.C2IF = 0;
  9378  11B8  0020               	movlb	0	; select bank0
  9379  11B9  1312               	bcf	18,6	;volatile
  9380  11BA  0008               	return
  9381  11BB                     __end_of_SpkComparatorOn:
  9382                           
  9383                           	psect	text50
  9384  178C                     __ptext50:	
  9385 ;; *************** function _ExcitatingOutOn *****************
  9386 ;; Defined at:
  9387 ;;		line 2835 in file "MotorDrive.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;		None
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;		None
  9392 ;; Return value:  Size  Location     Type
  9393 ;;                  1    wreg      void 
  9394 ;; Registers used:
  9395 ;;		wreg, status,2, status,0, pclath, cstack
  9396 ;; Tracked objects:
  9397 ;;		On entry : 1F/1
  9398 ;;		On exit  : 1F/2
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9401 ;;      Params:         0       0       0       0       0       0       0       0
  9402 ;;      Locals:         0       0       0       0       0       0       0       0
  9403 ;;      Temps:          0       1       0       0       0       0       0       0
  9404 ;;      Totals:         0       1       0       0       0       0       0       0
  9405 ;;Total ram usage:        1 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    6
  9408 ;; This function calls:
  9409 ;;		_SetOutPutLATX
  9410 ;; This function is called by:
  9411 ;;		_SetMotorStartSPK
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           
  9416                           ;psect for function _ExcitatingOutOn
  9417  178C                     _ExcitatingOutOn:
  9418                           
  9419                           ;MotorDrive.c: 2838:     dataTRISAWork_M0 = 0x00;
  9420                           
  9421                           ;incstack = 0
  9422                           ; Regs used in _ExcitatingOutOn: [wreg+status,2+status,0+pclath+cstack]
  9423  178C  0020               	movlb	0	; select bank0
  9424  178D  01E1               	clrf	_dataTRISAWork_M0
  9425                           
  9426                           ;MotorDrive.c: 2839:     dataTRISBWork_M0 = 0x00;
  9427  178E  01E0               	clrf	_dataTRISBWork_M0
  9428                           
  9429                           ;MotorDrive.c: 2840:     dataTRISCWork_M0 = 0x20;
  9430  178F  3020               	movlw	32
  9431  1790  00A1               	movwf	??_ExcitatingOutOn
  9432  1791  0821               	movf	??_ExcitatingOutOn,w
  9433  1792  00DF               	movwf	_dataTRISCWork_M0
  9434                           
  9435                           ;MotorDrive.c: 2842:     dataTRISAWork_M1 = 0x00;
  9436  1793  01DE               	clrf	_dataTRISAWork_M1
  9437                           
  9438                           ;MotorDrive.c: 2843:     dataTRISBWork_M1 = 0x00;
  9439  1794  01DD               	clrf	_dataTRISBWork_M1
  9440                           
  9441                           ;MotorDrive.c: 2844:     dataTRISCWork_M1 = 0x10;
  9442  1795  3010               	movlw	16
  9443  1796  00A1               	movwf	??_ExcitatingOutOn
  9444  1797  0821               	movf	??_ExcitatingOutOn,w
  9445  1798  00DC               	movwf	_dataTRISCWork_M1
  9446                           
  9447                           ;MotorDrive.c: 2847:     pulseOutLATAWork_M0 = 0x10;
  9448  1799  3010               	movlw	16
  9449  179A  00A1               	movwf	??_ExcitatingOutOn
  9450  179B  0821               	movf	??_ExcitatingOutOn,w
  9451  179C  00E7               	movwf	_pulseOutLATAWork_M0
  9452                           
  9453                           ;MotorDrive.c: 2848:     pulseOutLATBWork_M0 = 0x00;
  9454  179D  01E6               	clrf	_pulseOutLATBWork_M0
  9455                           
  9456                           ;MotorDrive.c: 2849:     pulseOutLATCWork_M0 = 0x00;
  9457  179E  01E5               	clrf	_pulseOutLATCWork_M0
  9458                           
  9459                           ;MotorDrive.c: 2851:     pulseOutLATAWork_M1 = 0x00;
  9460  179F  0021               	movlb	1	; select bank1
  9461  17A0  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
  9462                           
  9463                           ;MotorDrive.c: 2852:     pulseOutLATBWork_M1 = 0x80;
  9464  17A1  3080               	movlw	128
  9465  17A2  0020               	movlb	0	; select bank0
  9466  17A3  00A1               	movwf	??_ExcitatingOutOn
  9467  17A4  0821               	movf	??_ExcitatingOutOn,w
  9468  17A5  0021               	movlb	1	; select bank1
  9469  17A6  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
  9470                           
  9471                           ;MotorDrive.c: 2853:     pulseOutLATCWork_M1 = 0x00;
  9472  17A7  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
  9473                           
  9474                           ;MotorDrive.c: 2855:     SetOutPutLATX();
  9475  17A8  318A  22A8         	fcall	_SetOutPutLATX
  9476                           
  9477                           ;MotorDrive.c: 2856:     LATA |= 0x04;
  9478  17AA  150C               	bsf	12,2	;volatile
  9479                           
  9480                           ;MotorDrive.c: 2858:     excitatingTime = 8197;
  9481  17AB  3005               	movlw	5
  9482  17AC  00AC               	movwf	_excitatingTime^(0+256)
  9483  17AD  3020               	movlw	32
  9484  17AE  00AD               	movwf	(_excitatingTime^(0+256)+1)
  9485  17AF  0008               	return
  9486  17B0                     __end_of_ExcitatingOutOn:
  9487                           
  9488                           	psect	text51
  9489  0AA8                     __ptext51:	
  9490 ;; *************** function _SetOutPutLATX *****************
  9491 ;; Defined at:
  9492 ;;		line 2944 in file "MotorDrive.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;		None
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;		None
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, status,2, status,0
  9501 ;; Tracked objects:
  9502 ;;		On entry : 1F/1
  9503 ;;		On exit  : 1F/2
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9506 ;;      Params:         0       0       0       0       0       0       0       0
  9507 ;;      Locals:         0       0       0       0       0       0       0       0
  9508 ;;      Temps:          0       1       0       0       0       0       0       0
  9509 ;;      Totals:         0       1       0       0       0       0       0       0
  9510 ;;Total ram usage:        1 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    5
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_SetExcitatingOutOffData
  9517 ;;		_ExcitatingOutOn
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           
  9522                           ;psect for function _SetOutPutLATX
  9523  0AA8                     _SetOutPutLATX:
  9524                           
  9525                           ;MotorDrive.c: 2948:     dataTRISA = TRISA;
  9526                           
  9527                           ;incstack = 0
  9528                           ; Regs used in _SetOutPutLATX: [wreg+status,2+status,0]
  9529  0AA8  080C               	movf	12,w	;volatile
  9530  0AA9  0020               	movlb	0	; select bank0
  9531  0AAA  00A0               	movwf	??_SetOutPutLATX
  9532  0AAB  0820               	movf	??_SetOutPutLATX,w
  9533  0AAC  00E4               	movwf	_dataTRISA
  9534                           
  9535                           ;MotorDrive.c: 2949:     dataTRISB = TRISB;
  9536  0AAD  0021               	movlb	1	; select bank1
  9537  0AAE  080D               	movf	13,w	;volatile
  9538  0AAF  0020               	movlb	0	; select bank0
  9539  0AB0  00A0               	movwf	??_SetOutPutLATX
  9540  0AB1  0820               	movf	??_SetOutPutLATX,w
  9541  0AB2  00E3               	movwf	_dataTRISB
  9542                           
  9543                           ;MotorDrive.c: 2950:     dataTRISC = TRISC;
  9544  0AB3  0021               	movlb	1	; select bank1
  9545  0AB4  080E               	movf	14,w	;volatile
  9546  0AB5  0020               	movlb	0	; select bank0
  9547  0AB6  00A0               	movwf	??_SetOutPutLATX
  9548  0AB7  0820               	movf	??_SetOutPutLATX,w
  9549  0AB8  00E2               	movwf	_dataTRISC
  9550                           
  9551                           ;MotorDrive.c: 2955:     dataTRISB &= (UB) (~(0x00 | 0x00));
  9552  0AB9  30FD               	movlw	253
  9553  0ABA  00A0               	movwf	??_SetOutPutLATX
  9554  0ABB  0820               	movf	??_SetOutPutLATX,w
  9555  0ABC  05E4               	andwf	_dataTRISA,f
  9556                           
  9557                           ;MotorDrive.c: 2956:     dataTRISC &= (UB) (~(0x22 | 0x1C));
  9558  0ABD  30C1               	movlw	193
  9559  0ABE  00A0               	movwf	??_SetOutPutLATX
  9560  0ABF  0820               	movf	??_SetOutPutLATX,w
  9561  0AC0  05E2               	andwf	_dataTRISC,f
  9562                           
  9563                           ;MotorDrive.c: 2959:     dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
  9564  0AC1  0861               	movf	_dataTRISAWork_M0,w
  9565  0AC2  045E               	iorwf	_dataTRISAWork_M1,w
  9566  0AC3  00A0               	movwf	??_SetOutPutLATX
  9567  0AC4  0820               	movf	??_SetOutPutLATX,w
  9568  0AC5  04E4               	iorwf	_dataTRISA,f
  9569                           
  9570                           ;MotorDrive.c: 2960:     dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
  9571  0AC6  0860               	movf	_dataTRISBWork_M0,w
  9572  0AC7  045D               	iorwf	_dataTRISBWork_M1,w
  9573  0AC8  00A0               	movwf	??_SetOutPutLATX
  9574  0AC9  0820               	movf	??_SetOutPutLATX,w
  9575  0ACA  04E3               	iorwf	_dataTRISB,f
  9576                           
  9577                           ;MotorDrive.c: 2961:     dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
  9578  0ACB  085F               	movf	_dataTRISCWork_M0,w
  9579  0ACC  045C               	iorwf	_dataTRISCWork_M1,w
  9580  0ACD  00A0               	movwf	??_SetOutPutLATX
  9581  0ACE  0820               	movf	??_SetOutPutLATX,w
  9582  0ACF  04E2               	iorwf	_dataTRISC,f
  9583                           
  9584                           ;MotorDrive.c: 2964:     TRISA = dataTRISA;
  9585  0AD0  0864               	movf	_dataTRISA,w
  9586  0AD1  0021               	movlb	1	; select bank1
  9587  0AD2  008C               	movwf	12	;volatile
  9588                           
  9589                           ;MotorDrive.c: 2965:     TRISB = dataTRISB;
  9590  0AD3  0020               	movlb	0	; select bank0
  9591  0AD4  0863               	movf	_dataTRISB,w
  9592  0AD5  0021               	movlb	1	; select bank1
  9593  0AD6  008D               	movwf	13	;volatile
  9594                           
  9595                           ;MotorDrive.c: 2966:     TRISC = dataTRISC;
  9596  0AD7  0020               	movlb	0	; select bank0
  9597  0AD8  0862               	movf	_dataTRISC,w
  9598  0AD9  0021               	movlb	1	; select bank1
  9599  0ADA  008E               	movwf	14	;volatile
  9600                           
  9601                           ;MotorDrive.c: 2969:     pulseOutLATA = LATA;
  9602  0ADB  0022               	movlb	2	; select bank2
  9603  0ADC  080C               	movf	12,w	;volatile
  9604  0ADD  0020               	movlb	0	; select bank0
  9605  0ADE  00A0               	movwf	??_SetOutPutLATX
  9606  0ADF  0820               	movf	??_SetOutPutLATX,w
  9607  0AE0  00EA               	movwf	_pulseOutLATA
  9608                           
  9609                           ;MotorDrive.c: 2970:     pulseOutLATB = LATB;
  9610  0AE1  0022               	movlb	2	; select bank2
  9611  0AE2  080D               	movf	13,w	;volatile
  9612  0AE3  0020               	movlb	0	; select bank0
  9613  0AE4  00A0               	movwf	??_SetOutPutLATX
  9614  0AE5  0820               	movf	??_SetOutPutLATX,w
  9615  0AE6  00E9               	movwf	_pulseOutLATB
  9616                           
  9617                           ;MotorDrive.c: 2971:     pulseOutLATC = LATC;
  9618  0AE7  0022               	movlb	2	; select bank2
  9619  0AE8  080E               	movf	14,w	;volatile
  9620  0AE9  0020               	movlb	0	; select bank0
  9621  0AEA  00A0               	movwf	??_SetOutPutLATX
  9622  0AEB  0820               	movf	??_SetOutPutLATX,w
  9623  0AEC  00E8               	movwf	_pulseOutLATC
  9624                           
  9625                           ;MotorDrive.c: 2975:     pulseOutLATA &= (UB) (~(0x32 | 0x00));
  9626  0AED  30CD               	movlw	205
  9627  0AEE  00A0               	movwf	??_SetOutPutLATX
  9628  0AEF  0820               	movf	??_SetOutPutLATX,w
  9629  0AF0  05EA               	andwf	_pulseOutLATA,f
  9630                           
  9631                           ;MotorDrive.c: 2976:     pulseOutLATB &= (UB) (~(0x00 | 0xA0));
  9632  0AF1  305F               	movlw	95
  9633  0AF2  00A0               	movwf	??_SetOutPutLATX
  9634  0AF3  0820               	movf	??_SetOutPutLATX,w
  9635  0AF4  05E9               	andwf	_pulseOutLATB,f
  9636                           
  9637                           ;MotorDrive.c: 2977:     pulseOutLATC &= (UB) (~(0x02 | 0x0C));
  9638  0AF5  30F1               	movlw	241
  9639  0AF6  00A0               	movwf	??_SetOutPutLATX
  9640  0AF7  0820               	movf	??_SetOutPutLATX,w
  9641  0AF8  05E8               	andwf	_pulseOutLATC,f
  9642                           
  9643                           ;MotorDrive.c: 2980:     pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork_M1
      +                          );
  9644  0AF9  0867               	movf	_pulseOutLATAWork_M0,w
  9645  0AFA  0021               	movlb	1	; select bank1
  9646  0AFB  046B               	iorwf	_pulseOutLATAWork_M1^(0+128),w
  9647  0AFC  0020               	movlb	0	; select bank0
  9648  0AFD  00A0               	movwf	??_SetOutPutLATX
  9649  0AFE  0820               	movf	??_SetOutPutLATX,w
  9650  0AFF  04EA               	iorwf	_pulseOutLATA,f
  9651                           
  9652                           ;MotorDrive.c: 2981:     pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork_M1
      +                          );
  9653  0B00  0866               	movf	_pulseOutLATBWork_M0,w
  9654  0B01  0021               	movlb	1	; select bank1
  9655  0B02  046A               	iorwf	_pulseOutLATBWork_M1^(0+128),w
  9656  0B03  0020               	movlb	0	; select bank0
  9657  0B04  00A0               	movwf	??_SetOutPutLATX
  9658  0B05  0820               	movf	??_SetOutPutLATX,w
  9659  0B06  04E9               	iorwf	_pulseOutLATB,f
  9660                           
  9661                           ;MotorDrive.c: 2982:     pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork_M1
      +                          );
  9662  0B07  0865               	movf	_pulseOutLATCWork_M0,w
  9663  0B08  0021               	movlb	1	; select bank1
  9664  0B09  0469               	iorwf	_pulseOutLATCWork_M1^(0+128),w
  9665  0B0A  0020               	movlb	0	; select bank0
  9666  0B0B  00A0               	movwf	??_SetOutPutLATX
  9667  0B0C  0820               	movf	??_SetOutPutLATX,w
  9668  0B0D  04E8               	iorwf	_pulseOutLATC,f
  9669                           
  9670                           ;MotorDrive.c: 2985:     LATA = pulseOutLATA;
  9671  0B0E  086A               	movf	_pulseOutLATA,w
  9672  0B0F  0022               	movlb	2	; select bank2
  9673  0B10  008C               	movwf	12	;volatile
  9674                           
  9675                           ;MotorDrive.c: 2986:     LATB = pulseOutLATB;
  9676  0B11  0020               	movlb	0	; select bank0
  9677  0B12  0869               	movf	_pulseOutLATB,w
  9678  0B13  0022               	movlb	2	; select bank2
  9679  0B14  008D               	movwf	13	;volatile
  9680                           
  9681                           ;MotorDrive.c: 2987:     LATC = pulseOutLATC;
  9682  0B15  0020               	movlb	0	; select bank0
  9683  0B16  0868               	movf	_pulseOutLATC,w
  9684  0B17  0022               	movlb	2	; select bank2
  9685  0B18  008E               	movwf	14	;volatile
  9686  0B19  0008               	return
  9687  0B1A                     __end_of_SetOutPutLATX:
  9688                           
  9689                           	psect	text52
  9690  16C2                     __ptext52:	
  9691 ;; *************** function _SetMotorPositionSearchStart *****************
  9692 ;; Defined at:
  9693 ;;		line 1867 in file "MotorDrive.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  motor_no        1    wreg     unsigned char 
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;  motor_no        1   16[BANK0 ] unsigned char 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;                  1    wreg      void 
  9700 ;; Registers used:
  9701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : 1F/0
  9704 ;;		On exit  : 1F/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9707 ;;      Params:         0       0       0       0       0       0       0       0
  9708 ;;      Locals:         0       1       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0       0
  9710 ;;      Totals:         0       1       0       0       0       0       0       0
  9711 ;;Total ram usage:        1 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    8
  9714 ;; This function calls:
  9715 ;;		_InitPositionSearch
  9716 ;;		_SetAfterDetectLoadFunc
  9717 ;;		_SetMotorStart
  9718 ;; This function is called by:
  9719 ;;		_SpiCmdFunc_SearchBasePosition
  9720 ;;		_SpiCmdFunc_Search1008Position
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           
  9725                           ;psect for function _SetMotorPositionSearchStart
  9726  16C2                     _SetMotorPositionSearchStart:
  9727                           
  9728                           ;incstack = 0
  9729                           ; Regs used in _SetMotorPositionSearchStart: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9730                           ;SetMotorPositionSearchStart@motor_no stored from wreg
  9731  16C2  00B0               	movwf	SetMotorPositionSearchStart@motor_no
  9732                           
  9733                           ;MotorDrive.c: 1867: void SetMotorPositionSearchStart(UB motor_no);MotorDrive.c: 1868: {
      +                          ;MotorDrive.c: 1871:     searchTotalSteps[ motor_no ] = 0;
  9734  16C3  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9735  16C4  3E20               	addlw	(low (_searchTotalSteps| (0+256)))& (0+255)
  9736  16C5  0086               	movwf	6
  9737  16C6  3001               	movlw	1	; select bank2/3
  9738  16C7  0087               	movwf	7
  9739  16C8  3000               	movlw	0
  9740  16C9  3FC0               	movwi [0]fsr1
  9741  16CA  3FC1               	movwi [1]fsr1
  9742                           
  9743                           ;MotorDrive.c: 1873:     currentPosition[ motor_no ] = 0;
  9744  16CB  3530               	lslf	SetMotorPositionSearchStart@motor_no,w
  9745  16CC  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
  9746  16CD  0086               	movwf	6
  9747  16CE  0187               	clrf	7
  9748  16CF  3000               	movlw	0
  9749  16D0  3FC0               	movwi [0]fsr1
  9750  16D1  3FC1               	movwi [1]fsr1
  9751                           
  9752                           ;MotorDrive.c: 1875:     InitPositionSearch(motor_no);
  9753  16D2  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9754  16D3  318E  261A  3196   	fcall	_InitPositionSearch
  9755                           
  9756                           ;MotorDrive.c: 1877:     SetAfterDetectLoadFunc(motor_no, AfterDetectedLoadPosition);
  9757  16D6  305D               	movlw	low _AfterDetectedLoadPosition
  9758  16D7  00A0               	movwf	SetAfterDetectLoadFunc@func
  9759  16D8  3000               	movlw	high _AfterDetectedLoadPosition
  9760  16D9  00A1               	movwf	SetAfterDetectLoadFunc@func+1
  9761  16DA  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9762  16DB  3191  2186  3196   	fcall	_SetAfterDetectLoadFunc
  9763                           
  9764                           ;MotorDrive.c: 1879:     SetMotorStart(motor_no);
  9765  16DE  0830               	movf	SetMotorPositionSearchStart@motor_no,w
  9766  16DF  3191  2172         	fcall	_SetMotorStart
  9767  16E1  0008               	return
  9768  16E2                     __end_of_SetMotorPositionSearchStart:
  9769                           
  9770                           	psect	text53
  9771  0E1A                     __ptext53:	
  9772 ;; *************** function _InitPositionSearch *****************
  9773 ;; Defined at:
  9774 ;;		line 1914 in file "MotorDrive.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  motor_no        1    wreg     unsigned char 
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;  motor_no        1   15[BANK0 ] unsigned char 
  9779 ;;  i               1   14[BANK0 ] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 1F/0
  9786 ;;		On exit  : 1F/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9789 ;;      Params:         0       0       0       0       0       0       0       0
  9790 ;;      Locals:         0       2       0       0       0       0       0       0
  9791 ;;      Temps:          0       8       0       0       0       0       0       0
  9792 ;;      Totals:         0      10       0       0       0       0       0       0
  9793 ;;Total ram usage:       10 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    6
  9796 ;; This function calls:
  9797 ;;		___bmul
  9798 ;;		___wmul
  9799 ;; This function is called by:
  9800 ;;		_SetMotorPositionSearchStart
  9801 ;;		_SetMotorCorrectPositionStart
  9802 ;;		_AfterDetectedLoadPosition
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _InitPositionSearch
  9808  0E1A                     _InitPositionSearch:
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _InitPositionSearch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9812                           ;InitPositionSearch@motor_no stored from wreg
  9813  0E1A  00AF               	movwf	InitPositionSearch@motor_no
  9814                           
  9815                           ;MotorDrive.c: 1914: void InitPositionSearch(UB motor_no);MotorDrive.c: 1915: {;MotorDri
      +                          ve.c: 1916:     UB i;;MotorDrive.c: 1918:     doubleInterval = 0;
  9816  0E1B  0021               	movlb	1	; select bank1
  9817  0E1C  01CD               	clrf	_doubleInterval^(0+128)
  9818                           
  9819                           ;MotorDrive.c: 1920:     positionSearchCt[ motor_no ] = 0;
  9820  0E1D  0020               	movlb	0	; select bank0
  9821  0E1E  352F               	lslf	InitPositionSearch@motor_no,w
  9822  0E1F  3EA8               	addlw	(low (_positionSearchCt| 0))& (0+255)
  9823  0E20  0086               	movwf	6
  9824  0E21  0187               	clrf	7
  9825  0E22  3000               	movlw	0
  9826  0E23  3FC0               	movwi [0]fsr1
  9827  0E24  3FC1               	movwi [1]fsr1
  9828                           
  9829                           ;MotorDrive.c: 1922:     detectFinePosCt[ motor_no ] = 0;
  9830  0E25  082F               	movf	InitPositionSearch@motor_no,w
  9831  0E26  3EB8               	addlw	(low (_detectFinePosCt| 0))& (0+255)
  9832  0E27  0086               	movwf	6
  9833  0E28  0187               	clrf	7
  9834  0E29  0181               	clrf	1
  9835                           
  9836                           ;MotorDrive.c: 1923:     detectRoughPosCt[ motor_no ] = 0;
  9837  0E2A  082F               	movf	InitPositionSearch@motor_no,w
  9838  0E2B  3EB6               	addlw	(low (_detectRoughPosCt| 0))& (0+255)
  9839  0E2C  0086               	movwf	6
  9840  0E2D  0187               	clrf	7
  9841  0E2E  0181               	clrf	1
  9842                           
  9843                           ;MotorDrive.c: 1924:     positionSearchStat[ motor_no ] = ID_SEARCH_FINE_POS_1ST;
  9844  0E2F  082F               	movf	InitPositionSearch@motor_no,w
  9845  0E30  3EB4               	addlw	(low (_positionSearchStat| 0))& (0+255)
  9846  0E31  0086               	movwf	6
  9847  0E32  0187               	clrf	7
  9848  0E33  0181               	clrf	1
  9849                           
  9850                           ;MotorDrive.c: 1925:     detectLoadType[ motor_no ] = ID_DETECT_LOAD_NULL;
  9851  0E34  082F               	movf	InitPositionSearch@motor_no,w
  9852  0E35  3E51               	addlw	(low (_detectLoadType| 0))& (0+255)
  9853  0E36  0086               	movwf	6
  9854  0E37  0187               	clrf	7
  9855  0E38  0181               	clrf	1
  9856                           
  9857                           ;MotorDrive.c: 1926:     detectLoadCont[ motor_no ] = 0;
  9858  0E39  082F               	movf	InitPositionSearch@motor_no,w
  9859  0E3A  3E4F               	addlw	(low (_detectLoadCont| 0))& (0+255)
  9860  0E3B  0086               	movwf	6
  9861  0E3C  0187               	clrf	7
  9862  0E3D  0181               	clrf	1
  9863                           
  9864                           ;MotorDrive.c: 1927:     detectRoughTotalMove[ motor_no ] = 0;
  9865  0E3E  352F               	lslf	InitPositionSearch@motor_no,w
  9866  0E3F  3EA4               	addlw	(low (_detectRoughTotalMove| 0))& (0+255)
  9867  0E40  0086               	movwf	6
  9868  0E41  0187               	clrf	7
  9869  0E42  3000               	movlw	0
  9870  0E43  3FC0               	movwi [0]fsr1
  9871  0E44  3FC1               	movwi [1]fsr1
  9872                           
  9873                           ;MotorDrive.c: 1929:     detectLoadPositionIndex[ motor_no ] = 0;
  9874  0E45  082F               	movf	InitPositionSearch@motor_no,w
  9875  0E46  3EBE               	addlw	(low (_detectLoadPositionIndex| 0))& (0+255)
  9876  0E47  0086               	movwf	6
  9877  0E48  0187               	clrf	7
  9878  0E49  0181               	clrf	1
  9879                           
  9880                           ;MotorDrive.c: 1930:     for (i = 0; i < ( ( ( 8 * 2 ) + ( 1 * 9 ) ) - 2 ); i++) {
  9881  0E4A  01AE               	clrf	InitPositionSearch@i
  9882  0E4B                     l5900:
  9883                           
  9884                           ;MotorDrive.c: 1931:         detectLoadPosition[ motor_no ][ i ] = 0;
  9885  0E4B  082E               	movf	InitPositionSearch@i,w
  9886  0E4C  00A6               	movwf	??_InitPositionSearch
  9887  0E4D  01A7               	clrf	??_InitPositionSearch+1
  9888  0E4E  35A6               	lslf	??_InitPositionSearch,f
  9889  0E4F  0DA7               	rlf	??_InitPositionSearch+1,f
  9890  0E50  082F               	movf	InitPositionSearch@motor_no,w
  9891  0E51  00A8               	movwf	??_InitPositionSearch+2
  9892  0E52  01A9               	clrf	??_InitPositionSearch+3
  9893  0E53  0828               	movf	??_InitPositionSearch+2,w
  9894  0E54  00A0               	movwf	___wmul@multiplier
  9895  0E55  0829               	movf	??_InitPositionSearch+3,w
  9896  0E56  00A1               	movwf	___wmul@multiplier+1
  9897  0E57  302E               	movlw	46
  9898  0E58  00A2               	movwf	___wmul@multiplicand
  9899  0E59  3000               	movlw	0
  9900  0E5A  00A3               	movwf	___wmul@multiplicand+1
  9901  0E5B  3196  2636  318E   	fcall	___wmul
  9902  0E5E  3094               	movlw	148
  9903  0E5F  00AA               	movwf	??_InitPositionSearch+4
  9904  0E60  3021               	movlw	33
  9905  0E61  00AB               	movwf	??_InitPositionSearch+5
  9906  0E62  0820               	movf	?___wmul,w
  9907  0E63  072A               	addwf	??_InitPositionSearch+4,w
  9908  0E64  00AC               	movwf	??_InitPositionSearch+6
  9909  0E65  0821               	movf	?___wmul+1,w
  9910  0E66  3D2B               	addwfc	??_InitPositionSearch+5,w
  9911  0E67  00AD               	movwf	??_InitPositionSearch+7
  9912  0E68  0826               	movf	??_InitPositionSearch,w
  9913  0E69  072C               	addwf	??_InitPositionSearch+6,w
  9914  0E6A  0086               	movwf	6
  9915  0E6B  0827               	movf	??_InitPositionSearch+1,w
  9916  0E6C  3D2D               	addwfc	??_InitPositionSearch+7,w
  9917  0E6D  0087               	movwf	7
  9918  0E6E  3000               	movlw	0
  9919  0E6F  3FC0               	movwi [0]fsr1
  9920  0E70  3FC1               	movwi [1]fsr1
  9921                           
  9922                           ;MotorDrive.c: 1933:         detectLoadPositionType[ motor_no ][ i ] = 0;
  9923  0E71  3017               	movlw	23
  9924  0E72  00A6               	movwf	??_InitPositionSearch
  9925  0E73  0826               	movf	??_InitPositionSearch,w
  9926  0E74  00A0               	movwf	___bmul@multiplicand
  9927  0E75  082F               	movf	InitPositionSearch@motor_no,w
  9928  0E76  3193  239D  318E   	fcall	___bmul
  9929  0E79  3E2E               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9930  0E7A  072E               	addwf	InitPositionSearch@i,w
  9931  0E7B  00A7               	movwf	??_InitPositionSearch+1
  9932  0E7C  0827               	movf	??_InitPositionSearch+1,w
  9933  0E7D  0086               	movwf	6
  9934  0E7E  3001               	movlw	1	; select bank2/3
  9935  0E7F  0087               	movwf	7
  9936  0E80  0181               	clrf	1
  9937                           
  9938                           ;MotorDrive.c: 1934:     }
  9939  0E81  3001               	movlw	1
  9940  0E82  00A6               	movwf	??_InitPositionSearch
  9941  0E83  0826               	movf	??_InitPositionSearch,w
  9942  0E84  07AE               	addwf	InitPositionSearch@i,f
  9943  0E85  3017               	movlw	23
  9944  0E86  022E               	subwf	InitPositionSearch@i,w
  9945  0E87  1C03               	skipc
  9946  0E88  2E4B               	goto	l5900
  9947                           
  9948                           ;MotorDrive.c: 1936:     detectLoadPositionPtr[ motor_no ] = &detectLoadPosition[ motor_
      +                          no ][ 0 ];
  9949  0E89  082F               	movf	InitPositionSearch@motor_no,w
  9950  0E8A  00A6               	movwf	??_InitPositionSearch
  9951  0E8B  01A7               	clrf	??_InitPositionSearch+1
  9952  0E8C  0826               	movf	??_InitPositionSearch,w
  9953  0E8D  00A0               	movwf	___wmul@multiplier
  9954  0E8E  0827               	movf	??_InitPositionSearch+1,w
  9955  0E8F  00A1               	movwf	___wmul@multiplier+1
  9956  0E90  302E               	movlw	46
  9957  0E91  00A2               	movwf	___wmul@multiplicand
  9958  0E92  3000               	movlw	0
  9959  0E93  00A3               	movwf	___wmul@multiplicand+1
  9960  0E94  3196  2636  318E   	fcall	___wmul
  9961  0E97  3094               	movlw	148
  9962  0E98  00A8               	movwf	??_InitPositionSearch+2
  9963  0E99  3021               	movlw	33
  9964  0E9A  00A9               	movwf	??_InitPositionSearch+3
  9965  0E9B  0820               	movf	?___wmul,w
  9966  0E9C  0728               	addwf	??_InitPositionSearch+2,w
  9967  0E9D  00AA               	movwf	??_InitPositionSearch+4
  9968  0E9E  0821               	movf	?___wmul+1,w
  9969  0E9F  3D29               	addwfc	??_InitPositionSearch+3,w
  9970  0EA0  00AB               	movwf	??_InitPositionSearch+5
  9971  0EA1  352F               	lslf	InitPositionSearch@motor_no,w
  9972  0EA2  3E24               	addlw	(low (_detectLoadPositionPtr| (0+256)))& (0+255)
  9973  0EA3  0086               	movwf	6
  9974  0EA4  3001               	movlw	1	; select bank2/3
  9975  0EA5  0087               	movwf	7
  9976  0EA6  082A               	movf	??_InitPositionSearch+4,w
  9977  0EA7  3FC0               	movwi [0]fsr1
  9978  0EA8  082B               	movf	??_InitPositionSearch+5,w
  9979  0EA9  3FC1               	movwi [1]fsr1
  9980                           
  9981                           ;MotorDrive.c: 1938:     detectLoadPositionTypePtr[ motor_no ] = &detectLoadPositionType
      +                          [ motor_no ][ 0 ];
  9982  0EAA  3017               	movlw	23
  9983  0EAB  00A6               	movwf	??_InitPositionSearch
  9984  0EAC  0826               	movf	??_InitPositionSearch,w
  9985  0EAD  00A0               	movwf	___bmul@multiplicand
  9986  0EAE  082F               	movf	InitPositionSearch@motor_no,w
  9987  0EAF  3193  239D         	fcall	___bmul
  9988  0EB1  3E2E               	addlw	(low (_detectLoadPositionType| (0+256)))& (0+255)
  9989  0EB2  00A7               	movwf	??_InitPositionSearch+1
  9990  0EB3  082F               	movf	InitPositionSearch@motor_no,w
  9991  0EB4  3EBC               	addlw	(low (_detectLoadPositionTypePtr| 0))& (0+255)
  9992  0EB5  0086               	movwf	6
  9993  0EB6  0187               	clrf	7
  9994  0EB7  0827               	movf	??_InitPositionSearch+1,w
  9995  0EB8  0081               	movwf	1
  9996  0EB9  0008               	return
  9997  0EBA                     __end_of_InitPositionSearch:
  9998                           
  9999                           	psect	text54
 10000  1636                     __ptext54:	
 10001 ;; *************** function ___wmul *****************
 10002 ;; Defined at:
 10003 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10006 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10007 ;; Auto vars:     Size  Location     Type
 10008 ;;  product         2    4[BANK0 ] unsigned int 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;                  2    0[BANK0 ] unsigned int 
 10011 ;; Registers used:
 10012 ;;		wreg, status,2, status,0
 10013 ;; Tracked objects:
 10014 ;;		On entry : 1F/0
 10015 ;;		On exit  : 1F/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10018 ;;      Params:         0       4       0       0       0       0       0       0
 10019 ;;      Locals:         0       2       0       0       0       0       0       0
 10020 ;;      Temps:          0       0       0       0       0       0       0       0
 10021 ;;      Totals:         0       6       0       0       0       0       0       0
 10022 ;;Total ram usage:        6 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    5
 10025 ;; This function calls:
 10026 ;;		Nothing
 10027 ;; This function is called by:
 10028 ;;		_InitPositionSearch
 10029 ;;		_DetermineBasePosition
 10030 ;;		_UpdataHandPosition
 10031 ;;		_UpdateCurrentPositionByFinePosition
 10032 ;;		_SaveLoadPosition
 10033 ;;		_VerifyHandPosition_LoadPosition
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           
 10038                           ;psect for function ___wmul
 10039  1636                     ___wmul:
 10040                           
 10041                           ;incstack = 0
 10042                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10043  1636  01A4               	clrf	___wmul@product
 10044  1637  01A5               	clrf	___wmul@product+1
 10045  1638                     l5706:
 10046  1638  1C20               	btfss	___wmul@multiplier,0
 10047  1639  2E3E               	goto	l1432
 10048  163A  0822               	movf	___wmul@multiplicand,w
 10049  163B  07A4               	addwf	___wmul@product,f
 10050  163C  0823               	movf	___wmul@multiplicand+1,w
 10051  163D  3DA5               	addwfc	___wmul@product+1,f
 10052  163E                     l1432:
 10053  163E  3001               	movlw	1
 10054  163F                     u4235:
 10055  163F  35A2               	lslf	___wmul@multiplicand,f
 10056  1640  0DA3               	rlf	___wmul@multiplicand+1,f
 10057  1641  0B89               	decfsz	9,f
 10058  1642  2E3F               	goto	u4235
 10059  1643  3001               	movlw	1
 10060  1644                     u4245:
 10061  1644  36A1               	lsrf	___wmul@multiplier+1,f
 10062  1645  0CA0               	rrf	___wmul@multiplier,f
 10063  1646  0B89               	decfsz	9,f
 10064  1647  2E44               	goto	u4245
 10065  1648  0820               	movf	___wmul@multiplier,w
 10066  1649  0421               	iorwf	___wmul@multiplier+1,w
 10067  164A  1D03               	btfss	3,2
 10068  164B  2E38               	goto	l5706
 10069  164C  0825               	movf	___wmul@product+1,w
 10070  164D  00A1               	movwf	?___wmul+1
 10071  164E  0824               	movf	___wmul@product,w
 10072  164F  00A0               	movwf	?___wmul
 10073  1650  0008               	return
 10074  1651                     __end_of___wmul:
 10075                           
 10076                           	psect	text55
 10077  139D                     __ptext55:	
 10078 ;; *************** function ___bmul *****************
 10079 ;; Defined at:
 10080 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul8.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;  multiplier      1    wreg     unsigned char 
 10083 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  multiplier      1    3[BANK0 ] unsigned char 
 10086 ;;  product         1    2[BANK0 ] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      unsigned char 
 10089 ;; Registers used:
 10090 ;;		wreg, status,2, status,0
 10091 ;; Tracked objects:
 10092 ;;		On entry : 1F/0
 10093 ;;		On exit  : 1F/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10096 ;;      Params:         0       1       0       0       0       0       0       0
 10097 ;;      Locals:         0       2       0       0       0       0       0       0
 10098 ;;      Temps:          0       1       0       0       0       0       0       0
 10099 ;;      Totals:         0       4       0       0       0       0       0       0
 10100 ;;Total ram usage:        4 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    5
 10103 ;; This function calls:
 10104 ;;		Nothing
 10105 ;; This function is called by:
 10106 ;;		_InitPositionSearch
 10107 ;;		_DetermineBasePosition
 10108 ;;		_UpdateCurrentPositionByFinePosition
 10109 ;;		_SaveLoadPosition
 10110 ;;		_VerifyHandPosition_LoadPosition
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           
 10115                           ;psect for function ___bmul
 10116  139D                     ___bmul:
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10120                           ;___bmul@multiplier stored from wreg
 10121  139D  00A3               	movwf	___bmul@multiplier
 10122  139E  01A2               	clrf	___bmul@product
 10123  139F                     l5720:
 10124  139F  1C23               	btfss	___bmul@multiplier,0
 10125  13A0  2BA5               	goto	l5724
 10126  13A1  0820               	movf	___bmul@multiplicand,w
 10127  13A2  00A1               	movwf	??___bmul
 10128  13A3  0821               	movf	??___bmul,w
 10129  13A4  07A2               	addwf	___bmul@product,f
 10130  13A5                     l5724:
 10131  13A5  1003               	clrc
 10132  13A6  0DA0               	rlf	___bmul@multiplicand,f
 10133  13A7  1003               	clrc
 10134  13A8  0CA3               	rrf	___bmul@multiplier,f
 10135  13A9  0823               	movf	___bmul@multiplier,w
 10136  13AA  1D03               	btfss	3,2
 10137  13AB  2B9F               	goto	l5720
 10138  13AC  0822               	movf	___bmul@product,w
 10139  13AD  0008               	return
 10140  13AE                     __end_of___bmul:
 10141                           
 10142                           	psect	text56
 10143  143D                     __ptext56:	
 10144 ;; *************** function _DeactivateHandPosition *****************
 10145 ;; Defined at:
 10146 ;;		line 2504 in file "MotorDrive.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  motor_no        1    wreg     unsigned char 
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		wreg, status,2, status,0
 10155 ;; Tracked objects:
 10156 ;;		On entry : 1F/0
 10157 ;;		On exit  : 1F/1
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10160 ;;      Params:         0       0       0       0       0       0       0       0
 10161 ;;      Locals:         0       1       0       0       0       0       0       0
 10162 ;;      Temps:          0       2       0       0       0       0       0       0
 10163 ;;      Totals:         0       3       0       0       0       0       0       0
 10164 ;;Total ram usage:        3 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    5
 10167 ;; This function calls:
 10168 ;;		Nothing
 10169 ;; This function is called by:
 10170 ;;		_SpiCmdFunc_SearchBasePosition
 10171 ;;		_SpiCmdFunc_Search1008Position
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           
 10176                           ;psect for function _DeactivateHandPosition
 10177  143D                     _DeactivateHandPosition:
 10178                           
 10179                           ;incstack = 0
 10180                           ; Regs used in _DeactivateHandPosition: [wreg+status,2+status,0]
 10181                           ;DeactivateHandPosition@motor_no stored from wreg
 10182  143D  00A2               	movwf	DeactivateHandPosition@motor_no
 10183                           
 10184                           ;MotorDrive.c: 2504: void DeactivateHandPosition(UB motor_no);MotorDrive.c: 2505: {;Moto
      +                          rDrive.c: 2506:     motorBitOperation = (UB) (0x01 << motor_no);
 10185  143E  3001               	movlw	1
 10186  143F  00A0               	movwf	??_DeactivateHandPosition
 10187  1440  0A22               	incf	DeactivateHandPosition@motor_no,w
 10188  1441  2C43               	goto	u4574
 10189  1442                     u4575:
 10190  1442  35A0               	lslf	??_DeactivateHandPosition,f
 10191  1443                     u4574:
 10192  1443  0B89               	decfsz	9,f
 10193  1444  2C42               	goto	u4575
 10194  1445  0820               	movf	??_DeactivateHandPosition,w
 10195  1446  00A1               	movwf	??_DeactivateHandPosition+1
 10196  1447  0821               	movf	??_DeactivateHandPosition+1,w
 10197  1448  00F4               	movwf	_motorBitOperation
 10198                           
 10199                           ;MotorDrive.c: 2508:     handPositionActiveBit &= (UB) (~motorBitOperation);
 10200  1449  0974               	comf	_motorBitOperation,w
 10201  144A  00A0               	movwf	??_DeactivateHandPosition
 10202  144B  0820               	movf	??_DeactivateHandPosition,w
 10203  144C  0021               	movlb	1	; select bank1
 10204  144D  05D1               	andwf	_handPositionActiveBit^(0+128),f
 10205  144E  0008               	return
 10206  144F                     __end_of_DeactivateHandPosition:
 10207                           
 10208                           	psect	text57
 10209  142B                     __ptext57:	
 10210 ;; *************** function _SetMotorStop *****************
 10211 ;; Defined at:
 10212 ;;		line 2016 in file "MotorDrive.c"
 10213 ;; Parameters:    Size  Location     Type
 10214 ;;  motor_no        1    wreg     unsigned char 
 10215 ;; Auto vars:     Size  Location     Type
 10216 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  1    wreg      void 
 10219 ;; Registers used:
 10220 ;;		wreg, status,2, status,0
 10221 ;; Tracked objects:
 10222 ;;		On entry : 1F/0
 10223 ;;		On exit  : 1F/1
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10226 ;;      Params:         0       0       0       0       0       0       0       0
 10227 ;;      Locals:         0       1       0       0       0       0       0       0
 10228 ;;      Temps:          0       2       0       0       0       0       0       0
 10229 ;;      Totals:         0       3       0       0       0       0       0       0
 10230 ;;Total ram usage:        3 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    5
 10233 ;; This function calls:
 10234 ;;		Nothing
 10235 ;; This function is called by:
 10236 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function _SetMotorStop
 10242  142B                     _SetMotorStop:
 10243                           
 10244                           ;incstack = 0
 10245                           ; Regs used in _SetMotorStop: [wreg+status,2+status,0]
 10246                           ;SetMotorStop@motor_no stored from wreg
 10247  142B  00A2               	movwf	SetMotorStop@motor_no
 10248                           
 10249                           ;MotorDrive.c: 2016: void SetMotorStop(UB motor_no);MotorDrive.c: 2017: {;MotorDrive.c: 
      +                          2018:     motorBitOperation = (UB) (0x01 << motor_no);
 10250  142C  3001               	movlw	1
 10251  142D  00A0               	movwf	??_SetMotorStop
 10252  142E  0A22               	incf	SetMotorStop@motor_no,w
 10253  142F  2C31               	goto	u4454
 10254  1430                     u4455:
 10255  1430  35A0               	lslf	??_SetMotorStop,f
 10256  1431                     u4454:
 10257  1431  0B89               	decfsz	9,f
 10258  1432  2C30               	goto	u4455
 10259  1433  0820               	movf	??_SetMotorStop,w
 10260  1434  00A1               	movwf	??_SetMotorStop+1
 10261  1435  0821               	movf	??_SetMotorStop+1,w
 10262  1436  00F4               	movwf	_motorBitOperation
 10263                           
 10264                           ;MotorDrive.c: 2020:     reqStopMotorBit |= motorBitOperation;
 10265  1437  0874               	movf	_motorBitOperation,w
 10266  1438  00A0               	movwf	??_SetMotorStop
 10267  1439  0820               	movf	??_SetMotorStop,w
 10268  143A  0021               	movlb	1	; select bank1
 10269  143B  04D8               	iorwf	_reqStopMotorBit^(0+128),f
 10270  143C  0008               	return
 10271  143D                     __end_of_SetMotorStop:
 10272                           
 10273                           	psect	text58
 10274  1186                     __ptext58:	
 10275 ;; *************** function _SetAfterDetectLoadFunc *****************
 10276 ;; Defined at:
 10277 ;;		line 1643 in file "MotorDrive.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;  motor_no        1    wreg     unsigned char 
 10280 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10281 ;;		 -> VerifyHandPosition_LoadPosition(1), AfterDetectedLoadPosition(1), 
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      void 
 10286 ;; Registers used:
 10287 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10288 ;; Tracked objects:
 10289 ;;		On entry : 1F/0
 10290 ;;		On exit  : 1F/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10293 ;;      Params:         0       2       0       0       0       0       0       0
 10294 ;;      Locals:         0       1       0       0       0       0       0       0
 10295 ;;      Temps:          0       0       0       0       0       0       0       0
 10296 ;;      Totals:         0       3       0       0       0       0       0       0
 10297 ;;Total ram usage:        3 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    5
 10300 ;; This function calls:
 10301 ;;		Nothing
 10302 ;; This function is called by:
 10303 ;;		_SetMotorPositionSearchStart
 10304 ;;		_SetMotorCorrectPositionStart
 10305 ;;		_AfterDetectedLoadPosition
 10306 ;;		_SetFwdPulseWithCorrectProc
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           
 10311                           ;psect for function _SetAfterDetectLoadFunc
 10312  1186                     _SetAfterDetectLoadFunc:
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _SetAfterDetectLoadFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10316                           ;SetAfterDetectLoadFunc@motor_no stored from wreg
 10317  1186  00A2               	movwf	SetAfterDetectLoadFunc@motor_no
 10318                           
 10319                           ;MotorDrive.c: 1643: void SetAfterDetectLoadFunc(UB motor_no, void ( * func)(UB motor_no
      +                          ));MotorDrive.c: 1644: {;MotorDrive.c: 1645:     cbAfterDetectLoadFunc[ motor_no ] = fun
      +                          c;
 10320  1187  3522               	lslf	SetAfterDetectLoadFunc@motor_no,w
 10321  1188  3EA0               	addlw	(low (_cbAfterDetectLoadFunc| 0))& (0+255)
 10322  1189  0086               	movwf	6
 10323  118A  0187               	clrf	7
 10324  118B  0820               	movf	SetAfterDetectLoadFunc@func,w
 10325  118C  3FC0               	movwi [0]fsr1
 10326  118D  0821               	movf	SetAfterDetectLoadFunc@func+1,w
 10327  118E  3FC1               	movwi [1]fsr1
 10328  118F  0008               	return
 10329  1190                     __end_of_SetAfterDetectLoadFunc:
 10330                           
 10331                           	psect	text59
 10332  117C                     __ptext59:	
 10333 ;; *************** function _SetAfterMotorStopFunc *****************
 10334 ;; Defined at:
 10335 ;;		line 1630 in file "MotorDrive.c"
 10336 ;; Parameters:    Size  Location     Type
 10337 ;;  motor_no        1    wreg     unsigned char 
 10338 ;;  func            2    0[BANK0 ] PTR FTN(unsigned char ,)
 10339 ;;		 -> SetFwdPulseWithCorrectProc(1), SpiCmdFunc_Search1008Position(1), SpiCmdFunc_DisableExcitating(1), SpiCmdFunc_Ena
      +bleExcitating(1), 
 10340 ;;		 -> SpiCmdFunc_StopDetectVrs(1), SpiCmdFunc_StartDetectVrs(1), SpiCmdFunc_RevPulsePositionCtl(1), SpiCmdFunc_FwdPuls
      +ePositionCtl(1), 
 10341 ;;		 -> SpiCmdFunc_FwdPulseWithCorrect(1), SpiCmdFunc_SearchBasePosition(1), SpiCmdFunc_SearchLoadPosition(1), SpiCmdFun
      +c_FwdPulseWithShake(1), 
 10342 ;;		 -> SpiCmdFunc_RevPulseNormal(1), SpiCmdFunc_FwdPulseNormal(1), SpiCmdFunc_Test(1), SPIControl_SetNotification(1), 
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      void 
 10347 ;; Registers used:
 10348 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10349 ;; Tracked objects:
 10350 ;;		On entry : 1F/0
 10351 ;;		On exit  : 1F/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10354 ;;      Params:         0       2       0       0       0       0       0       0
 10355 ;;      Locals:         0       1       0       0       0       0       0       0
 10356 ;;      Temps:          0       0       0       0       0       0       0       0
 10357 ;;      Totals:         0       3       0       0       0       0       0       0
 10358 ;;Total ram usage:        3 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    5
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_AfterDetectedLoadPosition
 10365 ;;		_SPIControl_ExecuteCommand
 10366 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           
 10371                           ;psect for function _SetAfterMotorStopFunc
 10372  117C                     _SetAfterMotorStopFunc:
 10373                           
 10374                           ;incstack = 0
 10375                           ; Regs used in _SetAfterMotorStopFunc: [wreg+fsr1l+fsr1h+status,2+status,0]
 10376                           ;SetAfterMotorStopFunc@motor_no stored from wreg
 10377  117C  00A2               	movwf	SetAfterMotorStopFunc@motor_no
 10378                           
 10379                           ;MotorDrive.c: 1630: void SetAfterMotorStopFunc(UB motor_no, void ( * func)(UB motor_no)
      +                          );MotorDrive.c: 1631: {;MotorDrive.c: 1632:     cbAfterMotorStopFunc[ motor_no ] = func;
 10380  117D  3522               	lslf	SetAfterMotorStopFunc@motor_no,w
 10381  117E  3EB0               	addlw	(low (_cbAfterMotorStopFunc| 0))& (0+255)
 10382  117F  0086               	movwf	6
 10383  1180  0187               	clrf	7
 10384  1181  0820               	movf	SetAfterMotorStopFunc@func,w
 10385  1182  3FC0               	movwi [0]fsr1
 10386  1183  0821               	movf	SetAfterMotorStopFunc@func+1,w
 10387  1184  3FC1               	movwi [1]fsr1
 10388  1185  0008               	return
 10389  1186                     __end_of_SetAfterMotorStopFunc:
 10390                           
 10391                           	psect	text60
 10392  14E8                     __ptext60:	
 10393 ;; *************** function _GetIsMotorActive *****************
 10394 ;; Defined at:
 10395 ;;		line 2621 in file "MotorDrive.c"
 10396 ;; Parameters:    Size  Location     Type
 10397 ;;  motor_no        1    wreg     unsigned char 
 10398 ;; Auto vars:     Size  Location     Type
 10399 ;;  motor_no        1    2[BANK0 ] unsigned char 
 10400 ;;  res             1    3[BANK0 ] unsigned char 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      unsigned char 
 10403 ;; Registers used:
 10404 ;;		wreg, status,2, status,0
 10405 ;; Tracked objects:
 10406 ;;		On entry : 1F/0
 10407 ;;		On exit  : 1F/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10410 ;;      Params:         0       0       0       0       0       0       0       0
 10411 ;;      Locals:         0       2       0       0       0       0       0       0
 10412 ;;      Temps:          0       2       0       0       0       0       0       0
 10413 ;;      Totals:         0       4       0       0       0       0       0       0
 10414 ;;Total ram usage:        4 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    5
 10417 ;; This function calls:
 10418 ;;		Nothing
 10419 ;; This function is called by:
 10420 ;;		_SPIControl_ExecuteCommand
 10421 ;;		_SpiCmdFunc_FwdPulseWithCorrect
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           
 10426                           ;psect for function _GetIsMotorActive
 10427  14E8                     _GetIsMotorActive:
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _GetIsMotorActive: [wreg+status,2+status,0]
 10431                           ;GetIsMotorActive@motor_no stored from wreg
 10432  14E8  00A2               	movwf	GetIsMotorActive@motor_no
 10433                           
 10434                           ;MotorDrive.c: 2621: UB GetIsMotorActive(UB motor_no);MotorDrive.c: 2622: {;MotorDrive.c
      +                          : 2623:     UB res = 0;
 10435  14E9  01A3               	clrf	GetIsMotorActive@res
 10436                           
 10437                           ;MotorDrive.c: 2626:     motorBitOperation = (UB) (0x01 << motor_no);
 10438  14EA  3001               	movlw	1
 10439  14EB  00A0               	movwf	??_GetIsMotorActive
 10440  14EC  0A22               	incf	GetIsMotorActive@motor_no,w
 10441  14ED  2CEF               	goto	u4584
 10442  14EE                     u4585:
 10443  14EE  35A0               	lslf	??_GetIsMotorActive,f
 10444  14EF                     u4584:
 10445  14EF  0B89               	decfsz	9,f
 10446  14F0  2CEE               	goto	u4585
 10447  14F1  0820               	movf	??_GetIsMotorActive,w
 10448  14F2  00A1               	movwf	??_GetIsMotorActive+1
 10449  14F3  0821               	movf	??_GetIsMotorActive+1,w
 10450  14F4  00F4               	movwf	_motorBitOperation
 10451                           
 10452                           ;MotorDrive.c: 2628:     if (motorActiveBit & motorBitOperation) {
 10453  14F5  085A               	movf	_motorActiveBit,w
 10454  14F6  0574               	andwf	_motorBitOperation,w
 10455  14F7  1903               	btfsc	3,2
 10456  14F8  2CFB               	goto	l6080
 10457                           
 10458                           ;MotorDrive.c: 2629:         res = 1;
 10459  14F9  01A3               	clrf	GetIsMotorActive@res
 10460  14FA  0AA3               	incf	GetIsMotorActive@res,f
 10461  14FB                     l6080:
 10462                           
 10463                           ;MotorDrive.c: 2632:     return res;
 10464  14FB  0823               	movf	GetIsMotorActive@res,w
 10465  14FC  0008               	return
 10466  14FD                     __end_of_GetIsMotorActive:
 10467                           
 10468                           	psect	text61
 10469  1746                     __ptext61:	
 10470 ;; *************** function _UpdateTargetPosition *****************
 10471 ;; Defined at:
 10472 ;;		line 1999 in file "MotorDrive.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;  motor_no        1    wreg     unsigned char 
 10475 ;;  steps           2   13[BANK0 ] short 
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;  motor_no        1   17[BANK0 ] unsigned char 
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      void 
 10480 ;; Registers used:
 10481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10482 ;; Tracked objects:
 10483 ;;		On entry : 1F/0
 10484 ;;		On exit  : 1F/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10487 ;;      Params:         0       2       0       0       0       0       0       0
 10488 ;;      Locals:         0       1       0       0       0       0       0       0
 10489 ;;      Temps:          0       2       0       0       0       0       0       0
 10490 ;;      Totals:         0       5       0       0       0       0       0       0
 10491 ;;Total ram usage:        5 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    6
 10494 ;; This function calls:
 10495 ;;		_CorrectPosition
 10496 ;; This function is called by:
 10497 ;;		_SetFwdPulseWithCorrectProc
 10498 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10499 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           
 10504                           ;psect for function _UpdateTargetPosition
 10505  1746                     _UpdateTargetPosition:
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _UpdateTargetPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10509                           ;UpdateTargetPosition@motor_no stored from wreg
 10510  1746  00B1               	movwf	UpdateTargetPosition@motor_no
 10511                           
 10512                           ;MotorDrive.c: 1999: void UpdateTargetPosition(UB motor_no, H steps);MotorDrive.c: 2000:
      +                           {;MotorDrive.c: 2002:     targetPosition[ motor_no ] += steps;
 10513  1747  3531               	lslf	UpdateTargetPosition@motor_no,w
 10514  1748  3E60               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10515  1749  0086               	movwf	6
 10516  174A  3001               	movlw	1	; select bank2/3
 10517  174B  0087               	movwf	7
 10518  174C  082D               	movf	UpdateTargetPosition@steps,w
 10519  174D  0781               	addwf	1,f
 10520  174E  3141               	addfsr 1,1
 10521  174F  082E               	movf	UpdateTargetPosition@steps+1,w
 10522  1750  3D81               	addwfc	1,f
 10523  1751  317F               	addfsr 1,-1
 10524                           
 10525                           ;MotorDrive.c: 2004:     CorrectPosition(&targetPosition[ motor_no ], TblMaxSteps[ motor
      +                          _no ]);
 10526  1752  3531               	lslf	UpdateTargetPosition@motor_no,w
 10527  1753  3E60               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10528  1754  00A6               	movwf	CorrectPosition@pos
 10529  1755  3001               	movlw	1
 10530  1756  00A7               	movwf	CorrectPosition@pos+1
 10531  1757  0831               	movf	UpdateTargetPosition@motor_no,w
 10532  1758  00AF               	movwf	??_UpdateTargetPosition
 10533  1759  01B0               	clrf	??_UpdateTargetPosition+1
 10534  175A  35AF               	lslf	??_UpdateTargetPosition,f
 10535  175B  0DB0               	rlf	??_UpdateTargetPosition+1,f
 10536  175C  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10537  175D  072F               	addwf	??_UpdateTargetPosition,w
 10538  175E  0084               	movwf	4
 10539  175F  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10540  1760  3D30               	addwfc	??_UpdateTargetPosition+1,w
 10541  1761  0085               	movwf	5
 10542  1762  3F00               	moviw [0]fsr0
 10543  1763  00A8               	movwf	CorrectPosition@max
 10544  1764  3F01               	moviw [1]fsr0
 10545  1765  00A9               	movwf	CorrectPosition@max+1
 10546  1766  3188  205E         	fcall	_CorrectPosition
 10547  1768  0008               	return
 10548  1769                     __end_of_UpdateTargetPosition:
 10549                           
 10550                           	psect	text62
 10551  05F0                     __ptext62:	
 10552 ;; *************** function _CalcMotorStepCounter *****************
 10553 ;; Defined at:
 10554 ;;		line 1727 in file "MotorDrive.c"
 10555 ;; Parameters:    Size  Location     Type
 10556 ;;  motor_no        1    wreg     unsigned char 
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;  motor_no        1   26[BANK0 ] unsigned char 
 10559 ;;  steps           2   24[BANK0 ] short 
 10560 ;;  motor_bit       1   23[BANK0 ] unsigned char 
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      void 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 1F/0
 10567 ;;		On exit  : 1E/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10570 ;;      Params:         0       0       0       0       0       0       0       0
 10571 ;;      Locals:         0       4       0       0       0       0       0       0
 10572 ;;      Temps:          0       7       0       0       0       0       0       0
 10573 ;;      Totals:         0      11       0       0       0       0       0       0
 10574 ;;Total ram usage:       11 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    7
 10577 ;; This function calls:
 10578 ;;		_CorrectPosition
 10579 ;;		_PriorUpdateCorrentPosition
 10580 ;;		_SetMotorDirection
 10581 ;; This function is called by:
 10582 ;;		_MoveTargetPosition
 10583 ;;		_SetFwdPulseWithCorrectProc
 10584 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 10585 ;;		_SpiCmdFunc_RevPulsePositionCtl
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           
 10590                           ;psect for function _CalcMotorStepCounter
 10591  05F0                     _CalcMotorStepCounter:
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _CalcMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10595                           ;CalcMotorStepCounter@motor_no stored from wreg
 10596  05F0  00BA               	movwf	CalcMotorStepCounter@motor_no
 10597                           
 10598                           ;MotorDrive.c: 1727: void CalcMotorStepCounter(UB motor_no);MotorDrive.c: 1728: {;MotorD
      +                          rive.c: 1729:     H steps;;MotorDrive.c: 1730:     UB motor_bit = (UB) (0x01 << motor_no
      +                          );
 10599  05F1  3001               	movlw	1
 10600  05F2  00B0               	movwf	??_CalcMotorStepCounter
 10601  05F3  0A3A               	incf	CalcMotorStepCounter@motor_no,w
 10602  05F4  2DF6               	goto	u4354
 10603  05F5                     u4355:
 10604  05F5  35B0               	lslf	??_CalcMotorStepCounter,f
 10605  05F6                     u4354:
 10606  05F6  0B89               	decfsz	9,f
 10607  05F7  2DF5               	goto	u4355
 10608  05F8  0830               	movf	??_CalcMotorStepCounter,w
 10609  05F9  00B1               	movwf	??_CalcMotorStepCounter+1
 10610  05FA  0831               	movf	??_CalcMotorStepCounter+1,w
 10611  05FB  00B7               	movwf	CalcMotorStepCounter@motor_bit
 10612                           
 10613                           ;MotorDrive.c: 1733:     if (0 == motor_no) {
 10614  05FC  083A               	movf	CalcMotorStepCounter@motor_no,w
 10615  05FD  1D03               	btfss	3,2
 10616  05FE  2E1A               	goto	l5850
 10617                           
 10618                           ;MotorDrive.c: 1734:         if (driveDirectionBit & motor_bit) {
 10619  05FF  085B               	movf	_driveDirectionBit,w
 10620  0600  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10621  0601  1903               	btfsc	3,2
 10622  0602  2E0D               	goto	l5846
 10623                           
 10624                           ;MotorDrive.c: 1735:             currentPosition[ motor_no ] -= motorM0StepCounter;
 10625  0603  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10626  0604  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10627  0605  0086               	movwf	6
 10628  0606  0187               	clrf	7
 10629  0607  0855               	movf	_motorM0StepCounter,w
 10630  0608  0281               	subwf	1,f
 10631  0609  3141               	addfsr 1,1
 10632  060A  0856               	movf	_motorM0StepCounter+1,w
 10633  060B  3B81               	subwfb	1,f
 10634  060C  2E16               	goto	L9
 10635  060D                     l5846:	
 10636                           ;MotorDrive.c: 1736:         } else {
 10637                           
 10638                           
 10639                           ;MotorDrive.c: 1737:             currentPosition[ motor_no ] += motorM0StepCounter;
 10640  060D  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10641  060E  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10642  060F  0086               	movwf	6
 10643  0610  0187               	clrf	7
 10644  0611  0855               	movf	_motorM0StepCounter,w
 10645  0612  0781               	addwf	1,f
 10646  0613  3141               	addfsr 1,1
 10647  0614  0856               	movf	_motorM0StepCounter+1,w
 10648  0615  3D81               	addwfc	1,f
 10649  0616                     L9:
 10650  0616  317F               	addfsr 1,-1
 10651                           
 10652                           ;MotorDrive.c: 1739:         motorM0StepCounter = 0;
 10653  0617  01D5               	clrf	_motorM0StepCounter
 10654  0618  01D6               	clrf	_motorM0StepCounter+1
 10655                           
 10656                           ;MotorDrive.c: 1740:     } else {
 10657  0619  2E34               	goto	l5858
 10658  061A                     l5850:
 10659                           
 10660                           ;MotorDrive.c: 1741:         if (driveDirectionBit & motor_bit) {
 10661  061A  085B               	movf	_driveDirectionBit,w
 10662  061B  0537               	andwf	CalcMotorStepCounter@motor_bit,w
 10663  061C  1903               	btfsc	3,2
 10664  061D  2E28               	goto	l5854
 10665                           
 10666                           ;MotorDrive.c: 1742:             currentPosition[ motor_no ] -= motorM1StepCounter;
 10667  061E  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10668  061F  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10669  0620  0086               	movwf	6
 10670  0621  0187               	clrf	7
 10671  0622  0853               	movf	_motorM1StepCounter,w
 10672  0623  0281               	subwf	1,f
 10673  0624  3141               	addfsr 1,1
 10674  0625  0854               	movf	_motorM1StepCounter+1,w
 10675  0626  3B81               	subwfb	1,f
 10676  0627  2E31               	goto	L10
 10677  0628                     l5854:	
 10678                           ;MotorDrive.c: 1743:         } else {
 10679                           
 10680                           
 10681                           ;MotorDrive.c: 1744:             currentPosition[ motor_no ] += motorM1StepCounter;
 10682  0628  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10683  0629  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10684  062A  0086               	movwf	6
 10685  062B  0187               	clrf	7
 10686  062C  0853               	movf	_motorM1StepCounter,w
 10687  062D  0781               	addwf	1,f
 10688  062E  3141               	addfsr 1,1
 10689  062F  0854               	movf	_motorM1StepCounter+1,w
 10690  0630  3D81               	addwfc	1,f
 10691  0631                     L10:
 10692  0631  317F               	addfsr 1,-1
 10693                           
 10694                           ;MotorDrive.c: 1746:         motorM1StepCounter = 0;
 10695  0632  01D3               	clrf	_motorM1StepCounter
 10696  0633  01D4               	clrf	_motorM1StepCounter+1
 10697  0634                     l5858:
 10698                           
 10699                           ;MotorDrive.c: 1749:     CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ moto
      +                          r_no ]);
 10700  0634  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10701  0635  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10702  0636  00A6               	movwf	CorrectPosition@pos
 10703  0637  3000               	movlw	0
 10704  0638  00A7               	movwf	CorrectPosition@pos+1
 10705  0639  083A               	movf	CalcMotorStepCounter@motor_no,w
 10706  063A  00B0               	movwf	??_CalcMotorStepCounter
 10707  063B  01B1               	clrf	??_CalcMotorStepCounter+1
 10708  063C  35B0               	lslf	??_CalcMotorStepCounter,f
 10709  063D  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10710  063E  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10711  063F  0730               	addwf	??_CalcMotorStepCounter,w
 10712  0640  0084               	movwf	4
 10713  0641  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10714  0642  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10715  0643  0085               	movwf	5
 10716  0644  3F00               	moviw [0]fsr0
 10717  0645  00A8               	movwf	CorrectPosition@max
 10718  0646  3F01               	moviw [1]fsr0
 10719  0647  00A9               	movwf	CorrectPosition@max+1
 10720  0648  3188  205E  3185   	fcall	_CorrectPosition
 10721                           
 10722                           ;MotorDrive.c: 1752:     SetMotorDirection(motor_no, 1);
 10723  064B  01A0               	clrf	SetMotorDirection@dir
 10724  064C  0AA0               	incf	SetMotorDirection@dir,f
 10725  064D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10726  064E  3195  25B7  3185   	fcall	_SetMotorDirection
 10727                           
 10728                           ;MotorDrive.c: 1753:     steps = targetPosition[ motor_no ] - currentPosition[ motor_no 
      +                          ];
 10729  0651  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10730  0652  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10731  0653  0086               	movwf	6
 10732  0654  0187               	clrf	7
 10733  0655  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10734  0656  3E60               	addlw	(low (_targetPosition| (0+256)))& (0+255)
 10735  0657  0084               	movwf	4
 10736  0658  3001               	movlw	1	; select bank2/3
 10737  0659  0085               	movwf	5
 10738  065A  3F40               	moviw [0]fsr1
 10739  065B  0200               	subwf	0,w
 10740  065C  00B8               	movwf	CalcMotorStepCounter@steps
 10741  065D  3101               	addfsr 0,1
 10742  065E  3F41               	moviw [1]fsr1
 10743  065F  3B00               	subwfb	0,w
 10744  0660  00B9               	movwf	CalcMotorStepCounter@steps+1
 10745  0661                     l5866:	
 10746                           ;MotorDrive.c: 1755:     while (steps < 0) {
 10747                           
 10748                           
 10749                           ;MotorDrive.c: 1755:     while (steps < 0) {
 10750  0661  1FB9               	btfss	CalcMotorStepCounter@steps+1,7
 10751  0662  2E77               	goto	l5868
 10752                           
 10753                           ;MotorDrive.c: 1756:         steps += TblMaxSteps[ motor_no ];
 10754  0663  083A               	movf	CalcMotorStepCounter@motor_no,w
 10755  0664  00B0               	movwf	??_CalcMotorStepCounter
 10756  0665  01B1               	clrf	??_CalcMotorStepCounter+1
 10757  0666  35B0               	lslf	??_CalcMotorStepCounter,f
 10758  0667  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10759  0668  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10760  0669  0730               	addwf	??_CalcMotorStepCounter,w
 10761  066A  0084               	movwf	4
 10762  066B  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10763  066C  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10764  066D  0085               	movwf	5
 10765  066E  3F00               	moviw [0]fsr0
 10766  066F  00B2               	movwf	??_CalcMotorStepCounter+2
 10767  0670  3F01               	moviw [1]fsr0
 10768  0671  00B3               	movwf	??_CalcMotorStepCounter+3
 10769  0672  0832               	movf	??_CalcMotorStepCounter+2,w
 10770  0673  07B8               	addwf	CalcMotorStepCounter@steps,f
 10771  0674  0833               	movf	??_CalcMotorStepCounter+3,w
 10772  0675  3DB9               	addwfc	CalcMotorStepCounter@steps+1,f
 10773  0676  2E61               	goto	l5866
 10774  0677                     l5868:
 10775                           
 10776                           ;MotorDrive.c: 1759:     if ((steps * 2) > TblMaxSteps[ motor_no ]) {
 10777  0677  0839               	movf	CalcMotorStepCounter@steps+1,w
 10778  0678  00B1               	movwf	??_CalcMotorStepCounter+1
 10779  0679  0838               	movf	CalcMotorStepCounter@steps,w
 10780  067A  00B0               	movwf	??_CalcMotorStepCounter
 10781  067B  35B0               	lslf	??_CalcMotorStepCounter,f
 10782  067C  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10783  067D  083A               	movf	CalcMotorStepCounter@motor_no,w
 10784  067E  00B2               	movwf	??_CalcMotorStepCounter+2
 10785  067F  01B3               	clrf	??_CalcMotorStepCounter+3
 10786  0680  35B2               	lslf	??_CalcMotorStepCounter+2,f
 10787  0681  0DB3               	rlf	??_CalcMotorStepCounter+3,f
 10788  0682  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10789  0683  0732               	addwf	??_CalcMotorStepCounter+2,w
 10790  0684  0084               	movwf	4
 10791  0685  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10792  0686  3D33               	addwfc	??_CalcMotorStepCounter+3,w
 10793  0687  0085               	movwf	5
 10794  0688  3F00               	moviw [0]fsr0
 10795  0689  00B4               	movwf	??_CalcMotorStepCounter+4
 10796  068A  3F01               	moviw [1]fsr0
 10797  068B  00B5               	movwf	??_CalcMotorStepCounter+5
 10798  068C  0835               	movf	??_CalcMotorStepCounter+5,w
 10799  068D  3A80               	xorlw	128
 10800  068E  00B6               	movwf	??_CalcMotorStepCounter+6
 10801  068F  0831               	movf	??_CalcMotorStepCounter+1,w
 10802  0690  3A80               	xorlw	128
 10803  0691  0236               	subwf	??_CalcMotorStepCounter+6,w
 10804  0692  1D03               	skipz
 10805  0693  2E96               	goto	u4405
 10806  0694  0830               	movf	??_CalcMotorStepCounter,w
 10807  0695  0234               	subwf	??_CalcMotorStepCounter+4,w
 10808  0696                     u4405:
 10809  0696  1803               	skipnc
 10810  0697  2EB3               	goto	l5874
 10811                           
 10812                           ;MotorDrive.c: 1760:         SetMotorDirection(motor_no, 0);
 10813  0698  0020               	movlb	0	; select bank0
 10814  0699  01A0               	clrf	SetMotorDirection@dir
 10815  069A  083A               	movf	CalcMotorStepCounter@motor_no,w
 10816  069B  3195  25B7  3185   	fcall	_SetMotorDirection
 10817                           
 10818                           ;MotorDrive.c: 1761:         steps = TblMaxSteps[ motor_no ] - steps;
 10819  069E  083A               	movf	CalcMotorStepCounter@motor_no,w
 10820  069F  00B0               	movwf	??_CalcMotorStepCounter
 10821  06A0  01B1               	clrf	??_CalcMotorStepCounter+1
 10822  06A1  35B0               	lslf	??_CalcMotorStepCounter,f
 10823  06A2  0DB1               	rlf	??_CalcMotorStepCounter+1,f
 10824  06A3  3056               	movlw	low (_TblMaxSteps| (0+32768))
 10825  06A4  0730               	addwf	??_CalcMotorStepCounter,w
 10826  06A5  0084               	movwf	4
 10827  06A6  3098               	movlw	high (_TblMaxSteps| (0+32768))
 10828  06A7  3D31               	addwfc	??_CalcMotorStepCounter+1,w
 10829  06A8  0085               	movwf	5
 10830  06A9  3F00               	moviw [0]fsr0
 10831  06AA  00B2               	movwf	??_CalcMotorStepCounter+2
 10832  06AB  3F01               	moviw [1]fsr0
 10833  06AC  00B3               	movwf	??_CalcMotorStepCounter+3
 10834  06AD  0838               	movf	CalcMotorStepCounter@steps,w
 10835  06AE  0232               	subwf	??_CalcMotorStepCounter+2,w
 10836  06AF  00B8               	movwf	CalcMotorStepCounter@steps
 10837  06B0  0839               	movf	CalcMotorStepCounter@steps+1,w
 10838  06B1  3B33               	subwfb	??_CalcMotorStepCounter+3,w
 10839  06B2  00B9               	movwf	CalcMotorStepCounter@steps+1
 10840  06B3                     l5874:
 10841                           
 10842                           ;MotorDrive.c: 1764:     motorStepCounterSet[ motor_no ] = steps;
 10843  06B3  0020               	movlb	0	; select bank0
 10844  06B4  353A               	lslf	CalcMotorStepCounter@motor_no,w
 10845  06B5  3EAC               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10846  06B6  0086               	movwf	6
 10847  06B7  0187               	clrf	7
 10848  06B8  0838               	movf	CalcMotorStepCounter@steps,w
 10849  06B9  3FC0               	movwi [0]fsr1
 10850  06BA  0839               	movf	CalcMotorStepCounter@steps+1,w
 10851  06BB  3FC1               	movwi [1]fsr1
 10852                           
 10853                           ;MotorDrive.c: 1766:     PriorUpdateCorrentPosition(motor_no);
 10854  06BC  083A               	movf	CalcMotorStepCounter@motor_no,w
 10855  06BD  3189  219E         	fcall	_PriorUpdateCorrentPosition
 10856  06BF  0008               	return
 10857  06C0                     __end_of_CalcMotorStepCounter:
 10858                           
 10859                           	psect	text63
 10860  1255                     __ptext63:	
 10861 ;; *************** function _SetMotorStepCounter *****************
 10862 ;; Defined at:
 10863 ;;		line 1687 in file "MotorDrive.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  motor_no        1    wreg     unsigned char 
 10866 ;;  steps           2   16[BANK0 ] short 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  motor_no        1   18[BANK0 ] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      void 
 10871 ;; Registers used:
 10872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 1F/0
 10875 ;;		On exit  : 1E/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10878 ;;      Params:         0       2       0       0       0       0       0       0
 10879 ;;      Locals:         0       1       0       0       0       0       0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0       0
 10881 ;;      Totals:         0       3       0       0       0       0       0       0
 10882 ;;Total ram usage:        3 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    7
 10885 ;; This function calls:
 10886 ;;		_PriorUpdateCorrentPosition
 10887 ;; This function is called by:
 10888 ;;		_main
 10889 ;;		_SpiCmdFunc_FwdPulseNormal
 10890 ;;		_SpiCmdFunc_RevPulseNormal
 10891 ;;		_SpiCmdFunc_SearchBasePosition
 10892 ;;		_SpiCmdFunc_Search1008Position
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function _SetMotorStepCounter
 10898  1255                     _SetMotorStepCounter:
 10899                           
 10900                           ;incstack = 0
 10901                           ; Regs used in _SetMotorStepCounter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10902                           ;SetMotorStepCounter@motor_no stored from wreg
 10903  1255  00B2               	movwf	SetMotorStepCounter@motor_no
 10904                           
 10905                           ;MotorDrive.c: 1687: void SetMotorStepCounter(UB motor_no, H steps);MotorDrive.c: 1688: 
      +                          {;MotorDrive.c: 1689:     motorStepCounterSet[ motor_no ] = steps;
 10906  1256  3532               	lslf	SetMotorStepCounter@motor_no,w
 10907  1257  3EAC               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10908  1258  0086               	movwf	6
 10909  1259  0187               	clrf	7
 10910  125A  0830               	movf	SetMotorStepCounter@steps,w
 10911  125B  3FC0               	movwi [0]fsr1
 10912  125C  0831               	movf	SetMotorStepCounter@steps+1,w
 10913  125D  3FC1               	movwi [1]fsr1
 10914                           
 10915                           ;MotorDrive.c: 1691:     PriorUpdateCorrentPosition(motor_no);
 10916  125E  0832               	movf	SetMotorStepCounter@motor_no,w
 10917  125F  3189  219E         	fcall	_PriorUpdateCorrentPosition
 10918  1261  0008               	return
 10919  1262                     __end_of_SetMotorStepCounter:
 10920                           
 10921                           	psect	text64
 10922  099E                     __ptext64:	
 10923 ;; *************** function _PriorUpdateCorrentPosition *****************
 10924 ;; Defined at:
 10925 ;;		line 1973 in file "MotorDrive.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  motor_no        1    wreg     unsigned char 
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;  motor_no        1   15[BANK0 ] unsigned char 
 10930 ;; Return value:  Size  Location     Type
 10931 ;;                  1    wreg      void 
 10932 ;; Registers used:
 10933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10934 ;; Tracked objects:
 10935 ;;		On entry : 1F/0
 10936 ;;		On exit  : 1E/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10939 ;;      Params:         0       0       0       0       0       0       0       0
 10940 ;;      Locals:         0       1       0       0       0       0       0       0
 10941 ;;      Temps:          0       2       0       0       0       0       0       0
 10942 ;;      Totals:         0       3       0       0       0       0       0       0
 10943 ;;Total ram usage:        3 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    6
 10946 ;; This function calls:
 10947 ;;		_CorrectPosition
 10948 ;; This function is called by:
 10949 ;;		_SetMotorStepCounter
 10950 ;;		_CalcMotorStepCounter
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _PriorUpdateCorrentPosition
 10956  099E                     _PriorUpdateCorrentPosition:
 10957                           
 10958                           ;incstack = 0
 10959                           ; Regs used in _PriorUpdateCorrentPosition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10960                           ;PriorUpdateCorrentPosition@motor_no stored from wreg
 10961  099E  00AF               	movwf	PriorUpdateCorrentPosition@motor_no
 10962                           
 10963                           ;MotorDrive.c: 1973: void PriorUpdateCorrentPosition(UB motor_no);MotorDrive.c: 1974: {;
      +                          MotorDrive.c: 1975:     motorBitOperation = (UB) (0x01 << motor_no);
 10964  099F  3001               	movlw	1
 10965  09A0  00AD               	movwf	??_PriorUpdateCorrentPosition
 10966  09A1  0A2F               	incf	PriorUpdateCorrentPosition@motor_no,w
 10967  09A2  29A4               	goto	u4194
 10968  09A3                     u4195:
 10969  09A3  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 10970  09A4                     u4194:
 10971  09A4  0B89               	decfsz	9,f
 10972  09A5  29A3               	goto	u4195
 10973  09A6  082D               	movf	??_PriorUpdateCorrentPosition,w
 10974  09A7  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 10975  09A8  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 10976  09A9  00F4               	movwf	_motorBitOperation
 10977                           
 10978                           ;MotorDrive.c: 1977:     if (handPositionActiveBit & motorBitOperation) {
 10979  09AA  0021               	movlb	1	; select bank1
 10980  09AB  0851               	movf	_handPositionActiveBit^(0+128),w
 10981  09AC  0574               	andwf	_motorBitOperation,w
 10982  09AD  1903               	btfsc	3,2
 10983  09AE  0008               	return
 10984                           
 10985                           ;MotorDrive.c: 1979:         if (driveDirectionBit & motorBitOperation) {
 10986  09AF  0020               	movlb	0	; select bank0
 10987  09B0  085B               	movf	_driveDirectionBit,w
 10988  09B1  0574               	andwf	_motorBitOperation,w
 10989  09B2  1903               	btfsc	3,2
 10990  09B3  29C3               	goto	l5658
 10991                           
 10992                           ;MotorDrive.c: 1981:             currentPosition[ motor_no ] += motorStepCounterSet[ mot
      +                          or_no ];
 10993  09B4  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10994  09B5  3EAC               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 10995  09B6  0086               	movwf	6
 10996  09B7  0187               	clrf	7
 10997  09B8  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 10998  09B9  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 10999  09BA  0084               	movwf	4
 11000  09BB  0185               	clrf	5
 11001  09BC  3F40               	moviw [0]fsr1
 11002  09BD  0780               	addwf	0,f
 11003  09BE  3101               	addfsr 0,1
 11004  09BF  3F41               	moviw [1]fsr1
 11005  09C0  3D80               	addwfc	0,f
 11006  09C1  313F               	addfsr 0,-1
 11007                           
 11008                           ;MotorDrive.c: 1982:         } else {
 11009  09C2  29D5               	goto	l5660
 11010  09C3                     l5658:
 11011                           
 11012                           ;MotorDrive.c: 1984:             currentPosition[ motor_no ] -= motorStepCounterSet[ mot
      +                          or_no ];
 11013  09C3  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 11014  09C4  3EAC               	addlw	(low (_motorStepCounterSet| 0))& (0+255)
 11015  09C5  0086               	movwf	6
 11016  09C6  0187               	clrf	7
 11017  09C7  3F40               	moviw [0]fsr1
 11018  09C8  00AD               	movwf	??_PriorUpdateCorrentPosition
 11019  09C9  3F41               	moviw [1]fsr1
 11020  09CA  00AE               	movwf	??_PriorUpdateCorrentPosition+1
 11021  09CB  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 11022  09CC  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 11023  09CD  0086               	movwf	6
 11024  09CE  0187               	clrf	7
 11025  09CF  082D               	movf	??_PriorUpdateCorrentPosition,w
 11026  09D0  0281               	subwf	1,f
 11027  09D1  3141               	addfsr 1,1
 11028  09D2  082E               	movf	??_PriorUpdateCorrentPosition+1,w
 11029  09D3  3B81               	subwfb	1,f
 11030  09D4  317F               	addfsr 1,-1
 11031  09D5                     l5660:
 11032                           
 11033                           ;MotorDrive.c: 1987:         CorrectPosition(&currentPosition[ motor_no ], TblMaxSteps[ 
      +                          motor_no ]);
 11034  09D5  352F               	lslf	PriorUpdateCorrentPosition@motor_no,w
 11035  09D6  3E6C               	addlw	(low (_currentPosition| 0))& (0+255)
 11036  09D7  00A6               	movwf	CorrectPosition@pos
 11037  09D8  3000               	movlw	0
 11038  09D9  00A7               	movwf	CorrectPosition@pos+1
 11039  09DA  082F               	movf	PriorUpdateCorrentPosition@motor_no,w
 11040  09DB  00AD               	movwf	??_PriorUpdateCorrentPosition
 11041  09DC  01AE               	clrf	??_PriorUpdateCorrentPosition+1
 11042  09DD  35AD               	lslf	??_PriorUpdateCorrentPosition,f
 11043  09DE  0DAE               	rlf	??_PriorUpdateCorrentPosition+1,f
 11044  09DF  3056               	movlw	low (_TblMaxSteps| (0+32768))
 11045  09E0  072D               	addwf	??_PriorUpdateCorrentPosition,w
 11046  09E1  0084               	movwf	4
 11047  09E2  3098               	movlw	high (_TblMaxSteps| (0+32768))
 11048  09E3  3D2E               	addwfc	??_PriorUpdateCorrentPosition+1,w
 11049  09E4  0085               	movwf	5
 11050  09E5  3F00               	moviw [0]fsr0
 11051  09E6  00A8               	movwf	CorrectPosition@max
 11052  09E7  3F01               	moviw [1]fsr0
 11053  09E8  00A9               	movwf	CorrectPosition@max+1
 11054  09E9  3188  205E         	fcall	_CorrectPosition
 11055  09EB  0008               	return
 11056  09EC                     __end_of_PriorUpdateCorrentPosition:
 11057                           
 11058                           	psect	text65
 11059  085E                     __ptext65:	
 11060 ;; *************** function _CorrectPosition *****************
 11061 ;; Defined at:
 11062 ;;		line 1949 in file "MotorDrive.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  pos             2    6[BANK0 ] PTR short 
 11065 ;;		 -> detectBasePosition(4), missingDetectFinePosition(2), detectLoadPosition(92), currentPosition(4), 
 11066 ;;		 -> targetPosition(4), 
 11067 ;;  max             2    8[BANK0 ] short 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;		None
 11070 ;; Return value:  Size  Location     Type
 11071 ;;                  1    wreg      void 
 11072 ;; Registers used:
 11073 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11074 ;; Tracked objects:
 11075 ;;		On entry : 1F/0
 11076 ;;		On exit  : 1F/0
 11077 ;;		Unchanged: 0/0
 11078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11079 ;;      Params:         0       4       0       0       0       0       0       0
 11080 ;;      Locals:         0       0       0       0       0       0       0       0
 11081 ;;      Temps:          0       3       0       0       0       0       0       0
 11082 ;;      Totals:         0       7       0       0       0       0       0       0
 11083 ;;Total ram usage:        7 bytes
 11084 ;; Hardware stack levels used:    1
 11085 ;; Hardware stack levels required when called:    5
 11086 ;; This function calls:
 11087 ;;		Nothing
 11088 ;; This function is called by:
 11089 ;;		_CalcMotorStepCounter
 11090 ;;		_PriorUpdateCorrentPosition
 11091 ;;		_UpdateTargetPosition
 11092 ;;		_AfterDetectedLoadPosition
 11093 ;;		_DetermineBasePosition
 11094 ;;		_UpdataHandPosition
 11095 ;;		_VerifyHandPosition_LoadPosition
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _CorrectPosition
 11101  085E                     _CorrectPosition:
 11102                           
 11103                           ;MotorDrive.c: 1949: void CorrectPosition(H *pos, H max);MotorDrive.c: 1950: {;MotorDriv
      +                          e.c: 1951:     if (max == 0) {
 11104                           
 11105                           ;incstack = 0
 11106                           ; Regs used in _CorrectPosition: [wreg+fsr1l+fsr1h+status,2+status,0]
 11107  085E  0828               	movf	CorrectPosition@max,w
 11108  085F  0429               	iorwf	CorrectPosition@max+1,w
 11109  0860  1903               	btfsc	3,2
 11110  0861  0008               	return
 11111  0862                     l864:	
 11112                           ;MotorDrive.c: 1957:     }
 11113                           
 11114                           
 11115                           ;MotorDrive.c: 1955:     while (*pos >= max) {
 11116  0862  0826               	movf	CorrectPosition@pos,w
 11117  0863  0086               	movwf	6
 11118  0864  0827               	movf	CorrectPosition@pos+1,w
 11119  0865  0087               	movwf	7
 11120  0866  3F40               	moviw [0]fsr1
 11121  0867  00AA               	movwf	??_CorrectPosition
 11122  0868  3F41               	moviw [1]fsr1
 11123  0869  00AB               	movwf	??_CorrectPosition+1
 11124  086A  082B               	movf	??_CorrectPosition+1,w
 11125  086B  3A80               	xorlw	128
 11126  086C  00AC               	movwf	??_CorrectPosition+2
 11127  086D  0829               	movf	CorrectPosition@max+1,w
 11128  086E  3A80               	xorlw	128
 11129  086F  022C               	subwf	??_CorrectPosition+2,w
 11130  0870  1D03               	skipz
 11131  0871  2874               	goto	u4015
 11132  0872  0828               	movf	CorrectPosition@max,w
 11133  0873  022A               	subwf	??_CorrectPosition,w
 11134  0874                     u4015:
 11135  0874  1C03               	btfss	3,0
 11136  0875  288C               	goto	l867
 11137                           
 11138                           ;MotorDrive.c: 1956:         *pos -= max;
 11139  0876  0020               	movlb	0	; select bank0
 11140  0877  0826               	movf	CorrectPosition@pos,w
 11141  0878  0086               	movwf	6
 11142  0879  0827               	movf	CorrectPosition@pos+1,w
 11143  087A  0087               	movwf	7
 11144  087B  0828               	movf	CorrectPosition@max,w
 11145  087C  0281               	subwf	1,f
 11146  087D  3141               	addfsr 1,1
 11147  087E  0829               	movf	CorrectPosition@max+1,w
 11148  087F  3B81               	subwfb	1,f
 11149  0880  317F               	addfsr 1,-1
 11150  0881  2862               	goto	l864
 11151  0882                     l5560:
 11152                           
 11153                           ;MotorDrive.c: 1960:         *pos += max;
 11154  0882  0826               	movf	CorrectPosition@pos,w
 11155  0883  0086               	movwf	6
 11156  0884  0827               	movf	CorrectPosition@pos+1,w
 11157  0885  0087               	movwf	7
 11158  0886  0828               	movf	CorrectPosition@max,w
 11159  0887  0781               	addwf	1,f
 11160  0888  3141               	addfsr 1,1
 11161  0889  0829               	movf	CorrectPosition@max+1,w
 11162  088A  3D81               	addwfc	1,f
 11163  088B  317F               	addfsr 1,-1
 11164  088C                     l867:	
 11165                           ;MotorDrive.c: 1961:     }
 11166                           
 11167                           
 11168                           ;MotorDrive.c: 1959:     while (*pos < 0) {
 11169  088C  0020               	movlb	0	; select bank0
 11170  088D  0826               	movf	CorrectPosition@pos,w
 11171  088E  0086               	movwf	6
 11172  088F  0827               	movf	CorrectPosition@pos+1,w
 11173  0890  0087               	movwf	7
 11174  0891  3F40               	moviw [0]fsr1
 11175  0892  00AA               	movwf	??_CorrectPosition
 11176  0893  3F41               	moviw [1]fsr1
 11177  0894  00AB               	movwf	??_CorrectPosition+1
 11178  0895  1FAB               	btfss	??_CorrectPosition+1,7
 11179  0896  0008               	return
 11180  0897  2882               	goto	l5560
 11181  0898                     __end_of_CorrectPosition:
 11182                           
 11183                           	psect	text66
 11184  1172                     __ptext66:	
 11185 ;; *************** function _SetMotorStart *****************
 11186 ;; Defined at:
 11187 ;;		line 1846 in file "MotorDrive.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;  motor_no        1    wreg     unsigned char 
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;  motor_no        1    1[BANK0 ] unsigned char 
 11192 ;; Return value:  Size  Location     Type
 11193 ;;                  1    wreg      void 
 11194 ;; Registers used:
 11195 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11196 ;; Tracked objects:
 11197 ;;		On entry : 1F/0
 11198 ;;		On exit  : 1F/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11201 ;;      Params:         0       0       0       0       0       0       0       0
 11202 ;;      Locals:         0       1       0       0       0       0       0       0
 11203 ;;      Temps:          0       0       0       0       0       0       0       0
 11204 ;;      Totals:         0       1       0       0       0       0       0       0
 11205 ;;Total ram usage:        1 bytes
 11206 ;; Hardware stack levels used:    1
 11207 ;; Hardware stack levels required when called:    7
 11208 ;; This function calls:
 11209 ;;		_StartPulseOutM0
 11210 ;;		_StartPulseOutM1
 11211 ;; This function is called by:
 11212 ;;		_main
 11213 ;;		_SetMotorPositionSearchStart
 11214 ;;		_AfterDetectedLoadPosition
 11215 ;;		_MoveTargetPosition
 11216 ;;		_SpiCmdFunc_FwdPulseNormal
 11217 ;;		_SpiCmdFunc_RevPulseNormal
 11218 ;;		_SetFwdPulseWithCorrectProc
 11219 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11220 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _SetMotorStart
 11226  1172                     _SetMotorStart:
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _SetMotorStart: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11230                           ;SetMotorStart@motor_no stored from wreg
 11231  1172  00A1               	movwf	SetMotorStart@motor_no
 11232                           
 11233                           ;MotorDrive.c: 1846: void SetMotorStart(UB motor_no);MotorDrive.c: 1847: {;MotorDrive.c:
      +                           1848:     if (motor_no == 0) {
 11234  1173  0821               	movf	SetMotorStart@motor_no,w
 11235  1174  1D03               	btfss	3,2
 11236  1175  2979               	goto	l5762
 11237                           
 11238                           ;MotorDrive.c: 1850:         StartPulseOutM0();
 11239  1176  318B  238D         	fcall	_StartPulseOutM0
 11240                           
 11241                           ;MotorDrive.c: 1852:     } else {
 11242  1178  0008               	return
 11243  1179                     l5762:
 11244                           
 11245                           ;MotorDrive.c: 1854:         StartPulseOutM1();
 11246  1179  318C  2403         	fcall	_StartPulseOutM1
 11247  117B  0008               	return
 11248  117C                     __end_of_SetMotorStart:
 11249                           
 11250                           	psect	text67
 11251  0C03                     __ptext67:	
 11252 ;; *************** function _StartPulseOutM1 *****************
 11253 ;; Defined at:
 11254 ;;		line 1334 in file "MotorDrive.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;		None
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;                  1    wreg      void 
 11261 ;; Registers used:
 11262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11263 ;; Tracked objects:
 11264 ;;		On entry : 1F/0
 11265 ;;		On exit  : 1F/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11268 ;;      Params:         0       0       0       0       0       0       0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0
 11270 ;;      Temps:          0       1       0       0       0       0       0       0
 11271 ;;      Totals:         0       1       0       0       0       0       0       0
 11272 ;;Total ram usage:        1 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    6
 11275 ;; This function calls:
 11276 ;;		_TMR2_StartTimer
 11277 ;; This function is called by:
 11278 ;;		_SetMotorStart
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           
 11283                           ;psect for function _StartPulseOutM1
 11284  0C03                     _StartPulseOutM1:
 11285                           
 11286                           ;MotorDrive.c: 1336:     (INTCONbits.PEIE = 0);
 11287                           
 11288                           ;incstack = 0
 11289                           ; Regs used in _StartPulseOutM1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11290  0C03  130B               	bcf	11,6	;volatile
 11291                           
 11292                           ;MotorDrive.c: 1338:     if ((reqSearchBasePosBit & 0x02) || (motorStepCounterSet[ 1 ]))
      +                           {
 11293  0C04  18D9               	btfsc	_reqSearchBasePosBit,1
 11294  0C05  2C0B               	goto	l5614
 11295  0C06  0021               	movlb	1	; select bank1
 11296  0C07  082E               	movf	(_motorStepCounterSet^(0+128)+2),w
 11297  0C08  042F               	iorwf	((_motorStepCounterSet+1)^(0+128)+2),w
 11298  0C09  1903               	btfsc	3,2
 11299  0C0A  2C72               	goto	l5648
 11300  0C0B                     l5614:
 11301                           
 11302                           ;MotorDrive.c: 1340:         TblM1PulseChangePositionLast = finishPositionCtSet[ 1 ];
 11303  0C0B  0021               	movlb	1	; select bank1
 11304  0C0C  0847               	movf	(_finishPositionCtSet^(0+128)+1),w
 11305  0C0D  0020               	movlb	0	; select bank0
 11306  0C0E  00A0               	movwf	??_StartPulseOutM1
 11307  0C0F  0820               	movf	??_StartPulseOutM1,w
 11308  0C10  0021               	movlb	1	; select bank1
 11309  0C11  00EC               	movwf	_TblM1PulseChangePositionLast^(0+128)
 11310                           
 11311                           ;MotorDrive.c: 1342:         if (driveDirectionBit & 0x02) {
 11312  0C12  0020               	movlb	0	; select bank0
 11313  0C13  1CDB               	btfss	_driveDirectionBit,1
 11314  0C14  2C32               	goto	l744
 11315                           
 11316                           ;MotorDrive.c: 1344:             if (addShakePulseBit & 0x02) {
 11317  0C15  1CF0               	btfss	_addShakePulseBit,1
 11318  0C16  2C26               	goto	l745
 11319                           
 11320                           ;MotorDrive.c: 1346:                 if (polarityBit & 0x02) {
 11321  0C17  1CF1               	btfss	_polarityBit,1
 11322  0C18  2C1E               	goto	l5624
 11323                           
 11324                           ;MotorDrive.c: 1348:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL1_P0;
 11325  0C19  30D3               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11326  0C1A  0021               	movlb	1	; select bank1
 11327  0C1B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11328  0C1C  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 11329  0C1D  2C22               	goto	L11
 11330  0C1E                     l5624:	
 11331                           ;MotorDrive.c: 1349:                 } else {
 11332                           
 11333                           
 11334                           ;MotorDrive.c: 1351:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_S
      +                          HAKE_POL0_P0;
 11335  0C1E  30E0               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11336  0C1F  0021               	movlb	1	; select bank1
 11337  0C20  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11338  0C21  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 11339  0C22                     L11:
 11340  0C22  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11341                           
 11342                           ;MotorDrive.c: 1354:                 m1PulsePositionCtWork = ( 1 - 1 );
 11343  0C23  01E5               	clrf	_m1PulsePositionCtWork^(0+128)
 11344                           
 11345                           ;MotorDrive.c: 1355:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11346  0C24  01E1               	clrf	_m1PulseOutStepWork^(0+128)
 11347                           
 11348                           ;MotorDrive.c: 1359:             } else {
 11349  0C25  2C4A               	goto	l5638
 11350  0C26                     l745:
 11351                           
 11352                           ;MotorDrive.c: 1361:                 if (polarityBit & 0x02) {
 11353  0C26  1CF1               	btfss	_polarityBit,1
 11354  0C27  2C2D               	goto	l5632
 11355                           
 11356                           ;MotorDrive.c: 1363:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL1_P1;
 11357  0C28  30ED               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11358  0C29  0021               	movlb	1	; select bank1
 11359  0C2A  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11360  0C2B  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 11361  0C2C  2C3D               	goto	L13
 11362  0C2D                     l5632:	
 11363                           ;MotorDrive.c: 1364:                 } else {
 11364                           
 11365                           
 11366                           ;MotorDrive.c: 1366:                     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_F
      +                          WD_POL0_P1;
 11367  0C2D  30FA               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11368  0C2E  0021               	movlb	1	; select bank1
 11369  0C2F  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11370  0C30  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 11371  0C31  2C3D               	goto	L13
 11372  0C32                     l744:
 11373                           
 11374                           ;MotorDrive.c: 1375:             if (polarityBit & 0x02) {
 11375  0C32  1CF1               	btfss	_polarityBit,1
 11376  0C33  2C39               	goto	l5636
 11377                           
 11378                           ;MotorDrive.c: 1377:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL1_P1;
 11379  0C34  3007               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 11380  0C35  0021               	movlb	1	; select bank1
 11381  0C36  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11382  0C37  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 11383  0C38  2C3D               	goto	L13
 11384  0C39                     l5636:	
 11385                           ;MotorDrive.c: 1378:             } else {
 11386                           
 11387                           
 11388                           ;MotorDrive.c: 1380:                 m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_P
      +                          OL0_P1;
 11389  0C39  3014               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 11390  0C3A  0021               	movlb	1	; select bank1
 11391  0C3B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 11392  0C3C  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 11393  0C3D                     L13:
 11394  0C3D  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 11395                           
 11396                           ;MotorDrive.c: 1369:                 m1PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11397                           
 11398                           ;MotorDrive.c: 1367:                 }
 11399  0C3E  3031               	movlw	49
 11400  0C3F  0020               	movlb	0	; select bank0
 11401  0C40  00A0               	movwf	??_StartPulseOutM1
 11402  0C41  0820               	movf	??_StartPulseOutM1,w
 11403  0C42  0021               	movlb	1	; select bank1
 11404  0C43  00E5               	movwf	_m1PulsePositionCtWork^(0+128)
 11405                           
 11406                           ;MotorDrive.c: 1370:                 m1PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11407  0C44  3016               	movlw	22
 11408  0C45  0020               	movlb	0	; select bank0
 11409  0C46  00A0               	movwf	??_StartPulseOutM1
 11410  0C47  0820               	movf	??_StartPulseOutM1,w
 11411  0C48  0021               	movlb	1	; select bank1
 11412  0C49  00E1               	movwf	_m1PulseOutStepWork^(0+128)
 11413  0C4A                     l5638:
 11414                           
 11415                           ;MotorDrive.c: 1388:         motorActiveBit |= 0x02;
 11416  0C4A  0020               	movlb	0	; select bank0
 11417  0C4B  14DA               	bsf	_motorActiveBit,1
 11418                           
 11419                           ;MotorDrive.c: 1389:         m1PulsePositionCt = m1PulsePositionCtWork;
 11420  0C4C  0021               	movlb	1	; select bank1
 11421  0C4D  0865               	movf	_m1PulsePositionCtWork^(0+128),w
 11422  0C4E  0020               	movlb	0	; select bank0
 11423  0C4F  00A0               	movwf	??_StartPulseOutM1
 11424  0C50  0820               	movf	??_StartPulseOutM1,w
 11425  0C51  0021               	movlb	1	; select bank1
 11426  0C52  00E7               	movwf	_m1PulsePositionCt^(0+128)
 11427                           
 11428                           ;MotorDrive.c: 1390:         m1PulseOutStep = m1PulseOutStepWork;
 11429  0C53  0861               	movf	_m1PulseOutStepWork^(0+128),w
 11430  0C54  0020               	movlb	0	; select bank0
 11431  0C55  00A0               	movwf	??_StartPulseOutM1
 11432  0C56  0820               	movf	??_StartPulseOutM1,w
 11433  0C57  00F2               	movwf	_m1PulseOutStep
 11434                           
 11435                           ;MotorDrive.c: 1391:         m1PulseChangePosition = TblM1PulseChangePosition[ m1PulseOu
      +                          tStep ];
 11436  0C58  0872               	movf	_m1PulseOutStep,w
 11437  0C59  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 11438  0C5A  0084               	movwf	4
 11439  0C5B  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 11440  0C5C  1803               	skipnc
 11441  0C5D  3E01               	addlw	1
 11442  0C5E  0085               	movwf	5
 11443  0C5F  0800               	movf	0,w	;code access
 11444  0C60  00A0               	movwf	??_StartPulseOutM1
 11445  0C61  0820               	movf	??_StartPulseOutM1,w
 11446  0C62  0021               	movlb	1	; select bank1
 11447  0C63  00E3               	movwf	_m1PulseChangePosition^(0+128)
 11448                           
 11449                           ;MotorDrive.c: 1393:         motorM1StepCounter = motorStepCounterSet[ 1 ];
 11450  0C64  082F               	movf	((_motorStepCounterSet+1)^(0+128)+2),w
 11451  0C65  0020               	movlb	0	; select bank0
 11452  0C66  00D4               	movwf	_motorM1StepCounter+1
 11453  0C67  0021               	movlb	1	; select bank1
 11454  0C68  082E               	movf	(_motorStepCounterSet^(0+128)+2),w
 11455  0C69  0020               	movlb	0	; select bank0
 11456  0C6A  00D3               	movwf	_motorM1StepCounter
 11457                           
 11458                           ;MotorDrive.c: 1394:         motorStepCounterSet[ 1 ] = 0;
 11459  0C6B  0021               	movlb	1	; select bank1
 11460  0C6C  01AE               	clrf	(_motorStepCounterSet^(0+128)+2)
 11461  0C6D  01AF               	clrf	((_motorStepCounterSet+1)^(0+128)+2)
 11462                           
 11463                           ;MotorDrive.c: 1396:         TMR2_StartTimer();
 11464  0C6E  3191  213D  318C   	fcall	_TMR2_StartTimer
 11465                           
 11466                           ;MotorDrive.c: 1398:     } else {
 11467  0C71  2C77               	goto	l5650
 11468  0C72                     l5648:
 11469                           
 11470                           ;MotorDrive.c: 1400:         actCorrectDriveBit &= (UB) (~0x02);
 11471  0C72  30FD               	movlw	253
 11472  0C73  0020               	movlb	0	; select bank0
 11473  0C74  00A0               	movwf	??_StartPulseOutM1
 11474  0C75  0820               	movf	??_StartPulseOutM1,w
 11475  0C76  05D7               	andwf	_actCorrectDriveBit,f
 11476  0C77                     l5650:
 11477                           
 11478                           ;MotorDrive.c: 1404:     (INTCONbits.PEIE = 1);
 11479  0C77  170B               	bsf	11,6	;volatile
 11480  0C78  0008               	return
 11481  0C79                     __end_of_StartPulseOutM1:
 11482                           
 11483                           	psect	text68
 11484  0B8D                     __ptext68:	
 11485 ;; *************** function _StartPulseOutM0 *****************
 11486 ;; Defined at:
 11487 ;;		line 1261 in file "MotorDrive.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;		None
 11492 ;; Return value:  Size  Location     Type
 11493 ;;                  1    wreg      void 
 11494 ;; Registers used:
 11495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 1F/0
 11498 ;;		On exit  : 1F/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11501 ;;      Params:         0       0       0       0       0       0       0       0
 11502 ;;      Locals:         0       0       0       0       0       0       0       0
 11503 ;;      Temps:          0       1       0       0       0       0       0       0
 11504 ;;      Totals:         0       1       0       0       0       0       0       0
 11505 ;;Total ram usage:        1 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    6
 11508 ;; This function calls:
 11509 ;;		_TMR2_StartTimer
 11510 ;; This function is called by:
 11511 ;;		_SetMotorStart
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           
 11516                           ;psect for function _StartPulseOutM0
 11517  0B8D                     _StartPulseOutM0:
 11518                           
 11519                           ;MotorDrive.c: 1263:     (INTCONbits.PEIE = 0);
 11520                           
 11521                           ;incstack = 0
 11522                           ; Regs used in _StartPulseOutM0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11523  0B8D  130B               	bcf	11,6	;volatile
 11524                           
 11525                           ;MotorDrive.c: 1265:     if ((reqSearchBasePosBit & 0x01) || (motorStepCounterSet[ 0 ]))
      +                           {
 11526  0B8E  1859               	btfsc	_reqSearchBasePosBit,0
 11527  0B8F  2B95               	goto	l5572
 11528  0B90  0021               	movlb	1	; select bank1
 11529  0B91  082C               	movf	_motorStepCounterSet^(0+128),w
 11530  0B92  042D               	iorwf	(_motorStepCounterSet+1)^(0+128),w
 11531  0B93  1903               	btfsc	3,2
 11532  0B94  2BFC               	goto	l5606
 11533  0B95                     l5572:
 11534                           
 11535                           ;MotorDrive.c: 1267:         TblM0PulseChangePositionLast = finishPositionCtSet[ 0 ];
 11536  0B95  0021               	movlb	1	; select bank1
 11537  0B96  0846               	movf	_finishPositionCtSet^(0+128),w
 11538  0B97  0020               	movlb	0	; select bank0
 11539  0B98  00A0               	movwf	??_StartPulseOutM0
 11540  0B99  0820               	movf	??_StartPulseOutM0,w
 11541  0B9A  0021               	movlb	1	; select bank1
 11542  0B9B  00ED               	movwf	_TblM0PulseChangePositionLast^(0+128)
 11543                           
 11544                           ;MotorDrive.c: 1269:         if (driveDirectionBit & 0x01) {
 11545  0B9C  0020               	movlb	0	; select bank0
 11546  0B9D  1C5B               	btfss	_driveDirectionBit,0
 11547  0B9E  2BBC               	goto	l727
 11548                           
 11549                           ;MotorDrive.c: 1271:             if (addShakePulseBit & 0x01) {
 11550  0B9F  1C70               	btfss	_addShakePulseBit,0
 11551  0BA0  2BB0               	goto	l728
 11552                           
 11553                           ;MotorDrive.c: 1273:                 if (polarityBit & 0x01) {
 11554  0BA1  1C71               	btfss	_polarityBit,0
 11555  0BA2  2BA8               	goto	l5582
 11556                           
 11557                           ;MotorDrive.c: 1275:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL1_P0;
 11558  0BA3  309A               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11559  0BA4  0021               	movlb	1	; select bank1
 11560  0BA5  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11561  0BA6  3012               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 11562  0BA7  2BAC               	goto	L14
 11563  0BA8                     l5582:	
 11564                           ;MotorDrive.c: 1276:                 } else {
 11565                           
 11566                           
 11567                           ;MotorDrive.c: 1278:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_S
      +                          HAKE_POL0_P0;
 11568  0BA8  30A9               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11569  0BA9  0021               	movlb	1	; select bank1
 11570  0BAA  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11571  0BAB  3012               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 11572  0BAC                     L14:
 11573  0BAC  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11574                           
 11575                           ;MotorDrive.c: 1281:                 m0PulsePositionCtWork = ( 1 - 1 );
 11576  0BAD  01E6               	clrf	_m0PulsePositionCtWork^(0+128)
 11577                           
 11578                           ;MotorDrive.c: 1282:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P0;
 11579  0BAE  01E2               	clrf	_m0PulseOutStepWork^(0+128)
 11580                           
 11581                           ;MotorDrive.c: 1284:             } else {
 11582  0BAF  2BD4               	goto	l5596
 11583  0BB0                     l728:
 11584                           
 11585                           ;MotorDrive.c: 1286:                 if (polarityBit & 0x01) {
 11586  0BB0  1C71               	btfss	_polarityBit,0
 11587  0BB1  2BB7               	goto	l5590
 11588                           
 11589                           ;MotorDrive.c: 1288:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL1_P1;
 11590  0BB2  30B8               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11591  0BB3  0021               	movlb	1	; select bank1
 11592  0BB4  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11593  0BB5  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 11594  0BB6  2BC7               	goto	L16
 11595  0BB7                     l5590:	
 11596                           ;MotorDrive.c: 1289:                 } else {
 11597                           
 11598                           
 11599                           ;MotorDrive.c: 1291:                     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_F
      +                          WD_POL0_P1;
 11600  0BB7  30C7               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11601  0BB8  0021               	movlb	1	; select bank1
 11602  0BB9  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11603  0BBA  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 11604  0BBB  2BC7               	goto	L16
 11605  0BBC                     l727:
 11606                           
 11607                           ;MotorDrive.c: 1300:             if (polarityBit & 0x01) {
 11608  0BBC  1C71               	btfss	_polarityBit,0
 11609  0BBD  2BC3               	goto	l5594
 11610                           
 11611                           ;MotorDrive.c: 1302:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL1_P1;
 11612  0BBE  30D6               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 11613  0BBF  0021               	movlb	1	; select bank1
 11614  0BC0  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11615  0BC1  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 11616  0BC2  2BC7               	goto	L16
 11617  0BC3                     l5594:	
 11618                           ;MotorDrive.c: 1303:             } else {
 11619                           
 11620                           
 11621                           ;MotorDrive.c: 1305:                 m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_P
      +                          OL0_P1;
 11622  0BC3  30E5               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 11623  0BC4  0021               	movlb	1	; select bank1
 11624  0BC5  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 11625  0BC6  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 11626  0BC7                     L16:
 11627  0BC7  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 11628                           
 11629                           ;MotorDrive.c: 1294:                 m0PulsePositionCtWork = ( ( 1 + ( ( 1 - 1 ) + 5 + 4
      +                           + ( 1 + 3 ) * 10 ) ) - 1 );
 11630                           
 11631                           ;MotorDrive.c: 1292:                 }
 11632  0BC8  3031               	movlw	49
 11633  0BC9  0020               	movlb	0	; select bank0
 11634  0BCA  00A0               	movwf	??_StartPulseOutM0
 11635  0BCB  0820               	movf	??_StartPulseOutM0,w
 11636  0BCC  0021               	movlb	1	; select bank1
 11637  0BCD  00E6               	movwf	_m0PulsePositionCtWork^(0+128)
 11638                           
 11639                           ;MotorDrive.c: 1295:                 m0PulseOutStepWork = ID_PULSE_OUT_STEP_P1;
 11640  0BCE  3016               	movlw	22
 11641  0BCF  0020               	movlb	0	; select bank0
 11642  0BD0  00A0               	movwf	??_StartPulseOutM0
 11643  0BD1  0820               	movf	??_StartPulseOutM0,w
 11644  0BD2  0021               	movlb	1	; select bank1
 11645  0BD3  00E2               	movwf	_m0PulseOutStepWork^(0+128)
 11646  0BD4                     l5596:
 11647                           
 11648                           ;MotorDrive.c: 1313:         motorActiveBit |= 0x01;
 11649  0BD4  0020               	movlb	0	; select bank0
 11650  0BD5  145A               	bsf	_motorActiveBit,0
 11651                           
 11652                           ;MotorDrive.c: 1314:         m0PulsePositionCt = m0PulsePositionCtWork;
 11653  0BD6  0021               	movlb	1	; select bank1
 11654  0BD7  0866               	movf	_m0PulsePositionCtWork^(0+128),w
 11655  0BD8  0020               	movlb	0	; select bank0
 11656  0BD9  00A0               	movwf	??_StartPulseOutM0
 11657  0BDA  0820               	movf	??_StartPulseOutM0,w
 11658  0BDB  0021               	movlb	1	; select bank1
 11659  0BDC  00E8               	movwf	_m0PulsePositionCt^(0+128)
 11660                           
 11661                           ;MotorDrive.c: 1315:         m0PulseOutStep = m0PulseOutStepWork;
 11662  0BDD  0862               	movf	_m0PulseOutStepWork^(0+128),w
 11663  0BDE  0020               	movlb	0	; select bank0
 11664  0BDF  00A0               	movwf	??_StartPulseOutM0
 11665  0BE0  0820               	movf	??_StartPulseOutM0,w
 11666  0BE1  00F3               	movwf	_m0PulseOutStep
 11667                           
 11668                           ;MotorDrive.c: 1316:         m0PulseChangePosition = TblM0PulseChangePosition[ m0PulseOu
      +                          tStep ];
 11669  0BE2  0873               	movf	_m0PulseOutStep,w
 11670  0BE3  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 11671  0BE4  0084               	movwf	4
 11672  0BE5  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 11673  0BE6  1803               	skipnc
 11674  0BE7  3E01               	addlw	1
 11675  0BE8  0085               	movwf	5
 11676  0BE9  0800               	movf	0,w	;code access
 11677  0BEA  00A0               	movwf	??_StartPulseOutM0
 11678  0BEB  0820               	movf	??_StartPulseOutM0,w
 11679  0BEC  0021               	movlb	1	; select bank1
 11680  0BED  00E4               	movwf	_m0PulseChangePosition^(0+128)
 11681                           
 11682                           ;MotorDrive.c: 1318:         motorM0StepCounter = motorStepCounterSet[ 0 ];
 11683  0BEE  082D               	movf	(_motorStepCounterSet+1)^(0+128),w
 11684  0BEF  0020               	movlb	0	; select bank0
 11685  0BF0  00D6               	movwf	_motorM0StepCounter+1
 11686  0BF1  0021               	movlb	1	; select bank1
 11687  0BF2  082C               	movf	_motorStepCounterSet^(0+128),w
 11688  0BF3  0020               	movlb	0	; select bank0
 11689  0BF4  00D5               	movwf	_motorM0StepCounter
 11690                           
 11691                           ;MotorDrive.c: 1319:         motorStepCounterSet[ 0 ] = 0;
 11692  0BF5  0021               	movlb	1	; select bank1
 11693  0BF6  01AC               	clrf	_motorStepCounterSet^(0+128)
 11694  0BF7  01AD               	clrf	(_motorStepCounterSet+1)^(0+128)
 11695                           
 11696                           ;MotorDrive.c: 1321:         TMR2_StartTimer();
 11697  0BF8  3191  213D  318B   	fcall	_TMR2_StartTimer
 11698                           
 11699                           ;MotorDrive.c: 1323:     } else {
 11700  0BFB  2C01               	goto	l5608
 11701  0BFC                     l5606:
 11702                           
 11703                           ;MotorDrive.c: 1325:         actCorrectDriveBit &= (UB) (~0x01);
 11704  0BFC  30FE               	movlw	254
 11705  0BFD  0020               	movlb	0	; select bank0
 11706  0BFE  00A0               	movwf	??_StartPulseOutM0
 11707  0BFF  0820               	movf	??_StartPulseOutM0,w
 11708  0C00  05D7               	andwf	_actCorrectDriveBit,f
 11709  0C01                     l5608:
 11710                           
 11711                           ;MotorDrive.c: 1329:     (INTCONbits.PEIE = 1);
 11712  0C01  170B               	bsf	11,6	;volatile
 11713  0C02  0008               	return
 11714  0C03                     __end_of_StartPulseOutM0:
 11715                           
 11716                           	psect	text69
 11717  113D                     __ptext69:	
 11718 ;; *************** function _TMR2_StartTimer *****************
 11719 ;; Defined at:
 11720 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 11721 ;; Parameters:    Size  Location     Type
 11722 ;;		None
 11723 ;; Auto vars:     Size  Location     Type
 11724 ;;		None
 11725 ;; Return value:  Size  Location     Type
 11726 ;;                  1    wreg      void 
 11727 ;; Registers used:
 11728 ;;		None
 11729 ;; Tracked objects:
 11730 ;;		On entry : 1C/2
 11731 ;;		On exit  : 1F/0
 11732 ;;		Unchanged: 0/0
 11733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11734 ;;      Params:         0       0       0       0       0       0       0       0
 11735 ;;      Locals:         0       0       0       0       0       0       0       0
 11736 ;;      Temps:          0       0       0       0       0       0       0       0
 11737 ;;      Totals:         0       0       0       0       0       0       0       0
 11738 ;;Total ram usage:        0 bytes
 11739 ;; Hardware stack levels used:    1
 11740 ;; Hardware stack levels required when called:    5
 11741 ;; This function calls:
 11742 ;;		Nothing
 11743 ;; This function is called by:
 11744 ;;		_StartPulseOutM0
 11745 ;;		_StartPulseOutM1
 11746 ;;		_SetMotorStartSPK
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           
 11751                           ;psect for function _TMR2_StartTimer
 11752  113D                     _TMR2_StartTimer:
 11753                           
 11754                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11755                           
 11756                           ;incstack = 0
 11757                           ; Regs used in _TMR2_StartTimer: []
 11758  113D  0020               	movlb	0	; select bank0
 11759  113E  151C               	bsf	28,2	;volatile
 11760  113F  0008               	return
 11761  1140                     __end_of_TMR2_StartTimer:
 11762                           
 11763                           	psect	text70
 11764  08D3                     __ptext70:	
 11765 ;; *************** function _SetMotorFrequency *****************
 11766 ;; Defined at:
 11767 ;;		line 1808 in file "MotorDrive.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;  motor_no        1    wreg     unsigned char 
 11770 ;;  type            1    0[BANK0 ] unsigned char 
 11771 ;;  set_freq        1    1[BANK0 ] unsigned char 
 11772 ;; Auto vars:     Size  Location     Type
 11773 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  1    wreg      void 
 11776 ;; Registers used:
 11777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11778 ;; Tracked objects:
 11779 ;;		On entry : 1F/0
 11780 ;;		On exit  : 1F/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11783 ;;      Params:         0       2       0       0       0       0       0       0
 11784 ;;      Locals:         0       1       0       0       0       0       0       0
 11785 ;;      Temps:          0       1       0       0       0       0       0       0
 11786 ;;      Totals:         0       4       0       0       0       0       0       0
 11787 ;;Total ram usage:        4 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; Hardware stack levels required when called:    5
 11790 ;; This function calls:
 11791 ;;		Nothing
 11792 ;; This function is called by:
 11793 ;;		_main
 11794 ;;		_MoveTargetPosition
 11795 ;;		_SpiCmdFunc_FwdPulseNormal
 11796 ;;		_SpiCmdFunc_RevPulseNormal
 11797 ;;		_SpiCmdFunc_SearchBasePosition
 11798 ;;		_SetFwdPulseWithCorrectProc
 11799 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 11800 ;;		_SpiCmdFunc_RevPulsePositionCtl
 11801 ;;		_SpiCmdFunc_Search1008Position
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           
 11806                           ;psect for function _SetMotorFrequency
 11807  08D3                     _SetMotorFrequency:
 11808                           
 11809                           ;incstack = 0
 11810                           ; Regs used in _SetMotorFrequency: [wreg-fsr1h+status,2+status,0+pclath]
 11811                           ;SetMotorFrequency@motor_no stored from wreg
 11812  08D3  00A3               	movwf	SetMotorFrequency@motor_no
 11813                           
 11814                           ;MotorDrive.c: 1808: void SetMotorFrequency(UB motor_no, UB type, UB set_freq);MotorDriv
      +                          e.c: 1809: {;MotorDrive.c: 1810:     if (FREQ_SET_SELF_CONTROL_NORMAL == type) {
 11815  08D4  0820               	movf	SetMotorFrequency@type,w
 11816  08D5  1D03               	btfss	3,2
 11817  08D6  28E1               	goto	l5740
 11818                           
 11819                           ;MotorDrive.c: 1813:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) - 1 ) + set_freq;
 11820  08D7  0821               	movf	SetMotorFrequency@set_freq,w
 11821  08D8  3E31               	addlw	49
 11822  08D9  00A2               	movwf	??_SetMotorFrequency
 11823  08DA  0823               	movf	SetMotorFrequency@motor_no,w
 11824  08DB  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11825  08DC  0086               	movwf	6
 11826  08DD  0187               	clrf	7
 11827  08DE  0822               	movf	??_SetMotorFrequency,w
 11828  08DF  0081               	movwf	1
 11829                           
 11830                           ;MotorDrive.c: 1815:     } else if (FREQ_SET_SELF_CONTROL_SHAKE == type) {
 11831  08E0  0008               	return
 11832  08E1                     l5740:
 11833  08E1  0320               	decf	SetMotorFrequency@type,w
 11834  08E2  1D03               	btfss	3,2
 11835  08E3  2907               	goto	l5756
 11836                           
 11837                           ;MotorDrive.c: 1817:         if (0 == motor_no) {
 11838  08E4  0823               	movf	SetMotorFrequency@motor_no,w
 11839  08E5  1D03               	btfss	3,2
 11840  08E6  2903               	goto	l5750
 11841                           
 11842                           ;MotorDrive.c: 1818:             if (TblM0PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11843  08E7  304D               	movlw	low ((_TblM0PulseChangePosition+24)| (0+32768))
 11844  08E8  0084               	movwf	4
 11845  08E9  3098               	movlw	high ((_TblM0PulseChangePosition+24)| (0+32768))
 11846  08EA                     L17:
 11847  08EA  0085               	movwf	5
 11848  08EB  0800               	movf	0,w	;code access
 11849  08EC  00A2               	movwf	??_SetMotorFrequency
 11850  08ED  0821               	movf	SetMotorFrequency@set_freq,w
 11851  08EE  0222               	subwf	??_SetMotorFrequency,w
 11852  08EF  1803               	skipnc
 11853  08F0  28FA               	goto	l5748
 11854                           
 11855                           ;MotorDrive.c: 1819:                 finishPositionCtSet[ motor_no ] = set_freq;
 11856  08F1  0821               	movf	SetMotorFrequency@set_freq,w
 11857  08F2  00A2               	movwf	??_SetMotorFrequency
 11858  08F3  0823               	movf	SetMotorFrequency@motor_no,w
 11859  08F4  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11860  08F5  0086               	movwf	6
 11861  08F6  0187               	clrf	7
 11862  08F7  0822               	movf	??_SetMotorFrequency,w
 11863  08F8  0081               	movwf	1
 11864                           
 11865                           ;MotorDrive.c: 1820:             } else {
 11866  08F9  0008               	return
 11867  08FA                     l5748:
 11868                           
 11869                           ;MotorDrive.c: 1821:                 finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1
      +                           ) + 5 + 4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 19 );
 11870  08FA  305B               	movlw	91
 11871  08FB  00A2               	movwf	??_SetMotorFrequency
 11872  08FC  0823               	movf	SetMotorFrequency@motor_no,w
 11873  08FD  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11874  08FE  0086               	movwf	6
 11875  08FF  0187               	clrf	7
 11876  0900  0822               	movf	??_SetMotorFrequency,w
 11877  0901  0081               	movwf	1
 11878  0902  0008               	return
 11879  0903                     l5750:
 11880                           
 11881                           ;MotorDrive.c: 1824:             if (TblM1PulseChangePosition[ ( ( 5 + 10 * 2 ) - 1 ) ] 
      +                          < set_freq) {
 11882  0903  3034               	movlw	low ((_TblM1PulseChangePosition+24)| (0+32768))
 11883  0904  0084               	movwf	4
 11884  0905  3098               	movlw	high ((_TblM1PulseChangePosition+24)| (0+32768))
 11885  0906  28EA               	goto	L17
 11886  0907                     l5756:
 11887                           
 11888                           ;MotorDrive.c: 1833:         finishPositionCtSet[ motor_no ] = ( ( 1 + ( ( 1 - 1 ) + 5 +
      +                           4 + ( 1 + 3 ) * 10 ) ) + 6 + 16 + 7 );
 11889  0907  304F               	movlw	79
 11890  0908  00A2               	movwf	??_SetMotorFrequency
 11891  0909  0823               	movf	SetMotorFrequency@motor_no,w
 11892  090A  3EC6               	addlw	(low (_finishPositionCtSet| 0))& (0+255)
 11893  090B  0086               	movwf	6
 11894  090C  0187               	clrf	7
 11895  090D  0822               	movf	??_SetMotorFrequency,w
 11896  090E  0081               	movwf	1
 11897  090F  0008               	return
 11898  0910                     __end_of_SetMotorFrequency:
 11899                           
 11900                           	psect	text71
 11901  15B7                     __ptext71:	
 11902 ;; *************** function _SetMotorDirection *****************
 11903 ;; Defined at:
 11904 ;;		line 1663 in file "MotorDrive.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;  motor_no        1    wreg     unsigned char 
 11907 ;;  dir             1    0[BANK0 ] unsigned char 
 11908 ;; Auto vars:     Size  Location     Type
 11909 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11910 ;; Return value:  Size  Location     Type
 11911 ;;                  1    wreg      void 
 11912 ;; Registers used:
 11913 ;;		wreg, status,2, status,0
 11914 ;; Tracked objects:
 11915 ;;		On entry : 1F/0
 11916 ;;		On exit  : 1F/0
 11917 ;;		Unchanged: 0/0
 11918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11919 ;;      Params:         0       1       0       0       0       0       0       0
 11920 ;;      Locals:         0       1       0       0       0       0       0       0
 11921 ;;      Temps:          0       2       0       0       0       0       0       0
 11922 ;;      Totals:         0       4       0       0       0       0       0       0
 11923 ;;Total ram usage:        4 bytes
 11924 ;; Hardware stack levels used:    1
 11925 ;; Hardware stack levels required when called:    5
 11926 ;; This function calls:
 11927 ;;		Nothing
 11928 ;; This function is called by:
 11929 ;;		_main
 11930 ;;		_CalcMotorStepCounter
 11931 ;;		_SpiCmdFunc_FwdPulseNormal
 11932 ;;		_SpiCmdFunc_RevPulseNormal
 11933 ;;		_SpiCmdFunc_SearchBasePosition
 11934 ;;		_SpiCmdFunc_Search1008Position
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _SetMotorDirection
 11940  15B7                     _SetMotorDirection:
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _SetMotorDirection: [wreg+status,2+status,0]
 11944                           ;SetMotorDirection@motor_no stored from wreg
 11945  15B7  00A3               	movwf	SetMotorDirection@motor_no
 11946                           
 11947                           ;MotorDrive.c: 1663: void SetMotorDirection(UB motor_no, UB dir);MotorDrive.c: 1664: {;M
      +                          otorDrive.c: 1665:     motorBitOperation = (UB) (0x01 << motor_no);
 11948  15B8  3001               	movlw	1
 11949  15B9  00A1               	movwf	??_SetMotorDirection
 11950  15BA  0A23               	incf	SetMotorDirection@motor_no,w
 11951  15BB  2DBD               	goto	u4034
 11952  15BC                     u4035:
 11953  15BC  35A1               	lslf	??_SetMotorDirection,f
 11954  15BD                     u4034:
 11955  15BD  0B89               	decfsz	9,f
 11956  15BE  2DBC               	goto	u4035
 11957  15BF  0821               	movf	??_SetMotorDirection,w
 11958  15C0  00A2               	movwf	??_SetMotorDirection+1
 11959  15C1  0822               	movf	??_SetMotorDirection+1,w
 11960  15C2  00F4               	movwf	_motorBitOperation
 11961                           
 11962                           ;MotorDrive.c: 1667:     if (1 == dir) {
 11963  15C3  0320               	decf	SetMotorDirection@dir,w
 11964  15C4  1D03               	btfss	3,2
 11965  15C5  2DCB               	goto	l5566
 11966                           
 11967                           ;MotorDrive.c: 1669:         driveDirectionBit |= motorBitOperation;
 11968  15C6  0874               	movf	_motorBitOperation,w
 11969  15C7  00A1               	movwf	??_SetMotorDirection
 11970  15C8  0821               	movf	??_SetMotorDirection,w
 11971  15C9  04DB               	iorwf	_driveDirectionBit,f
 11972                           
 11973                           ;MotorDrive.c: 1671:     } else {
 11974  15CA  0008               	return
 11975  15CB                     l5566:
 11976                           
 11977                           ;MotorDrive.c: 1673:         driveDirectionBit &= (UB) (~motorBitOperation);
 11978  15CB  0974               	comf	_motorBitOperation,w
 11979  15CC  00A1               	movwf	??_SetMotorDirection
 11980  15CD  0821               	movf	??_SetMotorDirection,w
 11981  15CE  05DB               	andwf	_driveDirectionBit,f
 11982  15CF  0008               	return
 11983  15D0                     __end_of_SetMotorDirection:
 11984                           
 11985                           	psect	text72
 11986  0D86                     __ptext72:	
 11987 ;; *************** function _SetDriveType *****************
 11988 ;; Defined at:
 11989 ;;		line 1523 in file "MotorDrive.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;  motor_no        1    wreg     unsigned char 
 11992 ;;  drive_type      1    0[BANK0 ] unsigned char 
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  motor_no        1    3[BANK0 ] unsigned char 
 11995 ;; Return value:  Size  Location     Type
 11996 ;;                  1    wreg      void 
 11997 ;; Registers used:
 11998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11999 ;; Tracked objects:
 12000 ;;		On entry : 1F/0
 12001 ;;		On exit  : 1E/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12004 ;;      Params:         0       1       0       0       0       0       0       0
 12005 ;;      Locals:         0       1       0       0       0       0       0       0
 12006 ;;      Temps:          0       2       0       0       0       0       0       0
 12007 ;;      Totals:         0       4       0       0       0       0       0       0
 12008 ;;Total ram usage:        4 bytes
 12009 ;; Hardware stack levels used:    1
 12010 ;; Hardware stack levels required when called:    5
 12011 ;; This function calls:
 12012 ;;		Nothing
 12013 ;; This function is called by:
 12014 ;;		_AfterDetectedLoadPosition
 12015 ;;		_SpiCmdFunc_FwdPulseNormal
 12016 ;;		_SpiCmdFunc_RevPulseNormal
 12017 ;;		_SpiCmdFunc_SearchBasePosition
 12018 ;;		_SetFwdPulseWithCorrectProc
 12019 ;;		_SpiCmdFunc_FwdPulsePositionCtl
 12020 ;;		_SpiCmdFunc_RevPulsePositionCtl
 12021 ;;		_SpiCmdFunc_Search1008Position
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025                           
 12026                           ;psect for function _SetDriveType
 12027  0D86                     _SetDriveType:
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _SetDriveType: [wreg-fsr1h+status,2+status,0]
 12031                           ;SetDriveType@motor_no stored from wreg
 12032  0D86  00A3               	movwf	SetDriveType@motor_no
 12033                           
 12034                           ;MotorDrive.c: 1523: void SetDriveType(UB motor_no, UB drive_type);MotorDrive.c: 1524: {
      +                          ;MotorDrive.c: 1526:     motorBitOperation = (UB) (0x01 << motor_no);
 12035  0D87  3001               	movlw	1
 12036  0D88  00A1               	movwf	??_SetDriveType
 12037  0D89  0A23               	incf	SetDriveType@motor_no,w
 12038  0D8A  2D8C               	goto	u4344
 12039  0D8B                     u4345:
 12040  0D8B  35A1               	lslf	??_SetDriveType,f
 12041  0D8C                     u4344:
 12042  0D8C  0B89               	decfsz	9,f
 12043  0D8D  2D8B               	goto	u4345
 12044  0D8E  0821               	movf	??_SetDriveType,w
 12045  0D8F  00A2               	movwf	??_SetDriveType+1
 12046  0D90  0822               	movf	??_SetDriveType+1,w
 12047  0D91  00F4               	movwf	_motorBitOperation
 12048                           
 12049                           ;MotorDrive.c: 1528:     driveType[ motor_no ] = drive_type;
 12050  0D92  0820               	movf	SetDriveType@drive_type,w
 12051  0D93  00A1               	movwf	??_SetDriveType
 12052  0D94  0823               	movf	SetDriveType@motor_no,w
 12053  0D95  3EC2               	addlw	(low (_driveType| 0))& (0+255)
 12054  0D96  0086               	movwf	6
 12055  0D97  0187               	clrf	7
 12056  0D98  0821               	movf	??_SetDriveType,w
 12057  0D99  0081               	movwf	1
 12058                           
 12059                           ;MotorDrive.c: 1530:     switch (drive_type) {
 12060  0D9A  2DFD               	goto	l5832
 12061  0D9B                     l5820:
 12062                           
 12063                           ;MotorDrive.c: 1533:         addShakePulseBit &= (UB) (~motorBitOperation);
 12064  0D9B  0974               	comf	_motorBitOperation,w
 12065  0D9C  00A1               	movwf	??_SetDriveType
 12066  0D9D  0821               	movf	??_SetDriveType,w
 12067  0D9E  05F0               	andwf	_addShakePulseBit,f
 12068                           
 12069                           ;MotorDrive.c: 1534:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12070  0D9F  0974               	comf	_motorBitOperation,w
 12071  0DA0  00A1               	movwf	??_SetDriveType
 12072  0DA1  0821               	movf	??_SetDriveType,w
 12073  0DA2  05D9               	andwf	_reqSearchBasePosBit,f
 12074                           
 12075                           ;MotorDrive.c: 1536:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12076  0DA3  0974               	comf	_motorBitOperation,w
 12077  0DA4  00A1               	movwf	??_SetDriveType
 12078  0DA5  0821               	movf	??_SetDriveType,w
 12079  0DA6  0021               	movlb	1	; select bank1
 12080  0DA7  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12081                           
 12082                           ;MotorDrive.c: 1537:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12083  0DA8  0974               	comf	_motorBitOperation,w
 12084  0DA9  0020               	movlb	0	; select bank0
 12085  0DAA  00A1               	movwf	??_SetDriveType
 12086  0DAB  0821               	movf	??_SetDriveType,w
 12087  0DAC  05D8               	andwf	_reqCorrectBasePosBit,f
 12088                           
 12089                           ;MotorDrive.c: 1538:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12090  0DAD  0974               	comf	_motorBitOperation,w
 12091  0DAE  00A1               	movwf	??_SetDriveType
 12092  0DAF  0821               	movf	??_SetDriveType,w
 12093  0DB0  0021               	movlb	1	; select bank1
 12094  0DB1  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12095                           
 12096                           ;MotorDrive.c: 1539:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12097  0DB2  0974               	comf	_motorBitOperation,w
 12098  0DB3  0020               	movlb	0	; select bank0
 12099  0DB4  00A1               	movwf	??_SetDriveType
 12100  0DB5  0821               	movf	??_SetDriveType,w
 12101  0DB6  05D7               	andwf	_actCorrectDriveBit,f
 12102                           
 12103                           ;MotorDrive.c: 1540:         break;
 12104  0DB7  0008               	return
 12105  0DB8                     l5822:
 12106                           
 12107                           ;MotorDrive.c: 1544:         addShakePulseBit |= (UB) (motorBitOperation);
 12108  0DB8  0874               	movf	_motorBitOperation,w
 12109  0DB9  00A1               	movwf	??_SetDriveType
 12110  0DBA  0821               	movf	??_SetDriveType,w
 12111  0DBB  04F0               	iorwf	_addShakePulseBit,f
 12112                           
 12113                           ;MotorDrive.c: 1545:         reqSearchBasePosBit |= (UB) (motorBitOperation);
 12114  0DBC  0874               	movf	_motorBitOperation,w
 12115  0DBD  00A1               	movwf	??_SetDriveType
 12116  0DBE  0821               	movf	??_SetDriveType,w
 12117  0DBF  04D9               	iorwf	_reqSearchBasePosBit,f
 12118                           
 12119                           ;MotorDrive.c: 1547:         reqCheckLoadPosBit &= (UB) (~motorBitOperation);
 12120  0DC0  0974               	comf	_motorBitOperation,w
 12121  0DC1  00A1               	movwf	??_SetDriveType
 12122  0DC2  0821               	movf	??_SetDriveType,w
 12123  0DC3  0021               	movlb	1	; select bank1
 12124  0DC4  05CE               	andwf	_reqCheckLoadPosBit^(0+128),f
 12125                           
 12126                           ;MotorDrive.c: 1548:         reqCorrectBasePosBit &= (UB) (~motorBitOperation);
 12127  0DC5  0974               	comf	_motorBitOperation,w
 12128  0DC6  0020               	movlb	0	; select bank0
 12129  0DC7  00A1               	movwf	??_SetDriveType
 12130  0DC8  0821               	movf	??_SetDriveType,w
 12131  0DC9  05D8               	andwf	_reqCorrectBasePosBit,f
 12132                           
 12133                           ;MotorDrive.c: 1549:         reqCorrectFinePoBit &= (UB) (~motorBitOperation);
 12134  0DCA  0974               	comf	_motorBitOperation,w
 12135  0DCB  00A1               	movwf	??_SetDriveType
 12136  0DCC  0821               	movf	??_SetDriveType,w
 12137  0DCD  0021               	movlb	1	; select bank1
 12138  0DCE  05CF               	andwf	_reqCorrectFinePoBit^(0+128),f
 12139                           
 12140                           ;MotorDrive.c: 1550:         actCorrectDriveBit &= (UB) (~motorBitOperation);
 12141  0DCF  0974               	comf	_motorBitOperation,w
 12142  0DD0  0020               	movlb	0	; select bank0
 12143  0DD1  00A1               	movwf	??_SetDriveType
 12144  0DD2  0821               	movf	??_SetDriveType,w
 12145  0DD3  05D7               	andwf	_actCorrectDriveBit,f
 12146                           
 12147                           ;MotorDrive.c: 1551:         break;
 12148  0DD4  0008               	return
 12149  0DD5                     l5824:
 12150                           
 12151                           ;MotorDrive.c: 1554:         addShakePulseBit |= (UB) (motorBitOperation);
 12152  0DD5  0874               	movf	_motorBitOperation,w
 12153  0DD6  00A1               	movwf	??_SetDriveType
 12154  0DD7  0821               	movf	??_SetDriveType,w
 12155  0DD8  04F0               	iorwf	_addShakePulseBit,f
 12156                           
 12157                           ;MotorDrive.c: 1555:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12158  0DD9  0974               	comf	_motorBitOperation,w
 12159  0DDA  00A1               	movwf	??_SetDriveType
 12160  0DDB  0821               	movf	??_SetDriveType,w
 12161  0DDC  05D9               	andwf	_reqSearchBasePosBit,f
 12162                           
 12163                           ;MotorDrive.c: 1557:         reqCheckLoadPosBit |= (UB) (motorBitOperation);
 12164  0DDD  0874               	movf	_motorBitOperation,w
 12165  0DDE  00A1               	movwf	??_SetDriveType
 12166  0DDF  0821               	movf	??_SetDriveType,w
 12167  0DE0  0021               	movlb	1	; select bank1
 12168  0DE1  04CE               	iorwf	_reqCheckLoadPosBit^(0+128),f
 12169                           
 12170                           ;MotorDrive.c: 1561:         break;
 12171  0DE2  0008               	return
 12172  0DE3                     l5826:
 12173                           
 12174                           ;MotorDrive.c: 1564:         addShakePulseBit |= (UB) (motorBitOperation);
 12175  0DE3  0874               	movf	_motorBitOperation,w
 12176  0DE4  00A1               	movwf	??_SetDriveType
 12177  0DE5  0821               	movf	??_SetDriveType,w
 12178  0DE6  04F0               	iorwf	_addShakePulseBit,f
 12179                           
 12180                           ;MotorDrive.c: 1565:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12181  0DE7  0974               	comf	_motorBitOperation,w
 12182  0DE8  00A1               	movwf	??_SetDriveType
 12183  0DE9  0821               	movf	??_SetDriveType,w
 12184  0DEA  05D9               	andwf	_reqSearchBasePosBit,f
 12185                           
 12186                           ;MotorDrive.c: 1568:         reqCorrectBasePosBit |= (UB) (motorBitOperation);
 12187  0DEB  0874               	movf	_motorBitOperation,w
 12188  0DEC  00A1               	movwf	??_SetDriveType
 12189  0DED  0821               	movf	??_SetDriveType,w
 12190  0DEE  04D8               	iorwf	_reqCorrectBasePosBit,f
 12191                           
 12192                           ;MotorDrive.c: 1571:         break;
 12193  0DEF  0008               	return
 12194  0DF0                     l5828:
 12195                           
 12196                           ;MotorDrive.c: 1574:         addShakePulseBit &= (UB) (~motorBitOperation);
 12197  0DF0  0974               	comf	_motorBitOperation,w
 12198  0DF1  00A1               	movwf	??_SetDriveType
 12199  0DF2  0821               	movf	??_SetDriveType,w
 12200  0DF3  05F0               	andwf	_addShakePulseBit,f
 12201                           
 12202                           ;MotorDrive.c: 1575:         reqSearchBasePosBit &= (UB) (~motorBitOperation);
 12203  0DF4  0974               	comf	_motorBitOperation,w
 12204  0DF5  00A1               	movwf	??_SetDriveType
 12205  0DF6  0821               	movf	??_SetDriveType,w
 12206  0DF7  05D9               	andwf	_reqSearchBasePosBit,f
 12207                           
 12208                           ;MotorDrive.c: 1580:         actCorrectDriveBit |= (UB) (motorBitOperation);
 12209  0DF8  0874               	movf	_motorBitOperation,w
 12210  0DF9  00A1               	movwf	??_SetDriveType
 12211  0DFA  0821               	movf	??_SetDriveType,w
 12212  0DFB  04D7               	iorwf	_actCorrectDriveBit,f
 12213  0DFC  0008               	return
 12214  0DFD                     l5832:
 12215  0DFD  0820               	movf	SetDriveType@drive_type,w
 12216  0DFE  00A1               	movwf	??_SetDriveType
 12217  0DFF  01A2               	clrf	??_SetDriveType+1
 12218                           
 12219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12220                           ; Switch size 1, requested type "simple"
 12221                           ; Number of cases is 1, Range of values is 0 to 0
 12222                           ; switch strategies available:
 12223                           ; Name         Instructions Cycles
 12224                           ; simple_byte            4     3 (average)
 12225                           ; direct_byte            8     6 (fixed)
 12226                           ; jumptable            260     6 (fixed)
 12227                           ;	Chosen strategy is simple_byte
 12228  0E00  0822               	movf	??_SetDriveType+1,w
 12229  0E01  3A00               	xorlw	0	; case 0
 12230  0E02  1903               	skipnz
 12231  0E03  2E05               	goto	l6672
 12232  0E04  2E19               	goto	l779
 12233  0E05                     l6672:
 12234                           
 12235                           ; Switch size 1, requested type "simple"
 12236                           ; Number of cases is 6, Range of values is 0 to 5
 12237                           ; switch strategies available:
 12238                           ; Name         Instructions Cycles
 12239                           ; direct_byte           18     6 (fixed)
 12240                           ; simple_byte           19    10 (average)
 12241                           ; jumptable            260     6 (fixed)
 12242                           ;	Chosen strategy is simple_byte
 12243  0E05  0821               	movf	??_SetDriveType,w
 12244  0E06  3A00               	xorlw	0	; case 0
 12245  0E07  1903               	skipnz
 12246  0E08  2D9B               	goto	l5820
 12247  0E09  3A01               	xorlw	1	; case 1
 12248  0E0A  1903               	skipnz
 12249  0E0B  2DB8               	goto	l5822
 12250  0E0C  3A03               	xorlw	3	; case 2
 12251  0E0D  1903               	skipnz
 12252  0E0E  2DD5               	goto	l5824
 12253  0E0F  3A01               	xorlw	1	; case 3
 12254  0E10  1903               	skipnz
 12255  0E11  2DE3               	goto	l5826
 12256  0E12  3A07               	xorlw	7	; case 4
 12257  0E13  1903               	skipnz
 12258  0E14  2DF0               	goto	l5828
 12259  0E15  3A01               	xorlw	1	; case 5
 12260  0E16  1903               	skipnz
 12261  0E17  2DB8               	goto	l5822
 12262  0E18  2E19               	goto	l779
 12263  0E19                     l779:
 12264  0E19  0008               	return
 12265  0E1A                     __end_of_SetDriveType:
 12266                           
 12267                           	psect	text73
 12268  1419                     __ptext73:	
 12269 ;; *************** function _SetMotorEnableExcitating *****************
 12270 ;; Defined at:
 12271 ;;		line 1484 in file "MotorDrive.c"
 12272 ;; Parameters:    Size  Location     Type
 12273 ;;  motor_no        1    wreg     unsigned char 
 12274 ;; Auto vars:     Size  Location     Type
 12275 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12276 ;; Return value:  Size  Location     Type
 12277 ;;                  1    wreg      void 
 12278 ;; Registers used:
 12279 ;;		wreg, status,2, status,0
 12280 ;; Tracked objects:
 12281 ;;		On entry : 1F/0
 12282 ;;		On exit  : 1F/1
 12283 ;;		Unchanged: 0/0
 12284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12285 ;;      Params:         0       0       0       0       0       0       0       0
 12286 ;;      Locals:         0       1       0       0       0       0       0       0
 12287 ;;      Temps:          0       2       0       0       0       0       0       0
 12288 ;;      Totals:         0       3       0       0       0       0       0       0
 12289 ;;Total ram usage:        3 bytes
 12290 ;; Hardware stack levels used:    1
 12291 ;; Hardware stack levels required when called:    5
 12292 ;; This function calls:
 12293 ;;		Nothing
 12294 ;; This function is called by:
 12295 ;;		_SpiCmdFunc_EnableExcitating
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           
 12300                           ;psect for function _SetMotorEnableExcitating
 12301  1419                     _SetMotorEnableExcitating:
 12302                           
 12303                           ;incstack = 0
 12304                           ; Regs used in _SetMotorEnableExcitating: [wreg+status,2+status,0]
 12305                           ;SetMotorEnableExcitating@motor_no stored from wreg
 12306  1419  00A2               	movwf	SetMotorEnableExcitating@motor_no
 12307                           
 12308                           ;MotorDrive.c: 1484: void SetMotorEnableExcitating(UB motor_no);MotorDrive.c: 1485: {;Mo
      +                          torDrive.c: 1486:     motorBitOperation = (UB) (0x01 << motor_no);
 12309  141A  3001               	movlw	1
 12310  141B  00A0               	movwf	??_SetMotorEnableExcitating
 12311  141C  0A22               	incf	SetMotorEnableExcitating@motor_no,w
 12312  141D  2C1F               	goto	u4424
 12313  141E                     u4425:
 12314  141E  35A0               	lslf	??_SetMotorEnableExcitating,f
 12315  141F                     u4424:
 12316  141F  0B89               	decfsz	9,f
 12317  1420  2C1E               	goto	u4425
 12318  1421  0820               	movf	??_SetMotorEnableExcitating,w
 12319  1422  00A1               	movwf	??_SetMotorEnableExcitating+1
 12320  1423  0821               	movf	??_SetMotorEnableExcitating+1,w
 12321  1424  00F4               	movwf	_motorBitOperation
 12322                           
 12323                           ;MotorDrive.c: 1488:     excitatingEnableBit |= (UB) (motorBitOperation);
 12324  1425  0874               	movf	_motorBitOperation,w
 12325  1426  00A0               	movwf	??_SetMotorEnableExcitating
 12326  1427  0820               	movf	??_SetMotorEnableExcitating,w
 12327  1428  0021               	movlb	1	; select bank1
 12328  1429  04E0               	iorwf	_excitatingEnableBit^(0+128),f
 12329  142A  0008               	return
 12330  142B                     __end_of_SetMotorEnableExcitating:
 12331                           
 12332                           	psect	text74
 12333  1407                     __ptext74:	
 12334 ;; *************** function _SetMotorDisableExcitating *****************
 12335 ;; Defined at:
 12336 ;;		line 1499 in file "MotorDrive.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  motor_no        1    wreg     unsigned char 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;  motor_no        1    2[BANK0 ] unsigned char 
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg, status,2, status,0
 12345 ;; Tracked objects:
 12346 ;;		On entry : 1F/0
 12347 ;;		On exit  : 1F/1
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12350 ;;      Params:         0       0       0       0       0       0       0       0
 12351 ;;      Locals:         0       1       0       0       0       0       0       0
 12352 ;;      Temps:          0       2       0       0       0       0       0       0
 12353 ;;      Totals:         0       3       0       0       0       0       0       0
 12354 ;;Total ram usage:        3 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    5
 12357 ;; This function calls:
 12358 ;;		Nothing
 12359 ;; This function is called by:
 12360 ;;		_SpiCmdFunc_DisableExcitating
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           
 12365                           ;psect for function _SetMotorDisableExcitating
 12366  1407                     _SetMotorDisableExcitating:
 12367                           
 12368                           ;incstack = 0
 12369                           ; Regs used in _SetMotorDisableExcitating: [wreg+status,2+status,0]
 12370                           ;SetMotorDisableExcitating@motor_no stored from wreg
 12371  1407  00A2               	movwf	SetMotorDisableExcitating@motor_no
 12372                           
 12373                           ;MotorDrive.c: 1499: void SetMotorDisableExcitating(UB motor_no);MotorDrive.c: 1500: {;M
      +                          otorDrive.c: 1501:     motorBitOperation = (UB) (0x01 << motor_no);
 12374  1408  3001               	movlw	1
 12375  1409  00A0               	movwf	??_SetMotorDisableExcitating
 12376  140A  0A22               	incf	SetMotorDisableExcitating@motor_no,w
 12377  140B  2C0D               	goto	u4434
 12378  140C                     u4435:
 12379  140C  35A0               	lslf	??_SetMotorDisableExcitating,f
 12380  140D                     u4434:
 12381  140D  0B89               	decfsz	9,f
 12382  140E  2C0C               	goto	u4435
 12383  140F  0820               	movf	??_SetMotorDisableExcitating,w
 12384  1410  00A1               	movwf	??_SetMotorDisableExcitating+1
 12385  1411  0821               	movf	??_SetMotorDisableExcitating+1,w
 12386  1412  00F4               	movwf	_motorBitOperation
 12387                           
 12388                           ;MotorDrive.c: 1503:     excitatingEnableBit &= (UB) (~motorBitOperation);
 12389  1413  0974               	comf	_motorBitOperation,w
 12390  1414  00A0               	movwf	??_SetMotorDisableExcitating
 12391  1415  0820               	movf	??_SetMotorDisableExcitating,w
 12392  1416  0021               	movlb	1	; select bank1
 12393  1417  05E0               	andwf	_excitatingEnableBit^(0+128),f
 12394  1418  0008               	return
 12395  1419                     __end_of_SetMotorDisableExcitating:
 12396                           
 12397                           	psect	text75
 12398  138C                     __ptext75:	
 12399 ;; *************** function _InitPulsePositionTable *****************
 12400 ;; Defined at:
 12401 ;;		line 795 in file "MotorDrive.c"
 12402 ;; Parameters:    Size  Location     Type
 12403 ;;  motor_no        1    wreg     unsigned char 
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;  motor_no        1    1[BANK0 ] unsigned char 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      void 
 12408 ;; Registers used:
 12409 ;;		wreg, status,2, status,0
 12410 ;; Tracked objects:
 12411 ;;		On entry : 1C/2
 12412 ;;		On exit  : 1F/1
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12415 ;;      Params:         0       0       0       0       0       0       0       0
 12416 ;;      Locals:         0       1       0       0       0       0       0       0
 12417 ;;      Temps:          0       1       0       0       0       0       0       0
 12418 ;;      Totals:         0       2       0       0       0       0       0       0
 12419 ;;Total ram usage:        2 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    5
 12422 ;; This function calls:
 12423 ;;		Nothing
 12424 ;; This function is called by:
 12425 ;;		_main
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _InitPulsePositionTable
 12431  138C                     _InitPulsePositionTable:
 12432                           
 12433                           ;incstack = 0
 12434                           ; Regs used in _InitPulsePositionTable: [wreg+status,2+status,0]
 12435                           ;InitPulsePositionTable@motor_no stored from wreg
 12436  138C  0020               	movlb	0	; select bank0
 12437  138D  00A1               	movwf	InitPulsePositionTable@motor_no
 12438                           
 12439                           ;MotorDrive.c: 795: void InitPulsePositionTable(UB motor_no);MotorDrive.c: 796: {;MotorD
      +                          rive.c: 797:     if (0 == motor_no) {
 12440  138E  0821               	movf	InitPulsePositionTable@motor_no,w
 12441  138F  1D03               	btfss	3,2
 12442  1390  2B97               	goto	l6598
 12443                           
 12444                           ;MotorDrive.c: 798:         TblM0PulseChangePositionLast = PULSE_CHANGE_OFF;
 12445  1391  305B               	movlw	91
 12446  1392  00A0               	movwf	??_InitPulsePositionTable
 12447  1393  0820               	movf	??_InitPulsePositionTable,w
 12448  1394  0021               	movlb	1	; select bank1
 12449  1395  00ED               	movwf	_TblM0PulseChangePositionLast^(0+128)
 12450                           
 12451                           ;MotorDrive.c: 799:     } else {
 12452  1396  0008               	return
 12453  1397                     l6598:
 12454                           
 12455                           ;MotorDrive.c: 800:         TblM1PulseChangePositionLast = PULSE_CHANGE_OFF;
 12456  1397  305B               	movlw	91
 12457  1398  00A0               	movwf	??_InitPulsePositionTable
 12458  1399  0820               	movf	??_InitPulsePositionTable,w
 12459  139A  0021               	movlb	1	; select bank1
 12460  139B  00EC               	movwf	_TblM1PulseChangePositionLast^(0+128)
 12461  139C  0008               	return
 12462  139D                     __end_of_InitPulsePositionTable:
 12463                           
 12464                           	psect	intentry
 12465  0004                     __pintentry:	
 12466 ;; *************** function _INTERRUPT_InterruptManager *****************
 12467 ;; Defined at:
 12468 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;		None
 12471 ;; Auto vars:     Size  Location     Type
 12472 ;;		None
 12473 ;; Return value:  Size  Location     Type
 12474 ;;                  1    wreg      void 
 12475 ;; Registers used:
 12476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12477 ;; Tracked objects:
 12478 ;;		On entry : 0/0
 12479 ;;		On exit  : 0/0
 12480 ;;		Unchanged: 0/0
 12481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12482 ;;      Params:         0       0       0       0       0       0       0       0
 12483 ;;      Locals:         0       0       0       0       0       0       0       0
 12484 ;;      Temps:          0       0       0       0       0       0       0       0
 12485 ;;      Totals:         0       0       0       0       0       0       0       0
 12486 ;;Total ram usage:        0 bytes
 12487 ;; Hardware stack levels used:    1
 12488 ;; Hardware stack levels required when called:    4
 12489 ;; This function calls:
 12490 ;;		_TMR1_ISR
 12491 ;;		_TMR2_ISR
 12492 ;; This function is called by:
 12493 ;;		Interrupt level 1
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497  0004                     _INTERRUPT_InterruptManager:
 12498                           
 12499                           ;incstack = 0
 12500  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12501                           
 12502                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12503  0005  3180               	pagesel	$
 12504                           
 12505                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 12506  0006  1F0B               	btfss	11,6	;volatile
 12507  0007  281A               	goto	i1l85
 12508                           
 12509                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 12510  0008  0021               	movlb	1	; select bank1
 12511  0009  1C91               	btfss	17,1	;volatile
 12512  000A  2812               	goto	i1l80
 12513  000B  0020               	movlb	0	; select bank0
 12514  000C  1C91               	btfss	17,1	;volatile
 12515  000D  2812               	goto	i1l80
 12516                           
 12517                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             TMR2_ISR();
 12518  000E  3191  214C  3180   	fcall	_TMR2_ISR
 12519                           
 12520                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 12521  0011  281A               	goto	i1l85
 12522  0012                     i1l80:	
 12523                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12524                           
 12525  0012  0021               	movlb	1	; select bank1
 12526  0013  1C11               	btfss	17,0	;volatile
 12527  0014  281A               	goto	i1l85
 12528  0015  0020               	movlb	0	; select bank0
 12529  0016  1C11               	btfss	17,0	;volatile
 12530  0017  281A               	goto	i1l85
 12531                           
 12532                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
 12533  0018  3191  21BB         	fcall	_TMR1_ISR
 12534  001A                     i1l85:	
 12535                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 12536                           
 12537                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12538                           
 12539  001A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12540  001B  0009               	retfie
 12541  001C                     __end_of_INTERRUPT_InterruptManager:
 12542                           
 12543                           	psect	text77
 12544  114C                     __ptext77:	
 12545 ;; *************** function _TMR2_ISR *****************
 12546 ;; Defined at:
 12547 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12548 ;; Parameters:    Size  Location     Type
 12549 ;;		None
 12550 ;; Auto vars:     Size  Location     Type
 12551 ;;		None
 12552 ;; Return value:  Size  Location     Type
 12553 ;;                  1    wreg      void 
 12554 ;; Registers used:
 12555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 1F/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12561 ;;      Params:         0       0       0       0       0       0       0       0
 12562 ;;      Locals:         0       0       0       0       0       0       0       0
 12563 ;;      Temps:          0       0       0       0       0       0       0       0
 12564 ;;      Totals:         0       0       0       0       0       0       0       0
 12565 ;;Total ram usage:        0 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    3
 12568 ;; This function calls:
 12569 ;;		_TMR2_CallBack
 12570 ;; This function is called by:
 12571 ;;		_INTERRUPT_InterruptManager
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function _TMR2_ISR
 12577  114C                     _TMR2_ISR:
 12578                           
 12579                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12580                           
 12581                           ;incstack = 0
 12582                           ; Regs used in _TMR2_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12583  114C  1091               	bcf	17,1	;volatile
 12584                           
 12585                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12586  114D  3191  21A5         	fcall	_TMR2_CallBack
 12587  114F  0008               	return
 12588  1150                     __end_of_TMR2_ISR:
 12589                           
 12590                           	psect	text78
 12591  11A5                     __ptext78:	
 12592 ;; *************** function _TMR2_CallBack *****************
 12593 ;; Defined at:
 12594 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;		None
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;		None
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  1    wreg      void 
 12601 ;; Registers used:
 12602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12603 ;; Tracked objects:
 12604 ;;		On entry : 1F/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12608 ;;      Params:         0       0       0       0       0       0       0       0
 12609 ;;      Locals:         0       0       0       0       0       0       0       0
 12610 ;;      Temps:          0       0       0       0       0       0       0       0
 12611 ;;      Totals:         0       0       0       0       0       0       0       0
 12612 ;;Total ram usage:        0 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    2
 12615 ;; This function calls:
 12616 ;;		Absolute function
 12617 ;;		_TMR2_DefaultInterruptHandler
 12618 ;;		_TMR2_Interrupt
 12619 ;;		_TMR2_Interrupt_SPK
 12620 ;; This function is called by:
 12621 ;;		_TMR2_ISR
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _TMR2_CallBack
 12627  11A5                     _TMR2_CallBack:
 12628                           
 12629                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _TMR2_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12633  11A5  0022               	movlb	2	; select bank2
 12634  11A6  0868               	movf	_TMR2_InterruptHandler^(0+256),w
 12635  11A7  0469               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 12636  11A8  1903               	btfsc	3,2
 12637  11A9  0008               	return
 12638                           
 12639                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 12640  11AA  0869               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 12641  11AB  008A               	movwf	10
 12642  11AC  0868               	movf	_TMR2_InterruptHandler^(0+256),w
 12643  11AD  000A               	callw
 12644  11AE  3191               	pagesel	$
 12645  11AF  0008               	return
 12646  11B0                     __end_of_TMR2_CallBack:
 12647                           
 12648                           	psect	text79
 12649  03F9                     __ptext79:	
 12650 ;; *************** function _TMR2_Interrupt *****************
 12651 ;; Defined at:
 12652 ;;		line 863 in file "MotorDrive.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;		None
 12655 ;; Auto vars:     Size  Location     Type
 12656 ;;		None
 12657 ;; Return value:  Size  Location     Type
 12658 ;;                  1    wreg      void 
 12659 ;; Registers used:
 12660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12661 ;; Tracked objects:
 12662 ;;		On entry : 1F/2
 12663 ;;		On exit  : 1F/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12666 ;;      Params:         0       0       0       0       0       0       0       0
 12667 ;;      Locals:         0       0       0       0       0       0       0       0
 12668 ;;      Temps:          3       0       0       0       0       0       0       0
 12669 ;;      Totals:         3       0       0       0       0       0       0       0
 12670 ;;Total ram usage:        3 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    1
 12673 ;; This function calls:
 12674 ;;		Absolute function
 12675 ;;		_ComparatorOff
 12676 ;;		_ComparatorOn
 12677 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 12678 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 12679 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 12680 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 12681 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 12682 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 12683 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 12684 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 12685 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 12686 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 12687 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 12688 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 12689 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 12690 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 12691 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 12692 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 12693 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 12694 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 12695 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 12696 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 12697 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 12698 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 12699 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 12700 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 12701 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 12702 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 12703 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 12704 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 12705 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 12706 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 12707 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 12708 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 12709 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 12710 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 12711 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 12712 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 12713 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 12714 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 12715 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 12716 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 12717 ;;		_VrsCheck
 12718 ;;		i1_TMR2_StopTimer
 12719 ;; This function is called by:
 12720 ;;		_main
 12721 ;;		_SetMotorStopSPK
 12722 ;;		_TMR2_CallBack
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           
 12727                           ;psect for function _TMR2_Interrupt
 12728  03F9                     _TMR2_Interrupt:
 12729                           
 12730                           ;MotorDrive.c: 869:     if (OutTrisRequestFlug == 1) {
 12731                           
 12732                           ;incstack = 0
 12733                           ; Regs used in _TMR2_Interrupt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12734  03F9  0021               	movlb	1	; select bank1
 12735  03FA  0355               	decf	_OutTrisRequestFlug^(0+128),w
 12736  03FB  1D03               	btfss	3,2
 12737  03FC  2C31               	goto	i1l4780
 12738                           
 12739                           ;MotorDrive.c: 870:         OutTrisRequestFlug = 0;
 12740  03FD  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 12741                           
 12742                           ;MotorDrive.c: 874:         dataTRISA = TRISA;
 12743  03FE  080C               	movf	12,w	;volatile
 12744  03FF  00F7               	movwf	??_TMR2_Interrupt
 12745  0400  0877               	movf	??_TMR2_Interrupt,w
 12746  0401  0020               	movlb	0	; select bank0
 12747  0402  00E4               	movwf	_dataTRISA
 12748                           
 12749                           ;MotorDrive.c: 875:         dataTRISB = TRISB;
 12750  0403  0021               	movlb	1	; select bank1
 12751  0404  080D               	movf	13,w	;volatile
 12752  0405  00F7               	movwf	??_TMR2_Interrupt
 12753  0406  0877               	movf	??_TMR2_Interrupt,w
 12754  0407  0020               	movlb	0	; select bank0
 12755  0408  00E3               	movwf	_dataTRISB
 12756                           
 12757                           ;MotorDrive.c: 876:         dataTRISC = TRISC;
 12758  0409  0021               	movlb	1	; select bank1
 12759  040A  080E               	movf	14,w	;volatile
 12760  040B  00F7               	movwf	??_TMR2_Interrupt
 12761  040C  0877               	movf	??_TMR2_Interrupt,w
 12762  040D  0020               	movlb	0	; select bank0
 12763  040E  00E2               	movwf	_dataTRISC
 12764                           
 12765                           ;MotorDrive.c: 880:         dataTRISB &= (UB) (~(0x00 | 0x00));
 12766  040F  30FD               	movlw	253
 12767  0410  00F7               	movwf	??_TMR2_Interrupt
 12768  0411  0877               	movf	??_TMR2_Interrupt,w
 12769  0412  05E4               	andwf	_dataTRISA,f
 12770                           
 12771                           ;MotorDrive.c: 881:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 12772  0413  30C1               	movlw	193
 12773  0414  00F7               	movwf	??_TMR2_Interrupt
 12774  0415  0877               	movf	??_TMR2_Interrupt,w
 12775  0416  05E2               	andwf	_dataTRISC,f
 12776                           
 12777                           ;MotorDrive.c: 884:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 12778  0417  0861               	movf	_dataTRISAWork_M0,w
 12779  0418  045E               	iorwf	_dataTRISAWork_M1,w
 12780  0419  00F7               	movwf	??_TMR2_Interrupt
 12781  041A  0877               	movf	??_TMR2_Interrupt,w
 12782  041B  04E4               	iorwf	_dataTRISA,f
 12783                           
 12784                           ;MotorDrive.c: 885:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 12785  041C  0860               	movf	_dataTRISBWork_M0,w
 12786  041D  045D               	iorwf	_dataTRISBWork_M1,w
 12787  041E  00F7               	movwf	??_TMR2_Interrupt
 12788  041F  0877               	movf	??_TMR2_Interrupt,w
 12789  0420  04E3               	iorwf	_dataTRISB,f
 12790                           
 12791                           ;MotorDrive.c: 886:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 12792  0421  085F               	movf	_dataTRISCWork_M0,w
 12793  0422  045C               	iorwf	_dataTRISCWork_M1,w
 12794  0423  00F7               	movwf	??_TMR2_Interrupt
 12795  0424  0877               	movf	??_TMR2_Interrupt,w
 12796  0425  04E2               	iorwf	_dataTRISC,f
 12797                           
 12798                           ;MotorDrive.c: 889:         TRISA = dataTRISA;
 12799  0426  0864               	movf	_dataTRISA,w
 12800  0427  0021               	movlb	1	; select bank1
 12801  0428  008C               	movwf	12	;volatile
 12802                           
 12803                           ;MotorDrive.c: 890:         TRISB = dataTRISB;
 12804  0429  0020               	movlb	0	; select bank0
 12805  042A  0863               	movf	_dataTRISB,w
 12806  042B  0021               	movlb	1	; select bank1
 12807  042C  008D               	movwf	13	;volatile
 12808                           
 12809                           ;MotorDrive.c: 891:         TRISC = dataTRISC;
 12810  042D  0020               	movlb	0	; select bank0
 12811  042E  0862               	movf	_dataTRISC,w
 12812  042F  0021               	movlb	1	; select bank1
 12813  0430  008E               	movwf	14	;volatile
 12814  0431                     i1l4780:
 12815                           
 12816                           ;MotorDrive.c: 894:     if (OutRequestFlug == 1) {
 12817  0431  0356               	decf	_OutRequestFlug^(0+128),w
 12818  0432  1D03               	btfss	3,2
 12819  0433  2C73               	goto	i1l4808
 12820                           
 12821                           ;MotorDrive.c: 895:         OutRequestFlug = 0;
 12822  0434  01D6               	clrf	_OutRequestFlug^(0+128)
 12823                           
 12824                           ;MotorDrive.c: 899:         pulseOutLATA = LATA;
 12825  0435  0022               	movlb	2	; select bank2
 12826  0436  080C               	movf	12,w	;volatile
 12827  0437  00F7               	movwf	??_TMR2_Interrupt
 12828  0438  0877               	movf	??_TMR2_Interrupt,w
 12829  0439  0020               	movlb	0	; select bank0
 12830  043A  00EA               	movwf	_pulseOutLATA
 12831                           
 12832                           ;MotorDrive.c: 900:         pulseOutLATB = LATB;
 12833  043B  0022               	movlb	2	; select bank2
 12834  043C  080D               	movf	13,w	;volatile
 12835  043D  00F7               	movwf	??_TMR2_Interrupt
 12836  043E  0877               	movf	??_TMR2_Interrupt,w
 12837  043F  0020               	movlb	0	; select bank0
 12838  0440  00E9               	movwf	_pulseOutLATB
 12839                           
 12840                           ;MotorDrive.c: 901:         pulseOutLATC = LATC;
 12841  0441  0022               	movlb	2	; select bank2
 12842  0442  080E               	movf	14,w	;volatile
 12843  0443  00F7               	movwf	??_TMR2_Interrupt
 12844  0444  0877               	movf	??_TMR2_Interrupt,w
 12845  0445  0020               	movlb	0	; select bank0
 12846  0446  00E8               	movwf	_pulseOutLATC
 12847                           
 12848                           ;MotorDrive.c: 904:         pulseOutLATA &= (UB) (~(0x32 | 0x00));
 12849  0447  30CD               	movlw	205
 12850  0448  00F7               	movwf	??_TMR2_Interrupt
 12851  0449  0877               	movf	??_TMR2_Interrupt,w
 12852  044A  05EA               	andwf	_pulseOutLATA,f
 12853                           
 12854                           ;MotorDrive.c: 905:         pulseOutLATB &= (UB) (~(0x00 | 0xA0));
 12855  044B  305F               	movlw	95
 12856  044C  00F7               	movwf	??_TMR2_Interrupt
 12857  044D  0877               	movf	??_TMR2_Interrupt,w
 12858  044E  05E9               	andwf	_pulseOutLATB,f
 12859                           
 12860                           ;MotorDrive.c: 906:         pulseOutLATC &= (UB) (~(0x02 | 0x0C));
 12861  044F  30F1               	movlw	241
 12862  0450  00F7               	movwf	??_TMR2_Interrupt
 12863  0451  0877               	movf	??_TMR2_Interrupt,w
 12864  0452  05E8               	andwf	_pulseOutLATC,f
 12865                           
 12866                           ;MotorDrive.c: 909:         pulseOutLATA |= (UB) (pulseOutLATAWork_M0 | pulseOutLATAWork
      +                          _M1);
 12867  0453  0867               	movf	_pulseOutLATAWork_M0,w
 12868  0454  0021               	movlb	1	; select bank1
 12869  0455  046B               	iorwf	_pulseOutLATAWork_M1^(0+128),w
 12870  0456  00F7               	movwf	??_TMR2_Interrupt
 12871  0457  0877               	movf	??_TMR2_Interrupt,w
 12872  0458  0020               	movlb	0	; select bank0
 12873  0459  04EA               	iorwf	_pulseOutLATA,f
 12874                           
 12875                           ;MotorDrive.c: 910:         pulseOutLATB |= (UB) (pulseOutLATBWork_M0 | pulseOutLATBWork
      +                          _M1);
 12876  045A  0866               	movf	_pulseOutLATBWork_M0,w
 12877  045B  0021               	movlb	1	; select bank1
 12878  045C  046A               	iorwf	_pulseOutLATBWork_M1^(0+128),w
 12879  045D  00F7               	movwf	??_TMR2_Interrupt
 12880  045E  0877               	movf	??_TMR2_Interrupt,w
 12881  045F  0020               	movlb	0	; select bank0
 12882  0460  04E9               	iorwf	_pulseOutLATB,f
 12883                           
 12884                           ;MotorDrive.c: 911:         pulseOutLATC |= (UB) (pulseOutLATCWork_M0 | pulseOutLATCWork
      +                          _M1);
 12885  0461  0865               	movf	_pulseOutLATCWork_M0,w
 12886  0462  0021               	movlb	1	; select bank1
 12887  0463  0469               	iorwf	_pulseOutLATCWork_M1^(0+128),w
 12888  0464  00F7               	movwf	??_TMR2_Interrupt
 12889  0465  0877               	movf	??_TMR2_Interrupt,w
 12890  0466  0020               	movlb	0	; select bank0
 12891  0467  04E8               	iorwf	_pulseOutLATC,f
 12892                           
 12893                           ;MotorDrive.c: 914:         LATA = pulseOutLATA;
 12894  0468  086A               	movf	_pulseOutLATA,w
 12895  0469  0022               	movlb	2	; select bank2
 12896  046A  008C               	movwf	12	;volatile
 12897                           
 12898                           ;MotorDrive.c: 915:         LATB = pulseOutLATB;
 12899  046B  0020               	movlb	0	; select bank0
 12900  046C  0869               	movf	_pulseOutLATB,w
 12901  046D  0022               	movlb	2	; select bank2
 12902  046E  008D               	movwf	13	;volatile
 12903                           
 12904                           ;MotorDrive.c: 916:         LATC = pulseOutLATC;
 12905  046F  0020               	movlb	0	; select bank0
 12906  0470  0868               	movf	_pulseOutLATC,w
 12907  0471  0022               	movlb	2	; select bank2
 12908  0472  008E               	movwf	14	;volatile
 12909  0473                     i1l4808:
 12910                           
 12911                           ;MotorDrive.c: 924:     if (reqVrsCheckBit & 0x01) {
 12912  0473  0021               	movlb	1	; select bank1
 12913  0474  1C52               	btfss	_reqVrsCheckBit^(0+128),0
 12914  0475  2C7E               	goto	i1l4814
 12915                           
 12916                           ;MotorDrive.c: 925:         reqVrsCheckBit &= ~0x01;
 12917  0476  30FE               	movlw	254
 12918  0477  00F7               	movwf	??_TMR2_Interrupt
 12919  0478  0877               	movf	??_TMR2_Interrupt,w
 12920  0479  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12921                           
 12922                           ;MotorDrive.c: 926:         VrsCheck(0);
 12923  047A  3000               	movlw	0
 12924  047B  3196  2602  3183   	fcall	_VrsCheck
 12925  047E                     i1l4814:
 12926                           
 12927                           ;MotorDrive.c: 928:     if (reqVrsCheckBit & 0x02) {
 12928  047E  0021               	movlb	1	; select bank1
 12929  047F  1CD2               	btfss	_reqVrsCheckBit^(0+128),1
 12930  0480  2C89               	goto	i1l4820
 12931                           
 12932                           ;MotorDrive.c: 929:         reqVrsCheckBit &= ~0x02;
 12933  0481  30FD               	movlw	253
 12934  0482  00F7               	movwf	??_TMR2_Interrupt
 12935  0483  0877               	movf	??_TMR2_Interrupt,w
 12936  0484  05D2               	andwf	_reqVrsCheckBit^(0+128),f
 12937                           
 12938                           ;MotorDrive.c: 930:         VrsCheck(1);
 12939  0485  3001               	movlw	1
 12940  0486  3196  2602  3183   	fcall	_VrsCheck
 12941  0489                     i1l4820:
 12942                           
 12943                           ;MotorDrive.c: 933:     if (reqComparatorOnBit & 0x01) {
 12944  0489  0021               	movlb	1	; select bank1
 12945  048A  1C54               	btfss	_reqComparatorOnBit^(0+128),0
 12946  048B  2C94               	goto	i1l4826
 12947                           
 12948                           ;MotorDrive.c: 934:         reqComparatorOnBit &= ~0x01;
 12949  048C  30FE               	movlw	254
 12950  048D  00F7               	movwf	??_TMR2_Interrupt
 12951  048E  0877               	movf	??_TMR2_Interrupt,w
 12952  048F  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12953                           
 12954                           ;MotorDrive.c: 935:         ComparatorOn(0);
 12955  0490  3000               	movlw	0
 12956  0491  3196  2651  3183   	fcall	_ComparatorOn
 12957  0494                     i1l4826:
 12958                           
 12959                           ;MotorDrive.c: 937:     if (reqComparatorOnBit & 0x02) {
 12960  0494  0021               	movlb	1	; select bank1
 12961  0495  1CD4               	btfss	_reqComparatorOnBit^(0+128),1
 12962  0496  2C9F               	goto	i1l4832
 12963                           
 12964                           ;MotorDrive.c: 938:         reqComparatorOnBit &= ~0x02;
 12965  0497  30FD               	movlw	253
 12966  0498  00F7               	movwf	??_TMR2_Interrupt
 12967  0499  0877               	movf	??_TMR2_Interrupt,w
 12968  049A  05D4               	andwf	_reqComparatorOnBit^(0+128),f
 12969                           
 12970                           ;MotorDrive.c: 939:         ComparatorOn(1);
 12971  049B  3001               	movlw	1
 12972  049C  3196  2651  3183   	fcall	_ComparatorOn
 12973  049F                     i1l4832:
 12974                           
 12975                           ;MotorDrive.c: 942:     if (reqComparatorOffBit & 0x01) {
 12976  049F  0021               	movlb	1	; select bank1
 12977  04A0  1C53               	btfss	_reqComparatorOffBit^(0+128),0
 12978  04A1  2CAA               	goto	i1l4838
 12979                           
 12980                           ;MotorDrive.c: 943:         reqComparatorOffBit &= ~0x01;
 12981  04A2  30FE               	movlw	254
 12982  04A3  00F7               	movwf	??_TMR2_Interrupt
 12983  04A4  0877               	movf	??_TMR2_Interrupt,w
 12984  04A5  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 12985                           
 12986                           ;MotorDrive.c: 944:         ComparatorOff(0);
 12987  04A6  3000               	movlw	0
 12988  04A7  3194  2473  3183   	fcall	_ComparatorOff
 12989  04AA                     i1l4838:
 12990                           
 12991                           ;MotorDrive.c: 946:     if (reqComparatorOffBit & 0x02) {
 12992  04AA  0021               	movlb	1	; select bank1
 12993  04AB  1CD3               	btfss	_reqComparatorOffBit^(0+128),1
 12994  04AC  2CB5               	goto	i1l4844
 12995                           
 12996                           ;MotorDrive.c: 947:         reqComparatorOffBit &= ~0x02;
 12997  04AD  30FD               	movlw	253
 12998  04AE  00F7               	movwf	??_TMR2_Interrupt
 12999  04AF  0877               	movf	??_TMR2_Interrupt,w
 13000  04B0  05D3               	andwf	_reqComparatorOffBit^(0+128),f
 13001                           
 13002                           ;MotorDrive.c: 948:         ComparatorOff(1);
 13003  04B1  3001               	movlw	1
 13004  04B2  3194  2473  3183   	fcall	_ComparatorOff
 13005  04B5                     i1l4844:
 13006                           
 13007                           ;MotorDrive.c: 951:     if (motorActiveBit & 0x01) {
 13008  04B5  0020               	movlb	0	; select bank0
 13009  04B6  1C5A               	btfss	_motorActiveBit,0
 13010  04B7  2D4F               	goto	i1l4898
 13011                           
 13012                           ;MotorDrive.c: 957:         m0PulsePositionCt++;
 13013  04B8  3001               	movlw	1
 13014  04B9  00F7               	movwf	??_TMR2_Interrupt
 13015  04BA  0877               	movf	??_TMR2_Interrupt,w
 13016  04BB  0021               	movlb	1	; select bank1
 13017  04BC  07E8               	addwf	_m0PulsePositionCt^(0+128),f
 13018                           
 13019                           ;MotorDrive.c: 958:         if (m0PulsePositionCt == m0PulseChangePosition) {
 13020  04BD  0868               	movf	_m0PulsePositionCt^(0+128),w
 13021  04BE  0664               	xorwf	_m0PulseChangePosition^(0+128),w
 13022  04BF  1D03               	skipz
 13023  04C0  2D4F               	goto	i1l4898
 13024                           
 13025                           ;MotorDrive.c: 961:             m0PulseOutStep++;
 13026  04C1  3001               	movlw	1
 13027  04C2  00F7               	movwf	??_TMR2_Interrupt
 13028  04C3  0877               	movf	??_TMR2_Interrupt,w
 13029  04C4  07F3               	addwf	_m0PulseOutStep,f
 13030                           
 13031                           ;MotorDrive.c: 963:             if (m0PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 13032  04C5  301A               	movlw	26
 13033  04C6  0273               	subwf	_m0PulseOutStep,w
 13034  04C7  1C03               	skipc
 13035  04C8  2D31               	goto	i1l4888
 13036                           
 13037                           ;MotorDrive.c: 965:                 if (0 == (actCorrectDriveBit & 0x01)) {
 13038  04C9  0020               	movlb	0	; select bank0
 13039  04CA  1857               	btfsc	_actCorrectDriveBit,0
 13040  04CB  2CF7               	goto	i1l675
 13041                           
 13042                           ;MotorDrive.c: 966:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit 
      +                          | reqCheckLoadPosBit) & 0x01) {
 13043  04CC  0858               	movf	_reqCorrectBasePosBit,w
 13044  04CD  0459               	iorwf	_reqSearchBasePosBit,w
 13045  04CE  00F7               	movwf	??_TMR2_Interrupt
 13046  04CF  0021               	movlb	1	; select bank1
 13047  04D0  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 13048  04D1  0477               	iorwf	??_TMR2_Interrupt,w
 13049  04D2  00F8               	movwf	??_TMR2_Interrupt+1
 13050  04D3  1C78               	btfss	??_TMR2_Interrupt+1,0
 13051  04D4  2CF7               	goto	i1l675
 13052                           
 13053                           ;MotorDrive.c: 968:                         positionSearchCt[ 0 ]++;
 13054  04D5  3001               	movlw	1
 13055  04D6  07A8               	addwf	_positionSearchCt^(0+128),f
 13056  04D7  3000               	movlw	0
 13057  04D8  3DA9               	addwfc	(_positionSearchCt+1)^(0+128),f
 13058                           
 13059                           ;MotorDrive.c: 970:                         if ((0 == vrsCountValue[ 0 ])
 13060  04D9  0840               	movf	_vrsCountValue^(0+128),w
 13061  04DA  1903               	btfsc	3,2
 13062  04DB  2CF0               	goto	i1l4864
 13063  04DC  3056               	movlw	low (_TblMaxSteps| (0+32768))
 13064  04DD  0084               	movwf	4
 13065  04DE  3098               	movlw	high (_TblMaxSteps| (0+32768))
 13066  04DF  0085               	movwf	5
 13067  04E0  3F00               	moviw [0]fsr0
 13068  04E1  00F7               	movwf	??_TMR2_Interrupt
 13069  04E2  3F01               	moviw [1]fsr0
 13070  04E3  00F8               	movwf	??_TMR2_Interrupt+1
 13071  04E4  0829               	movf	(_positionSearchCt+1)^(0+128),w
 13072  04E5  3A80               	xorlw	128
 13073  04E6  00F9               	movwf	??_TMR2_Interrupt+2
 13074  04E7  0878               	movf	??_TMR2_Interrupt+1,w
 13075  04E8  3A80               	xorlw	128
 13076  04E9  0279               	subwf	??_TMR2_Interrupt+2,w
 13077  04EA  1D03               	skipz
 13078  04EB  2CEE               	goto	u295_25
 13079  04EC  0877               	movf	??_TMR2_Interrupt,w
 13080  04ED  0228               	subwf	_positionSearchCt^(0+128),w
 13081  04EE                     u295_25:
 13082  04EE  1C03               	skipc
 13083  04EF  2CF7               	goto	i1l675
 13084  04F0                     i1l4864:
 13085                           
 13086                           ;MotorDrive.c: 971:                                 || (positionSearchCt[ 0 ] >= TblMaxS
      +                          teps[ 0 ])) {;MotorDrive.c: 972:                             motorActiveBit &= (UB) (~0x
      +                          01);
 13087  04F0  30FE               	movlw	254
 13088  04F1  00F7               	movwf	??_TMR2_Interrupt
 13089  04F2  0877               	movf	??_TMR2_Interrupt,w
 13090  04F3  0020               	movlb	0	; select bank0
 13091  04F4  05DA               	andwf	_motorActiveBit,f
 13092                           
 13093                           ;MotorDrive.c: 973:                             reqAfterDetectLoadFuncBit |= 0x01;
 13094  04F5  0021               	movlb	1	; select bank1
 13095  04F6  1450               	bsf	_reqAfterDetectLoadFuncBit^(0+128),0
 13096  04F7                     i1l675:	
 13097                           ;MotorDrive.c: 979:                 }
 13098                           
 13099                           
 13100                           ;MotorDrive.c: 981:                 if (motorM0StepCounter) {
 13101  04F7  0020               	movlb	0	; select bank0
 13102  04F8  0855               	movf	_motorM0StepCounter,w
 13103  04F9  0456               	iorwf	_motorM0StepCounter+1,w
 13104  04FA  1903               	btfsc	3,2
 13105  04FB  2D19               	goto	i1l4876
 13106                           
 13107                           ;MotorDrive.c: 983:                     motorM0StepCounter--;
 13108  04FC  30FF               	movlw	255
 13109  04FD  07D5               	addwf	_motorM0StepCounter,f
 13110  04FE  30FF               	movlw	255
 13111  04FF  3DD6               	addwfc	_motorM0StepCounter+1,f
 13112                           
 13113                           ;MotorDrive.c: 984:                     if (0 >= motorM0StepCounter) {
 13114  0500  0856               	movf	_motorM0StepCounter+1,w
 13115  0501  3A80               	xorlw	128
 13116  0502  00F7               	movwf	??_TMR2_Interrupt
 13117  0503  3080               	movlw	128
 13118  0504  0277               	subwf	??_TMR2_Interrupt,w
 13119  0505  1D03               	skipz
 13120  0506  2D09               	goto	u297_25
 13121  0507  3001               	movlw	1
 13122  0508  0255               	subwf	_motorM0StepCounter,w
 13123  0509                     u297_25:
 13124  0509  1803               	skipnc
 13125  050A  2D19               	goto	i1l4876
 13126                           
 13127                           ;MotorDrive.c: 985:                         actCorrectDriveBit &= (UB) (~0x01);
 13128  050B  30FE               	movlw	254
 13129  050C  00F7               	movwf	??_TMR2_Interrupt
 13130  050D  0877               	movf	??_TMR2_Interrupt,w
 13131  050E  0020               	movlb	0	; select bank0
 13132  050F  05D7               	andwf	_actCorrectDriveBit,f
 13133                           
 13134                           ;MotorDrive.c: 986:                         motorActiveBit &= (UB) (~0x01);
 13135  0510  30FE               	movlw	254
 13136  0511  00F7               	movwf	??_TMR2_Interrupt
 13137  0512  0877               	movf	??_TMR2_Interrupt,w
 13138  0513  05DA               	andwf	_motorActiveBit,f
 13139                           
 13140                           ;MotorDrive.c: 987:                         reqAfterMotorStopFuncBit |= 0x01;
 13141  0514  0021               	movlb	1	; select bank1
 13142  0515  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13143                           
 13144                           ;MotorDrive.c: 988:                         motorM0StepCounter = 0;
 13145  0516  0020               	movlb	0	; select bank0
 13146  0517  01D5               	clrf	_motorM0StepCounter
 13147  0518  01D6               	clrf	_motorM0StepCounter+1
 13148  0519                     i1l4876:
 13149                           
 13150                           ;MotorDrive.c: 992:                 if (reqStopMotorBit & 0x01) {
 13151  0519  0021               	movlb	1	; select bank1
 13152  051A  1C58               	btfss	_reqStopMotorBit^(0+128),0
 13153  051B  2D27               	goto	i1l4882
 13154                           
 13155                           ;MotorDrive.c: 993:                     reqStopMotorBit &= (UB) (~0x01);
 13156  051C  30FE               	movlw	254
 13157  051D  00F7               	movwf	??_TMR2_Interrupt
 13158  051E  0877               	movf	??_TMR2_Interrupt,w
 13159  051F  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13160                           
 13161                           ;MotorDrive.c: 994:                     motorActiveBit &= (UB) (~0x01);
 13162  0520  30FE               	movlw	254
 13163  0521  00F7               	movwf	??_TMR2_Interrupt
 13164  0522  0877               	movf	??_TMR2_Interrupt,w
 13165  0523  0020               	movlb	0	; select bank0
 13166  0524  05DA               	andwf	_motorActiveBit,f
 13167                           
 13168                           ;MotorDrive.c: 995:                     reqAfterMotorStopFuncBit |= 0x01;
 13169  0525  0021               	movlb	1	; select bank1
 13170  0526  1459               	bsf	_reqAfterMotorStopFuncBit^(0+128),0
 13171  0527                     i1l4882:
 13172                           
 13173                           ;MotorDrive.c: 998:                 m0PulsePositionCt = m0PulsePositionCtWork;
 13174  0527  0866               	movf	_m0PulsePositionCtWork^(0+128),w
 13175  0528  00F7               	movwf	??_TMR2_Interrupt
 13176  0529  0877               	movf	??_TMR2_Interrupt,w
 13177  052A  00E8               	movwf	_m0PulsePositionCt^(0+128)
 13178                           
 13179                           ;MotorDrive.c: 999:                 m0PulseOutStep = m0PulseOutStepWork;
 13180  052B  0862               	movf	_m0PulseOutStepWork^(0+128),w
 13181  052C  00F7               	movwf	??_TMR2_Interrupt
 13182  052D  0877               	movf	??_TMR2_Interrupt,w
 13183  052E  00F3               	movwf	_m0PulseOutStep
 13184                           
 13185                           ;MotorDrive.c: 1000:                 vrsCountValue[ 0 ] = 0;
 13186  052F  01C0               	clrf	_vrsCountValue^(0+128)
 13187                           
 13188                           ;MotorDrive.c: 1002:             } else {
 13189  0530  2D3A               	goto	i1l4892
 13190  0531                     i1l4888:
 13191                           
 13192                           ;MotorDrive.c: 1004:                 if (m0PulseOutChangeFunc) {
 13193  0531  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13194  0532  044B               	iorwf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13195  0533  1903               	btfsc	3,2
 13196  0534  2D3A               	goto	i1l4892
 13197                           
 13198                           ;MotorDrive.c: 1005:                     m0PulseOutChangeFunc();
 13199  0535  084B               	movf	(_m0PulseOutChangeFunc+1)^(0+128),w
 13200  0536  008A               	movwf	10
 13201  0537  084A               	movf	_m0PulseOutChangeFunc^(0+128),w
 13202  0538  000A               	callw
 13203  0539  3183               	pagesel	$
 13204  053A                     i1l4892:
 13205                           
 13206                           ;MotorDrive.c: 1009:             if (m0PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13207  053A  3019               	movlw	25
 13208  053B  0273               	subwf	_m0PulseOutStep,w
 13209  053C  1803               	skipnc
 13210  053D  2D4A               	goto	i1l4896
 13211                           
 13212                           ;MotorDrive.c: 1010:                 m0PulseChangePosition = TblM0PulseChangePosition[ m
      +                          0PulseOutStep ];
 13213  053E  0873               	movf	_m0PulseOutStep,w
 13214  053F  3E35               	addlw	low (_TblM0PulseChangePosition| (0+32768))
 13215  0540  0084               	movwf	4
 13216  0541  3098               	movlw	high (_TblM0PulseChangePosition| (0+32768))
 13217  0542  1803               	skipnc
 13218  0543  3E01               	addlw	1
 13219  0544  0085               	movwf	5
 13220  0545  0800               	movf	0,w	;code access
 13221  0546  00F7               	movwf	??_TMR2_Interrupt
 13222  0547  0877               	movf	??_TMR2_Interrupt,w
 13223  0548  0021               	movlb	1	; select bank1
 13224  0549  2D4E               	goto	L18
 13225  054A                     i1l4896:	
 13226                           ;MotorDrive.c: 1011:             } else {
 13227                           
 13228                           
 13229                           ;MotorDrive.c: 1012:                 m0PulseChangePosition = TblM0PulseChangePositionLas
      +                          t;
 13230  054A  0021               	movlb	1	; select bank1
 13231  054B  086D               	movf	_TblM0PulseChangePositionLast^(0+128),w
 13232  054C  00F7               	movwf	??_TMR2_Interrupt
 13233  054D  0877               	movf	??_TMR2_Interrupt,w
 13234  054E                     L18:
 13235  054E  00E4               	movwf	_m0PulseChangePosition^(0+128)
 13236  054F                     i1l4898:
 13237                           
 13238                           ;MotorDrive.c: 1021:     if (motorActiveBit & 0x02) {
 13239  054F  0020               	movlb	0	; select bank0
 13240  0550  1CDA               	btfss	_motorActiveBit,1
 13241  0551  2DE9               	goto	i1l4952
 13242                           
 13243                           ;MotorDrive.c: 1027:         m1PulsePositionCt++;
 13244  0552  3001               	movlw	1
 13245  0553  00F7               	movwf	??_TMR2_Interrupt
 13246  0554  0877               	movf	??_TMR2_Interrupt,w
 13247  0555  0021               	movlb	1	; select bank1
 13248  0556  07E7               	addwf	_m1PulsePositionCt^(0+128),f
 13249                           
 13250                           ;MotorDrive.c: 1028:         if (m1PulsePositionCt == m1PulseChangePosition) {
 13251  0557  0867               	movf	_m1PulsePositionCt^(0+128),w
 13252  0558  0663               	xorwf	_m1PulseChangePosition^(0+128),w
 13253  0559  1D03               	skipz
 13254  055A  2DE9               	goto	i1l4952
 13255                           
 13256                           ;MotorDrive.c: 1031:             m1PulseOutStep++;
 13257  055B  3001               	movlw	1
 13258  055C  00F7               	movwf	??_TMR2_Interrupt
 13259  055D  0877               	movf	??_TMR2_Interrupt,w
 13260  055E  07F2               	addwf	_m1PulseOutStep,f
 13261                           
 13262                           ;MotorDrive.c: 1033:             if (m1PulseOutStep >= ID_PULSE_OUT_STEP_MAX) {
 13263  055F  301A               	movlw	26
 13264  0560  0272               	subwf	_m1PulseOutStep,w
 13265  0561  1C03               	skipc
 13266  0562  2DCB               	goto	i1l4942
 13267                           
 13268                           ;MotorDrive.c: 1035:                 if (0 == (actCorrectDriveBit & 0x02)) {
 13269  0563  0020               	movlb	0	; select bank0
 13270  0564  18D7               	btfsc	_actCorrectDriveBit,1
 13271  0565  2D91               	goto	i1l690
 13272                           
 13273                           ;MotorDrive.c: 1036:                     if ((reqSearchBasePosBit | reqCorrectBasePosBit
      +                           | reqCheckLoadPosBit) & 0x02) {
 13274  0566  0858               	movf	_reqCorrectBasePosBit,w
 13275  0567  0459               	iorwf	_reqSearchBasePosBit,w
 13276  0568  00F7               	movwf	??_TMR2_Interrupt
 13277  0569  0021               	movlb	1	; select bank1
 13278  056A  084E               	movf	_reqCheckLoadPosBit^(0+128),w
 13279  056B  0477               	iorwf	??_TMR2_Interrupt,w
 13280  056C  00F8               	movwf	??_TMR2_Interrupt+1
 13281  056D  1CF8               	btfss	??_TMR2_Interrupt+1,1
 13282  056E  2D91               	goto	i1l690
 13283                           
 13284                           ;MotorDrive.c: 1038:                         positionSearchCt[ 1 ]++;
 13285  056F  3001               	movlw	1
 13286  0570  07AA               	addwf	(_positionSearchCt^(0+128)+2),f
 13287  0571  3000               	movlw	0
 13288  0572  3DAB               	addwfc	((_positionSearchCt+1)^(0+128)+2),f
 13289                           
 13290                           ;MotorDrive.c: 1040:                         if ((0 == vrsCountValue[ 1 ])
 13291  0573  0841               	movf	(_vrsCountValue^(0+128)+1),w
 13292  0574  1903               	btfsc	3,2
 13293  0575  2D8A               	goto	i1l4918
 13294  0576  3058               	movlw	low ((_TblMaxSteps+2)| (0+32768))
 13295  0577  0084               	movwf	4
 13296  0578  3098               	movlw	high ((_TblMaxSteps+2)| (0+32768))
 13297  0579  0085               	movwf	5
 13298  057A  3F00               	moviw [0]fsr0
 13299  057B  00F7               	movwf	??_TMR2_Interrupt
 13300  057C  3F01               	moviw [1]fsr0
 13301  057D  00F8               	movwf	??_TMR2_Interrupt+1
 13302  057E  082B               	movf	((_positionSearchCt+1)^(0+128)+2),w
 13303  057F  3A80               	xorlw	128
 13304  0580  00F9               	movwf	??_TMR2_Interrupt+2
 13305  0581  0878               	movf	??_TMR2_Interrupt+1,w
 13306  0582  3A80               	xorlw	128
 13307  0583  0279               	subwf	??_TMR2_Interrupt+2,w
 13308  0584  1D03               	skipz
 13309  0585  2D88               	goto	u307_25
 13310  0586  0877               	movf	??_TMR2_Interrupt,w
 13311  0587  022A               	subwf	(_positionSearchCt^(0+128)+2),w
 13312  0588                     u307_25:
 13313  0588  1C03               	skipc
 13314  0589  2D91               	goto	i1l690
 13315  058A                     i1l4918:
 13316                           
 13317                           ;MotorDrive.c: 1041:                                 || (positionSearchCt[ 1 ] >= TblMax
      +                          Steps[ 1 ])) {;MotorDrive.c: 1042:                             motorActiveBit &= (UB) (~
      +                          0x02);
 13318  058A  30FD               	movlw	253
 13319  058B  00F7               	movwf	??_TMR2_Interrupt
 13320  058C  0877               	movf	??_TMR2_Interrupt,w
 13321  058D  0020               	movlb	0	; select bank0
 13322  058E  05DA               	andwf	_motorActiveBit,f
 13323                           
 13324                           ;MotorDrive.c: 1043:                             reqAfterDetectLoadFuncBit |= 0x02;
 13325  058F  0021               	movlb	1	; select bank1
 13326  0590  14D0               	bsf	_reqAfterDetectLoadFuncBit^(0+128),1
 13327  0591                     i1l690:	
 13328                           ;MotorDrive.c: 1049:                 }
 13329                           
 13330                           
 13331                           ;MotorDrive.c: 1051:                 if (motorM1StepCounter) {
 13332  0591  0020               	movlb	0	; select bank0
 13333  0592  0853               	movf	_motorM1StepCounter,w
 13334  0593  0454               	iorwf	_motorM1StepCounter+1,w
 13335  0594  1903               	btfsc	3,2
 13336  0595  2DB3               	goto	i1l4930
 13337                           
 13338                           ;MotorDrive.c: 1053:                     motorM1StepCounter--;
 13339  0596  30FF               	movlw	255
 13340  0597  07D3               	addwf	_motorM1StepCounter,f
 13341  0598  30FF               	movlw	255
 13342  0599  3DD4               	addwfc	_motorM1StepCounter+1,f
 13343                           
 13344                           ;MotorDrive.c: 1054:                     if (0 >= motorM1StepCounter) {
 13345  059A  0854               	movf	_motorM1StepCounter+1,w
 13346  059B  3A80               	xorlw	128
 13347  059C  00F7               	movwf	??_TMR2_Interrupt
 13348  059D  3080               	movlw	128
 13349  059E  0277               	subwf	??_TMR2_Interrupt,w
 13350  059F  1D03               	skipz
 13351  05A0  2DA3               	goto	u309_25
 13352  05A1  3001               	movlw	1
 13353  05A2  0253               	subwf	_motorM1StepCounter,w
 13354  05A3                     u309_25:
 13355  05A3  1803               	skipnc
 13356  05A4  2DB3               	goto	i1l4930
 13357                           
 13358                           ;MotorDrive.c: 1055:                         actCorrectDriveBit &= (UB) (~0x02);
 13359  05A5  30FD               	movlw	253
 13360  05A6  00F7               	movwf	??_TMR2_Interrupt
 13361  05A7  0877               	movf	??_TMR2_Interrupt,w
 13362  05A8  0020               	movlb	0	; select bank0
 13363  05A9  05D7               	andwf	_actCorrectDriveBit,f
 13364                           
 13365                           ;MotorDrive.c: 1056:                         motorActiveBit &= (UB) (~0x02);
 13366  05AA  30FD               	movlw	253
 13367  05AB  00F7               	movwf	??_TMR2_Interrupt
 13368  05AC  0877               	movf	??_TMR2_Interrupt,w
 13369  05AD  05DA               	andwf	_motorActiveBit,f
 13370                           
 13371                           ;MotorDrive.c: 1057:                         reqAfterMotorStopFuncBit |= 0x02;
 13372  05AE  0021               	movlb	1	; select bank1
 13373  05AF  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13374                           
 13375                           ;MotorDrive.c: 1058:                         motorM1StepCounter = 0;
 13376  05B0  0020               	movlb	0	; select bank0
 13377  05B1  01D3               	clrf	_motorM1StepCounter
 13378  05B2  01D4               	clrf	_motorM1StepCounter+1
 13379  05B3                     i1l4930:
 13380                           
 13381                           ;MotorDrive.c: 1062:                 if (reqStopMotorBit & 0x02) {
 13382  05B3  0021               	movlb	1	; select bank1
 13383  05B4  1CD8               	btfss	_reqStopMotorBit^(0+128),1
 13384  05B5  2DC1               	goto	i1l4936
 13385                           
 13386                           ;MotorDrive.c: 1063:                     reqStopMotorBit &= (UB) (~0x02);
 13387  05B6  30FD               	movlw	253
 13388  05B7  00F7               	movwf	??_TMR2_Interrupt
 13389  05B8  0877               	movf	??_TMR2_Interrupt,w
 13390  05B9  05D8               	andwf	_reqStopMotorBit^(0+128),f
 13391                           
 13392                           ;MotorDrive.c: 1064:                     motorActiveBit &= (UB) (~0x02);
 13393  05BA  30FD               	movlw	253
 13394  05BB  00F7               	movwf	??_TMR2_Interrupt
 13395  05BC  0877               	movf	??_TMR2_Interrupt,w
 13396  05BD  0020               	movlb	0	; select bank0
 13397  05BE  05DA               	andwf	_motorActiveBit,f
 13398                           
 13399                           ;MotorDrive.c: 1065:                     reqAfterMotorStopFuncBit |= 0x02;
 13400  05BF  0021               	movlb	1	; select bank1
 13401  05C0  14D9               	bsf	_reqAfterMotorStopFuncBit^(0+128),1
 13402  05C1                     i1l4936:
 13403                           
 13404                           ;MotorDrive.c: 1068:                 m1PulsePositionCt = m1PulsePositionCtWork;
 13405  05C1  0865               	movf	_m1PulsePositionCtWork^(0+128),w
 13406  05C2  00F7               	movwf	??_TMR2_Interrupt
 13407  05C3  0877               	movf	??_TMR2_Interrupt,w
 13408  05C4  00E7               	movwf	_m1PulsePositionCt^(0+128)
 13409                           
 13410                           ;MotorDrive.c: 1069:                 m1PulseOutStep = m1PulseOutStepWork;
 13411  05C5  0861               	movf	_m1PulseOutStepWork^(0+128),w
 13412  05C6  00F7               	movwf	??_TMR2_Interrupt
 13413  05C7  0877               	movf	??_TMR2_Interrupt,w
 13414  05C8  00F2               	movwf	_m1PulseOutStep
 13415                           
 13416                           ;MotorDrive.c: 1070:                 vrsCountValue[ 1 ] = 0;
 13417  05C9  01C1               	clrf	(_vrsCountValue^(0+128)+1)
 13418                           
 13419                           ;MotorDrive.c: 1072:             } else {
 13420  05CA  2DD4               	goto	i1l4946
 13421  05CB                     i1l4942:
 13422                           
 13423                           ;MotorDrive.c: 1074:                 if (m1PulseOutChangeFunc) {
 13424  05CB  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13425  05CC  0449               	iorwf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13426  05CD  1903               	btfsc	3,2
 13427  05CE  2DD4               	goto	i1l4946
 13428                           
 13429                           ;MotorDrive.c: 1075:                     m1PulseOutChangeFunc();
 13430  05CF  0849               	movf	(_m1PulseOutChangeFunc+1)^(0+128),w
 13431  05D0  008A               	movwf	10
 13432  05D1  0848               	movf	_m1PulseOutChangeFunc^(0+128),w
 13433  05D2  000A               	callw
 13434  05D3  3183               	pagesel	$
 13435  05D4                     i1l4946:
 13436                           
 13437                           ;MotorDrive.c: 1079:             if (m1PulseOutStep < (ID_PULSE_OUT_STEP_MAX - 1)) {
 13438  05D4  3019               	movlw	25
 13439  05D5  0272               	subwf	_m1PulseOutStep,w
 13440  05D6  1803               	skipnc
 13441  05D7  2DE4               	goto	i1l4950
 13442                           
 13443                           ;MotorDrive.c: 1080:                 m1PulseChangePosition = TblM1PulseChangePosition[ m
      +                          1PulseOutStep ];
 13444  05D8  0872               	movf	_m1PulseOutStep,w
 13445  05D9  3E1C               	addlw	low (_TblM1PulseChangePosition| (0+32768))
 13446  05DA  0084               	movwf	4
 13447  05DB  3098               	movlw	high (_TblM1PulseChangePosition| (0+32768))
 13448  05DC  1803               	skipnc
 13449  05DD  3E01               	addlw	1
 13450  05DE  0085               	movwf	5
 13451  05DF  0800               	movf	0,w	;code access
 13452  05E0  00F7               	movwf	??_TMR2_Interrupt
 13453  05E1  0877               	movf	??_TMR2_Interrupt,w
 13454  05E2  0021               	movlb	1	; select bank1
 13455  05E3  2DE8               	goto	L19
 13456  05E4                     i1l4950:	
 13457                           ;MotorDrive.c: 1081:             } else {
 13458                           
 13459                           
 13460                           ;MotorDrive.c: 1082:                 m1PulseChangePosition = TblM1PulseChangePositionLas
      +                          t;
 13461  05E4  0021               	movlb	1	; select bank1
 13462  05E5  086C               	movf	_TblM1PulseChangePositionLast^(0+128),w
 13463  05E6  00F7               	movwf	??_TMR2_Interrupt
 13464  05E7  0877               	movf	??_TMR2_Interrupt,w
 13465  05E8                     L19:
 13466  05E8  00E3               	movwf	_m1PulseChangePosition^(0+128)
 13467  05E9                     i1l4952:
 13468                           
 13469                           ;MotorDrive.c: 1095:     if (0 == motorActiveBit) {
 13470  05E9  0020               	movlb	0	; select bank0
 13471  05EA  085A               	movf	_motorActiveBit,w
 13472  05EB  1D03               	btfss	3,2
 13473  05EC  0008               	return
 13474                           
 13475                           ;MotorDrive.c: 1096:         TMR2_StopTimer();
 13476  05ED  3191  213B         	fcall	i1_TMR2_StopTimer
 13477  05EF  0008               	return
 13478  05F0                     __end_of_TMR2_Interrupt:
 13479                           
 13480                           	psect	text80
 13481  1138                     __ptext80:	
 13482 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13483 ;; Defined at:
 13484 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;		None
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;		None
 13489 ;; Return value:  Size  Location     Type
 13490 ;;                  1    wreg      void 
 13491 ;; Registers used:
 13492 ;;		None
 13493 ;; Tracked objects:
 13494 ;;		On entry : 1F/2
 13495 ;;		On exit  : 1F/2
 13496 ;;		Unchanged: 1F/0
 13497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13498 ;;      Params:         0       0       0       0       0       0       0       0
 13499 ;;      Locals:         0       0       0       0       0       0       0       0
 13500 ;;      Temps:          0       0       0       0       0       0       0       0
 13501 ;;      Totals:         0       0       0       0       0       0       0       0
 13502 ;;Total ram usage:        0 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; This function calls:
 13505 ;;		Nothing
 13506 ;; This function is called by:
 13507 ;;		_TMR2_Initialize
 13508 ;;		_TMR2_CallBack
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           
 13513                           ;psect for function _TMR2_DefaultInterruptHandler
 13514  1138                     _TMR2_DefaultInterruptHandler:
 13515                           
 13516                           ;incstack = 0
 13517                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 13518  1138  0008               	return
 13519  1139                     __end_of_TMR2_DefaultInterruptHandler:
 13520                           
 13521                           	psect	text81
 13522  0950                     __ptext81:	
 13523 ;; *************** function _TMR2_Interrupt_SPK *****************
 13524 ;; Defined at:
 13525 ;;		line 1108 in file "MotorDrive.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;		None
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg, status,2, status,0, pclath, cstack
 13534 ;; Tracked objects:
 13535 ;;		On entry : 1F/2
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13539 ;;      Params:         0       0       0       0       0       0       0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0       0
 13541 ;;      Temps:          1       0       0       0       0       0       0       0
 13542 ;;      Totals:         1       0       0       0       0       0       0       0
 13543 ;;Total ram usage:        1 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    1
 13546 ;; This function calls:
 13547 ;;		Absolute function
 13548 ;;		_SetDataTRISxWork_SPK_OPEN
 13549 ;;		_SetDataTRISxWork_SPK_SHORT
 13550 ;; This function is called by:
 13551 ;;		_SetMotorStartSPK
 13552 ;;		_TMR2_CallBack
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           
 13557                           ;psect for function _TMR2_Interrupt_SPK
 13558  0950                     _TMR2_Interrupt_SPK:
 13559                           
 13560                           ;MotorDrive.c: 1110:     if (spkOutTrisRequestFlug == 1) {
 13561                           
 13562                           ;incstack = 0
 13563                           ; Regs used in _TMR2_Interrupt_SPK: [wreg+status,2+status,0+pclath+cstack]
 13564  0950  0021               	movlb	1	; select bank1
 13565  0951  035B               	decf	_spkOutTrisRequestFlug^(0+128),w
 13566  0952  1D03               	btfss	3,2
 13567  0953  2988               	goto	i1l4982
 13568                           
 13569                           ;MotorDrive.c: 1111:         spkOutTrisRequestFlug = 0;
 13570  0954  01DB               	clrf	_spkOutTrisRequestFlug^(0+128)
 13571                           
 13572                           ;MotorDrive.c: 1115:         dataTRISA = TRISA;
 13573  0955  080C               	movf	12,w	;volatile
 13574  0956  00F6               	movwf	??_TMR2_Interrupt_SPK
 13575  0957  0876               	movf	??_TMR2_Interrupt_SPK,w
 13576  0958  0020               	movlb	0	; select bank0
 13577  0959  00E4               	movwf	_dataTRISA
 13578                           
 13579                           ;MotorDrive.c: 1116:         dataTRISB = TRISB;
 13580  095A  0021               	movlb	1	; select bank1
 13581  095B  080D               	movf	13,w	;volatile
 13582  095C  00F6               	movwf	??_TMR2_Interrupt_SPK
 13583  095D  0876               	movf	??_TMR2_Interrupt_SPK,w
 13584  095E  0020               	movlb	0	; select bank0
 13585  095F  00E3               	movwf	_dataTRISB
 13586                           
 13587                           ;MotorDrive.c: 1117:         dataTRISC = TRISC;
 13588  0960  0021               	movlb	1	; select bank1
 13589  0961  080E               	movf	14,w	;volatile
 13590  0962  00F6               	movwf	??_TMR2_Interrupt_SPK
 13591  0963  0876               	movf	??_TMR2_Interrupt_SPK,w
 13592  0964  0020               	movlb	0	; select bank0
 13593  0965  00E2               	movwf	_dataTRISC
 13594                           
 13595                           ;MotorDrive.c: 1122:         dataTRISB &= (UB) (~(0x00 | 0x00));
 13596  0966  30FD               	movlw	253
 13597  0967  00F6               	movwf	??_TMR2_Interrupt_SPK
 13598  0968  0876               	movf	??_TMR2_Interrupt_SPK,w
 13599  0969  05E4               	andwf	_dataTRISA,f
 13600                           
 13601                           ;MotorDrive.c: 1123:         dataTRISC &= (UB) (~(0x22 | 0x1C));
 13602  096A  30C1               	movlw	193
 13603  096B  00F6               	movwf	??_TMR2_Interrupt_SPK
 13604  096C  0876               	movf	??_TMR2_Interrupt_SPK,w
 13605  096D  05E2               	andwf	_dataTRISC,f
 13606                           
 13607                           ;MotorDrive.c: 1126:         dataTRISA |= (UB) (dataTRISAWork_M0 | dataTRISAWork_M1);
 13608  096E  0861               	movf	_dataTRISAWork_M0,w
 13609  096F  045E               	iorwf	_dataTRISAWork_M1,w
 13610  0970  00F6               	movwf	??_TMR2_Interrupt_SPK
 13611  0971  0876               	movf	??_TMR2_Interrupt_SPK,w
 13612  0972  04E4               	iorwf	_dataTRISA,f
 13613                           
 13614                           ;MotorDrive.c: 1127:         dataTRISB |= (UB) (dataTRISBWork_M0 | dataTRISBWork_M1);
 13615  0973  0860               	movf	_dataTRISBWork_M0,w
 13616  0974  045D               	iorwf	_dataTRISBWork_M1,w
 13617  0975  00F6               	movwf	??_TMR2_Interrupt_SPK
 13618  0976  0876               	movf	??_TMR2_Interrupt_SPK,w
 13619  0977  04E3               	iorwf	_dataTRISB,f
 13620                           
 13621                           ;MotorDrive.c: 1128:         dataTRISC |= (UB) (dataTRISCWork_M0 | dataTRISCWork_M1);
 13622  0978  085F               	movf	_dataTRISCWork_M0,w
 13623  0979  045C               	iorwf	_dataTRISCWork_M1,w
 13624  097A  00F6               	movwf	??_TMR2_Interrupt_SPK
 13625  097B  0876               	movf	??_TMR2_Interrupt_SPK,w
 13626  097C  04E2               	iorwf	_dataTRISC,f
 13627                           
 13628                           ;MotorDrive.c: 1131:         TRISA = dataTRISA;
 13629  097D  0864               	movf	_dataTRISA,w
 13630  097E  0021               	movlb	1	; select bank1
 13631  097F  008C               	movwf	12	;volatile
 13632                           
 13633                           ;MotorDrive.c: 1132:         TRISB = dataTRISB;
 13634  0980  0020               	movlb	0	; select bank0
 13635  0981  0863               	movf	_dataTRISB,w
 13636  0982  0021               	movlb	1	; select bank1
 13637  0983  008D               	movwf	13	;volatile
 13638                           
 13639                           ;MotorDrive.c: 1133:         TRISC = dataTRISC;
 13640  0984  0020               	movlb	0	; select bank0
 13641  0985  0862               	movf	_dataTRISC,w
 13642  0986  0021               	movlb	1	; select bank1
 13643  0987  008E               	movwf	14	;volatile
 13644  0988                     i1l4982:
 13645                           
 13646                           ;MotorDrive.c: 1175:     spkPositionCt++;
 13647  0988  3001               	movlw	1
 13648  0989  00F6               	movwf	??_TMR2_Interrupt_SPK
 13649  098A  0876               	movf	??_TMR2_Interrupt_SPK,w
 13650  098B  07DD               	addwf	_spkPositionCt^(0+128),f
 13651                           
 13652                           ;MotorDrive.c: 1177:     if (spkPositionCt == 4) {
 13653  098C  3004               	movlw	4
 13654  098D  065D               	xorwf	_spkPositionCt^(0+128),w
 13655  098E  1903               	btfsc	3,2
 13656                           
 13657                           ;MotorDrive.c: 1179:         spkPositionCt = 0;
 13658  098F  01DD               	clrf	_spkPositionCt^(0+128)
 13659                           
 13660                           ;MotorDrive.c: 1182:     if (spkPositionCt == spkChangePosition) {
 13661  0990  085D               	movf	_spkPositionCt^(0+128),w
 13662  0991  065C               	xorwf	_spkChangePosition^(0+128),w
 13663  0992  1D03               	skipz
 13664  0993  0008               	return
 13665                           
 13666                           ;MotorDrive.c: 1185:         if (spkOutChangeFunc) {
 13667  0994  0844               	movf	_spkOutChangeFunc^(0+128),w
 13668  0995  0445               	iorwf	(_spkOutChangeFunc+1)^(0+128),w
 13669  0996  1903               	btfsc	3,2
 13670  0997  0008               	return
 13671                           
 13672                           ;MotorDrive.c: 1186:             spkOutChangeFunc();
 13673  0998  0845               	movf	(_spkOutChangeFunc+1)^(0+128),w
 13674  0999  008A               	movwf	10
 13675  099A  0844               	movf	_spkOutChangeFunc^(0+128),w
 13676  099B  000A               	callw
 13677  099C  3189               	pagesel	$
 13678  099D  0008               	return
 13679  099E                     __end_of_TMR2_Interrupt_SPK:
 13680                           
 13681                           	psect	text82
 13682  0898                     __ptext82:	
 13683 ;; *************** function _SetDataTRISxWork_SPK_OPEN *****************
 13684 ;; Defined at:
 13685 ;;		line 2870 in file "MotorDrive.c"
 13686 ;; Parameters:    Size  Location     Type
 13687 ;;		None
 13688 ;; Auto vars:     Size  Location     Type
 13689 ;;		None
 13690 ;; Return value:  Size  Location     Type
 13691 ;;                  1    wreg      void 
 13692 ;; Registers used:
 13693 ;;		wreg, status,2, status,0
 13694 ;; Tracked objects:
 13695 ;;		On entry : 1F/1
 13696 ;;		On exit  : 1F/1
 13697 ;;		Unchanged: 0/0
 13698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13699 ;;      Params:         0       0       0       0       0       0       0       0
 13700 ;;      Locals:         0       0       0       0       0       0       0       0
 13701 ;;      Temps:          1       0       0       0       0       0       0       0
 13702 ;;      Totals:         1       0       0       0       0       0       0       0
 13703 ;;Total ram usage:        1 bytes
 13704 ;; Hardware stack levels used:    1
 13705 ;; This function calls:
 13706 ;;		Nothing
 13707 ;; This function is called by:
 13708 ;;		_SetDataTRISxWork_SPK_SHORT
 13709 ;;		_TMR2_Interrupt_SPK
 13710 ;; This function uses a non-reentrant model
 13711 ;;
 13712                           
 13713                           
 13714                           ;psect for function _SetDataTRISxWork_SPK_OPEN
 13715  0898                     _SetDataTRISxWork_SPK_OPEN:
 13716                           
 13717                           ;MotorDrive.c: 2872:     if (detectSpkTurnBit == 0) {
 13718                           
 13719                           ;incstack = 0
 13720                           ; Regs used in _SetDataTRISxWork_SPK_OPEN: [wreg+status,2+status,0]
 13721  0898  085E               	movf	_detectSpkTurnBit^(0+128),w
 13722  0899  1D03               	btfss	3,2
 13723  089A  28AD               	goto	i1l4340
 13724                           
 13725                           ;MotorDrive.c: 2873:         dataTRISAWork_M0 = 0x00;
 13726  089B  0020               	movlb	0	; select bank0
 13727  089C  01E1               	clrf	_dataTRISAWork_M0
 13728                           
 13729                           ;MotorDrive.c: 2874:         dataTRISBWork_M0 = 0x00;
 13730  089D  01E0               	clrf	_dataTRISBWork_M0
 13731                           
 13732                           ;MotorDrive.c: 2875:         dataTRISCWork_M0 = 0x02;
 13733  089E  3002               	movlw	2
 13734  089F  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 13735  08A0  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 13736  08A1  00DF               	movwf	_dataTRISCWork_M0
 13737                           
 13738                           ;MotorDrive.c: 2877:         dataTRISAWork_M1 = 0x00;
 13739  08A2  01DE               	clrf	_dataTRISAWork_M1
 13740                           
 13741                           ;MotorDrive.c: 2878:         dataTRISBWork_M1 = 0x00;
 13742  08A3  01DD               	clrf	_dataTRISBWork_M1
 13743                           
 13744                           ;MotorDrive.c: 2879:         dataTRISCWork_M1 = 0x08;
 13745  08A4  3008               	movlw	8
 13746  08A5  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 13747  08A6  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 13748  08A7  00DC               	movwf	_dataTRISCWork_M1
 13749                           
 13750                           ;MotorDrive.c: 2881:         CM1CON1 = (0x90 | 0x01);
 13751  08A8  3091               	movlw	145
 13752  08A9  0022               	movlb	2	; select bank2
 13753  08AA  0092               	movwf	18	;volatile
 13754                           
 13755                           ;MotorDrive.c: 2882:         CM2CON1 = (0x90 | 0x03);
 13756  08AB  3093               	movlw	147
 13757  08AC  28BE               	goto	L20
 13758  08AD                     i1l4340:	
 13759                           ;MotorDrive.c: 2884:     } else {
 13760                           
 13761                           
 13762                           ;MotorDrive.c: 2885:         dataTRISAWork_M0 = 0x02;
 13763  08AD  3002               	movlw	2
 13764  08AE  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 13765  08AF  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 13766  08B0  0020               	movlb	0	; select bank0
 13767  08B1  00E1               	movwf	_dataTRISAWork_M0
 13768                           
 13769                           ;MotorDrive.c: 2886:         dataTRISBWork_M0 = 0x00;
 13770  08B2  01E0               	clrf	_dataTRISBWork_M0
 13771                           
 13772                           ;MotorDrive.c: 2887:         dataTRISCWork_M0 = 0x00;
 13773  08B3  01DF               	clrf	_dataTRISCWork_M0
 13774                           
 13775                           ;MotorDrive.c: 2889:         dataTRISAWork_M1 = 0x00;
 13776  08B4  01DE               	clrf	_dataTRISAWork_M1
 13777                           
 13778                           ;MotorDrive.c: 2890:         dataTRISBWork_M1 = 0x00;
 13779  08B5  01DD               	clrf	_dataTRISBWork_M1
 13780                           
 13781                           ;MotorDrive.c: 2891:         dataTRISCWork_M1 = 0x04;
 13782  08B6  3004               	movlw	4
 13783  08B7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 13784  08B8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 13785  08B9  00DC               	movwf	_dataTRISCWork_M1
 13786                           
 13787                           ;MotorDrive.c: 2893:         CM1CON1 = (0x90 | 0x00);
 13788  08BA  3090               	movlw	144
 13789  08BB  0022               	movlb	2	; select bank2
 13790  08BC  0092               	movwf	18	;volatile
 13791                           
 13792                           ;MotorDrive.c: 2894:         CM2CON1 = (0x90 | 0x02);
 13793  08BD  3092               	movlw	146
 13794  08BE                     L20:
 13795  08BE  0094               	movwf	20	;volatile
 13796                           
 13797                           ;MotorDrive.c: 2897:     spkOutChangeFunc = SetDataTRISxWork_SPK_SHORT;
 13798                           
 13799                           ;MotorDrive.c: 2895:     }
 13800  08BF  30D4               	movlw	low _SetDataTRISxWork_SPK_SHORT
 13801  08C0  0021               	movlb	1	; select bank1
 13802  08C1  00C4               	movwf	_spkOutChangeFunc^(0+128)
 13803  08C2  3014               	movlw	high _SetDataTRISxWork_SPK_SHORT
 13804  08C3  00C5               	movwf	(_spkOutChangeFunc^(0+128)+1)
 13805                           
 13806                           ;MotorDrive.c: 2898:     spkChangePosition = 1;
 13807  08C4  01DC               	clrf	_spkChangePosition^(0+128)
 13808  08C5  0ADC               	incf	_spkChangePosition^(0+128),f
 13809                           
 13810                           ;MotorDrive.c: 2899:     detectSpkTurnBit ^= 0x01;
 13811  08C6  3001               	movlw	1
 13812  08C7  00F5               	movwf	??_SetDataTRISxWork_SPK_OPEN
 13813  08C8  0875               	movf	??_SetDataTRISxWork_SPK_OPEN,w
 13814  08C9  06DE               	xorwf	_detectSpkTurnBit^(0+128),f
 13815                           
 13816                           ;MotorDrive.c: 2903:     if (excitatingEnableBit & (0x01 | 0x02)) {
 13817  08CA  0860               	movf	_excitatingEnableBit^(0+128),w
 13818  08CB  3903               	andlw	3
 13819  08CC  1903               	btfsc	3,2
 13820  08CD  28D1               	goto	i1l4358
 13821                           
 13822                           ;MotorDrive.c: 2904:         spkOutTrisRequestFlug = 1;
 13823  08CE  01DB               	clrf	_spkOutTrisRequestFlug^(0+128)
 13824  08CF  0ADB               	incf	_spkOutTrisRequestFlug^(0+128),f
 13825                           
 13826                           ;MotorDrive.c: 2905:     } else {
 13827  08D0  0008               	return
 13828  08D1                     i1l4358:
 13829                           
 13830                           ;MotorDrive.c: 2906:         spkOutTrisRequestFlug = 0;
 13831  08D1  01DB               	clrf	_spkOutTrisRequestFlug^(0+128)
 13832  08D2  0008               	return
 13833  08D3                     __end_of_SetDataTRISxWork_SPK_OPEN:
 13834                           
 13835                           	psect	text83
 13836  14D4                     __ptext83:	
 13837 ;; *************** function _SetDataTRISxWork_SPK_SHORT *****************
 13838 ;; Defined at:
 13839 ;;		line 2923 in file "MotorDrive.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;		None
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;		None
 13844 ;; Return value:  Size  Location     Type
 13845 ;;                  1    wreg      void 
 13846 ;; Registers used:
 13847 ;;		wreg, status,2, status,0
 13848 ;; Tracked objects:
 13849 ;;		On entry : 1F/1
 13850 ;;		On exit  : 1F/1
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13853 ;;      Params:         0       0       0       0       0       0       0       0
 13854 ;;      Locals:         0       0       0       0       0       0       0       0
 13855 ;;      Temps:          1       0       0       0       0       0       0       0
 13856 ;;      Totals:         1       0       0       0       0       0       0       0
 13857 ;;Total ram usage:        1 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; This function calls:
 13860 ;;		Nothing
 13861 ;; This function is called by:
 13862 ;;		_SetMotorStartSPK
 13863 ;;		_SetDataTRISxWork_SPK_OPEN
 13864 ;;		_TMR2_Interrupt_SPK
 13865 ;; This function uses a non-reentrant model
 13866 ;;
 13867                           
 13868                           
 13869                           ;psect for function _SetDataTRISxWork_SPK_SHORT
 13870  14D4                     _SetDataTRISxWork_SPK_SHORT:
 13871                           
 13872                           ;MotorDrive.c: 2925:     dataTRISAWork_M0 = (0x00 | 0x00);
 13873                           
 13874                           ;incstack = 0
 13875                           ; Regs used in _SetDataTRISxWork_SPK_SHORT: [wreg+status,2+status,0]
 13876  14D4  0020               	movlb	0	; select bank0
 13877  14D5  01E1               	clrf	_dataTRISAWork_M0
 13878                           
 13879                           ;MotorDrive.c: 2926:     dataTRISBWork_M0 = (0x00 | 0x00);
 13880  14D6  01E0               	clrf	_dataTRISBWork_M0
 13881                           
 13882                           ;MotorDrive.c: 2927:     dataTRISCWork_M0 = (0x00 | 0x00);
 13883  14D7  01DF               	clrf	_dataTRISCWork_M0
 13884                           
 13885                           ;MotorDrive.c: 2929:     dataTRISAWork_M1 = (0x00 | 0x00);
 13886  14D8  01DE               	clrf	_dataTRISAWork_M1
 13887                           
 13888                           ;MotorDrive.c: 2930:     dataTRISBWork_M1 = (0x00 | 0x00);
 13889  14D9  01DD               	clrf	_dataTRISBWork_M1
 13890                           
 13891                           ;MotorDrive.c: 2931:     dataTRISCWork_M1 = (0x00 | 0x00);
 13892  14DA  01DC               	clrf	_dataTRISCWork_M1
 13893                           
 13894                           ;MotorDrive.c: 2933:     spkOutChangeFunc = SetDataTRISxWork_SPK_OPEN;
 13895  14DB  3098               	movlw	low _SetDataTRISxWork_SPK_OPEN
 13896  14DC  0021               	movlb	1	; select bank1
 13897  14DD  00C4               	movwf	_spkOutChangeFunc^(0+128)
 13898  14DE  3008               	movlw	high _SetDataTRISxWork_SPK_OPEN
 13899  14DF  00C5               	movwf	(_spkOutChangeFunc^(0+128)+1)
 13900                           
 13901                           ;MotorDrive.c: 2934:     spkChangePosition = 0;
 13902  14E0  01DC               	clrf	_spkChangePosition^(0+128)
 13903                           
 13904                           ;MotorDrive.c: 2936:     spkReqVrsCheckBit |= (0x01 | 0x02);
 13905  14E1  3003               	movlw	3
 13906  14E2  00F5               	movwf	??_SetDataTRISxWork_SPK_SHORT
 13907  14E3  0875               	movf	??_SetDataTRISxWork_SPK_SHORT,w
 13908  14E4  04DA               	iorwf	_spkReqVrsCheckBit^(0+128),f
 13909                           
 13910                           ;MotorDrive.c: 2939:     spkOutTrisRequestFlug = 1;
 13911  14E5  01DB               	clrf	_spkOutTrisRequestFlug^(0+128)
 13912  14E6  0ADB               	incf	_spkOutTrisRequestFlug^(0+128),f
 13913  14E7  0008               	return
 13914  14E8                     __end_of_SetDataTRISxWork_SPK_SHORT:
 13915                           
 13916                           	psect	text84
 13917  113B                     __ptext84:	
 13918 ;; *************** function i1_TMR2_StopTimer *****************
 13919 ;; Defined at:
 13920 ;;		line 93 in file "mcc_generated_files/tmr2.c"
 13921 ;; Parameters:    Size  Location     Type
 13922 ;;		None
 13923 ;; Auto vars:     Size  Location     Type
 13924 ;;		None
 13925 ;; Return value:  Size  Location     Type
 13926 ;;                  1    wreg      void 
 13927 ;; Registers used:
 13928 ;;		None
 13929 ;; Tracked objects:
 13930 ;;		On entry : 1F/0
 13931 ;;		On exit  : 1F/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13934 ;;      Params:         0       0       0       0       0       0       0       0
 13935 ;;      Locals:         0       0       0       0       0       0       0       0
 13936 ;;      Temps:          0       0       0       0       0       0       0       0
 13937 ;;      Totals:         0       0       0       0       0       0       0       0
 13938 ;;Total ram usage:        0 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; This function calls:
 13941 ;;		Nothing
 13942 ;; This function is called by:
 13943 ;;		_TMR2_Interrupt
 13944 ;; This function uses a non-reentrant model
 13945 ;;
 13946                           
 13947                           
 13948                           ;psect for function i1_TMR2_StopTimer
 13949  113B                     i1_TMR2_StopTimer:
 13950                           
 13951                           ;mcc_generated_files/tmr2.c: 96:     T2CONbits.TMR2ON = 0;
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in i1_TMR2_StopTimer: []
 13955  113B  111C               	bcf	28,2	;volatile
 13956  113C  0008               	return
 13957  113D                     __end_ofi1_TMR2_StopTimer:
 13958                           
 13959                           	psect	text85
 13960  1602                     __ptext85:	
 13961 ;; *************** function _VrsCheck *****************
 13962 ;; Defined at:
 13963 ;;		line 2704 in file "MotorDrive.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  motor_no        1    wreg     unsigned char 
 13966 ;; Auto vars:     Size  Location     Type
 13967 ;;  motor_no        1    1[COMMON] unsigned char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;                  1    wreg      void 
 13970 ;; Registers used:
 13971 ;;		wreg, status,2, status,0
 13972 ;; Tracked objects:
 13973 ;;		On entry : 1F/1
 13974 ;;		On exit  : 1F/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13977 ;;      Params:         0       0       0       0       0       0       0       0
 13978 ;;      Locals:         1       0       0       0       0       0       0       0
 13979 ;;      Temps:          1       0       0       0       0       0       0       0
 13980 ;;      Totals:         2       0       0       0       0       0       0       0
 13981 ;;Total ram usage:        2 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; This function calls:
 13984 ;;		Nothing
 13985 ;; This function is called by:
 13986 ;;		_TMR2_Interrupt
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           
 13991                           ;psect for function _VrsCheck
 13992  1602                     _VrsCheck:
 13993                           
 13994                           ;incstack = 0
 13995                           ; Regs used in _VrsCheck: [wreg+status,2+status,0]
 13996                           ;VrsCheck@motor_no stored from wreg
 13997  1602  00F6               	movwf	VrsCheck@motor_no
 13998                           
 13999                           ;MotorDrive.c: 2704: void VrsCheck(UB motor_no);MotorDrive.c: 2705: {;MotorDrive.c: 2706
      +                          :     if (motor_no == 0) {
 14000  1603  0876               	movf	VrsCheck@motor_no,w
 14001  1604  1D03               	btfss	3,2
 14002  1605  2E11               	goto	i1l1028
 14003                           
 14004                           ;MotorDrive.c: 2707:         if (PIR2bits.C1IF) {
 14005  1606  0020               	movlb	0	; select bank0
 14006  1607  1E92               	btfss	18,5	;volatile
 14007  1608  2E0E               	goto	i1l4118
 14008                           
 14009                           ;MotorDrive.c: 2708:             vrsCountValue[ 0 ]++;
 14010  1609  3001               	movlw	1
 14011  160A  00F5               	movwf	??_VrsCheck
 14012  160B  0875               	movf	??_VrsCheck,w
 14013  160C  0021               	movlb	1	; select bank1
 14014  160D  07C0               	addwf	_vrsCountValue^(0+128),f
 14015  160E                     i1l4118:
 14016                           
 14017                           ;MotorDrive.c: 2711:         PIR2bits.C1IF = 0;
 14018  160E  0020               	movlb	0	; select bank0
 14019  160F  1292               	bcf	18,5	;volatile
 14020                           
 14021                           ;MotorDrive.c: 2712:     } else {
 14022  1610  0008               	return
 14023  1611                     i1l1028:
 14024                           
 14025                           ;MotorDrive.c: 2713:         if (PIR2bits.C2IF) {
 14026  1611  0020               	movlb	0	; select bank0
 14027  1612  1F12               	btfss	18,6	;volatile
 14028  1613  2E19               	goto	i1l4122
 14029                           
 14030                           ;MotorDrive.c: 2714:             vrsCountValue [ 1 ]++;
 14031  1614  3001               	movlw	1
 14032  1615  00F5               	movwf	??_VrsCheck
 14033  1616  0875               	movf	??_VrsCheck,w
 14034  1617  0021               	movlb	1	; select bank1
 14035  1618  07C1               	addwf	(_vrsCountValue^(0+128)+1),f
 14036  1619                     i1l4122:
 14037                           
 14038                           ;MotorDrive.c: 2716:         PIR2bits.C2IF = 0;
 14039  1619  0020               	movlb	0	; select bank0
 14040  161A  1312               	bcf	18,6	;volatile
 14041  161B  0008               	return
 14042  161C                     __end_of_VrsCheck:
 14043                           
 14044                           	psect	text86
 14045  159F                     __ptext86:	
 14046 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_SHORT *****************
 14047 ;; Defined at:
 14048 ;;		line 3572 in file "MotorDrive.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;		None
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;		None
 14053 ;; Return value:  Size  Location     Type
 14054 ;;                  1    wreg      void 
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0
 14057 ;; Tracked objects:
 14058 ;;		On entry : 1F/1
 14059 ;;		On exit  : 1F/1
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14062 ;;      Params:         0       0       0       0       0       0       0       0
 14063 ;;      Locals:         0       0       0       0       0       0       0       0
 14064 ;;      Temps:          0       0       0       0       0       0       0       0
 14065 ;;      Totals:         0       0       0       0       0       0       0       0
 14066 ;;Total ram usage:        0 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; This function calls:
 14069 ;;		Nothing
 14070 ;; This function is called by:
 14071 ;;		_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14072 ;;		_TMR2_Interrupt
 14073 ;; This function uses a non-reentrant model
 14074 ;;
 14075                           
 14076                           
 14077                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14078  159F                     _SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14079                           
 14080                           ;MotorDrive.c: 3574:     dataTRISAWork_M1 = 0x00;
 14081                           
 14082                           ;incstack = 0
 14083                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_SHORT: [wreg+status,2+status,0]
 14084  159F  0020               	movlb	0	; select bank0
 14085  15A0  01DE               	clrf	_dataTRISAWork_M1
 14086                           
 14087                           ;MotorDrive.c: 3575:     dataTRISBWork_M1 = 0x00;
 14088  15A1  01DD               	clrf	_dataTRISBWork_M1
 14089                           
 14090                           ;MotorDrive.c: 3576:     dataTRISCWork_M1 = 0x00;
 14091  15A2  01DC               	clrf	_dataTRISCWork_M1
 14092                           
 14093                           ;MotorDrive.c: 3578:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14094  15A3  3016               	movlw	22
 14095  15A4  0672               	xorwf	_m1PulseOutStep,w
 14096  15A5  1D03               	btfss	3,2
 14097  15A6  2DAE               	goto	i1l4732
 14098                           
 14099                           ;MotorDrive.c: 3579:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 14100  15A7  30ED               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14101  15A8  0021               	movlb	1	; select bank1
 14102  15A9  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14103  15AA  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14104  15AB  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14105                           
 14106                           ;MotorDrive.c: 3580:         reqComparatorOffBit |= 0x02;
 14107  15AC  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14108                           
 14109                           ;MotorDrive.c: 3581:     } else {
 14110  15AD  2DB3               	goto	i1l4734
 14111  15AE                     i1l4732:
 14112                           
 14113                           ;MotorDrive.c: 3582:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14114  15AE  305D               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14115  15AF  0021               	movlb	1	; select bank1
 14116  15B0  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14117  15B1  3013               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14118  15B2  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14119  15B3                     i1l4734:
 14120                           
 14121                           ;MotorDrive.c: 3585:     OutTrisRequestFlug = 1;
 14122  15B3  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14123  15B4  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14124                           
 14125                           ;MotorDrive.c: 3586:     reqVrsCheckBit |= 0x02;
 14126  15B5  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14127  15B6  0008               	return
 14128  15B7                     __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT:
 14129                           
 14130                           	psect	text87
 14131  135D                     __ptext87:	
 14132 ;; *************** function _SetDataTRISxWork_M1_SPK_POL1_OPEN *****************
 14133 ;; Defined at:
 14134 ;;		line 3560 in file "MotorDrive.c"
 14135 ;; Parameters:    Size  Location     Type
 14136 ;;		None
 14137 ;; Auto vars:     Size  Location     Type
 14138 ;;		None
 14139 ;; Return value:  Size  Location     Type
 14140 ;;                  1    wreg      void 
 14141 ;; Registers used:
 14142 ;;		wreg, status,2
 14143 ;; Tracked objects:
 14144 ;;		On entry : 1F/1
 14145 ;;		On exit  : 1F/1
 14146 ;;		Unchanged: 0/0
 14147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14148 ;;      Params:         0       0       0       0       0       0       0       0
 14149 ;;      Locals:         0       0       0       0       0       0       0       0
 14150 ;;      Temps:          1       0       0       0       0       0       0       0
 14151 ;;      Totals:         1       0       0       0       0       0       0       0
 14152 ;;Total ram usage:        1 bytes
 14153 ;; Hardware stack levels used:    1
 14154 ;; This function calls:
 14155 ;;		Nothing
 14156 ;; This function is called by:
 14157 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14158 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 14159 ;;		_TMR2_Interrupt
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           
 14164                           ;psect for function _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14165  135D                     _SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14166                           
 14167                           ;MotorDrive.c: 3562:     dataTRISAWork_M1 = 0x00;
 14168                           
 14169                           ;incstack = 0
 14170                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL1_OPEN: [wreg+status,2]
 14171  135D  0020               	movlb	0	; select bank0
 14172  135E  01DE               	clrf	_dataTRISAWork_M1
 14173                           
 14174                           ;MotorDrive.c: 3563:     dataTRISBWork_M1 = 0x00;
 14175  135F  01DD               	clrf	_dataTRISBWork_M1
 14176                           
 14177                           ;MotorDrive.c: 3564:     dataTRISCWork_M1 = 0x04;
 14178  1360  3004               	movlw	4
 14179  1361  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN
 14180  1362  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL1_OPEN,w
 14181  1363  00DC               	movwf	_dataTRISCWork_M1
 14182                           
 14183                           ;MotorDrive.c: 3566:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_SHORT;
 14184  1364  309F               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14185  1365  0021               	movlb	1	; select bank1
 14186  1366  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14187  1367  3015               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_SHORT
 14188  1368  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14189                           
 14190                           ;MotorDrive.c: 3567:     OutTrisRequestFlug = 1;
 14191  1369  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14192  136A  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14193  136B  0008               	return
 14194  136C                     __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN:
 14195                           
 14196                           	psect	text88
 14197  13F5                     __ptext88:	
 14198 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *****************
 14199 ;; Defined at:
 14200 ;;		line 3541 in file "MotorDrive.c"
 14201 ;; Parameters:    Size  Location     Type
 14202 ;;		None
 14203 ;; Auto vars:     Size  Location     Type
 14204 ;;		None
 14205 ;; Return value:  Size  Location     Type
 14206 ;;                  1    wreg      void 
 14207 ;; Registers used:
 14208 ;;		wreg, status,2
 14209 ;; Tracked objects:
 14210 ;;		On entry : 1F/1
 14211 ;;		On exit  : 1F/1
 14212 ;;		Unchanged: 0/0
 14213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14214 ;;      Params:         0       0       0       0       0       0       0       0
 14215 ;;      Locals:         0       0       0       0       0       0       0       0
 14216 ;;      Temps:          0       0       0       0       0       0       0       0
 14217 ;;      Totals:         0       0       0       0       0       0       0       0
 14218 ;;Total ram usage:        0 bytes
 14219 ;; Hardware stack levels used:    1
 14220 ;; This function calls:
 14221 ;;		Nothing
 14222 ;; This function is called by:
 14223 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 14224 ;;		_TMR2_Interrupt
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           
 14229                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 14230  13F5                     _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14231                           
 14232                           ;MotorDrive.c: 3543:     pulseOutLATAWork_M1 = 0;
 14233                           
 14234                           ;incstack = 0
 14235                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF: [wreg+status,2]
 14236  13F5  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14237                           
 14238                           ;MotorDrive.c: 3544:     pulseOutLATBWork_M1 = 0;
 14239  13F6  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14240                           
 14241                           ;MotorDrive.c: 3545:     pulseOutLATCWork_M1 = 0;
 14242  13F7  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14243                           
 14244                           ;MotorDrive.c: 3548:     dataTRISAWork_M1 = 0x00;
 14245  13F8  0020               	movlb	0	; select bank0
 14246  13F9  01DE               	clrf	_dataTRISAWork_M1
 14247                           
 14248                           ;MotorDrive.c: 3549:     dataTRISBWork_M1 = 0x00;
 14249  13FA  01DD               	clrf	_dataTRISBWork_M1
 14250                           
 14251                           ;MotorDrive.c: 3550:     dataTRISCWork_M1 = 0x00;
 14252  13FB  01DC               	clrf	_dataTRISCWork_M1
 14253                           
 14254                           ;MotorDrive.c: 3552:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL1_OPEN;
 14255  13FC  305D               	movlw	low _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14256  13FD  0021               	movlb	1	; select bank1
 14257  13FE  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14258  13FF  3013               	movlw	high _SetDataTRISxWork_M1_SPK_POL1_OPEN
 14259  1400  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14260                           
 14261                           ;MotorDrive.c: 3553:     OutRequestFlug = 1;
 14262  1401  01D6               	clrf	_OutRequestFlug^(0+128)
 14263  1402  0AD6               	incf	_OutRequestFlug^(0+128),f
 14264                           
 14265                           ;MotorDrive.c: 3554:     OutTrisRequestFlug = 1;
 14266  1403  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14267  1404  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14268                           
 14269                           ;MotorDrive.c: 3555:     reqComparatorOnBit |= 0x02;
 14270  1405  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 14271  1406  0008               	return
 14272  1407                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF:
 14273                           
 14274                           	psect	text89
 14275  1587                     __ptext89:	
 14276 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_SHORT *****************
 14277 ;; Defined at:
 14278 ;;		line 3509 in file "MotorDrive.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;		None
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;		None
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  1    wreg      void 
 14285 ;; Registers used:
 14286 ;;		wreg, status,2, status,0
 14287 ;; Tracked objects:
 14288 ;;		On entry : 1F/1
 14289 ;;		On exit  : 1F/1
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14292 ;;      Params:         0       0       0       0       0       0       0       0
 14293 ;;      Locals:         0       0       0       0       0       0       0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0       0
 14295 ;;      Totals:         0       0       0       0       0       0       0       0
 14296 ;;Total ram usage:        0 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; This function calls:
 14299 ;;		Nothing
 14300 ;; This function is called by:
 14301 ;;		_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14302 ;;		_TMR2_Interrupt
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           
 14307                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14308  1587                     _SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14309                           
 14310                           ;MotorDrive.c: 3511:     dataTRISAWork_M1 = 0x00;
 14311                           
 14312                           ;incstack = 0
 14313                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_SHORT: [wreg+status,2+status,0]
 14314  1587  0020               	movlb	0	; select bank0
 14315  1588  01DE               	clrf	_dataTRISAWork_M1
 14316                           
 14317                           ;MotorDrive.c: 3512:     dataTRISBWork_M1 = 0x00;
 14318  1589  01DD               	clrf	_dataTRISBWork_M1
 14319                           
 14320                           ;MotorDrive.c: 3513:     dataTRISCWork_M1 = 0x00;
 14321  158A  01DC               	clrf	_dataTRISCWork_M1
 14322                           
 14323                           ;MotorDrive.c: 3515:     if (m1PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 14324  158B  3016               	movlw	22
 14325  158C  0672               	xorwf	_m1PulseOutStep,w
 14326  158D  1D03               	btfss	3,2
 14327  158E  2D96               	goto	i1l4692
 14328                           
 14329                           ;MotorDrive.c: 3516:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 14330  158F  30FA               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14331  1590  0021               	movlb	1	; select bank1
 14332  1591  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14333  1592  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14334  1593  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14335                           
 14336                           ;MotorDrive.c: 3517:         reqComparatorOffBit |= 0x02;
 14337  1594  14D3               	bsf	_reqComparatorOffBit^(0+128),1
 14338                           
 14339                           ;MotorDrive.c: 3518:     } else {
 14340  1595  2D9B               	goto	i1l4694
 14341  1596                     i1l4692:
 14342                           
 14343                           ;MotorDrive.c: 3519:         m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 14344  1596  304E               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14345  1597  0021               	movlb	1	; select bank1
 14346  1598  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14347  1599  3013               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14348  159A  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14349  159B                     i1l4694:
 14350                           
 14351                           ;MotorDrive.c: 3522:     OutTrisRequestFlug = 1;
 14352  159B  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14353  159C  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14354                           
 14355                           ;MotorDrive.c: 3523:     reqVrsCheckBit |= 0x02;
 14356  159D  14D2               	bsf	_reqVrsCheckBit^(0+128),1
 14357  159E  0008               	return
 14358  159F                     __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT:
 14359                           
 14360                           	psect	text90
 14361  134E                     __ptext90:	
 14362 ;; *************** function _SetDataTRISxWork_M1_SPK_POL0_OPEN *****************
 14363 ;; Defined at:
 14364 ;;		line 3497 in file "MotorDrive.c"
 14365 ;; Parameters:    Size  Location     Type
 14366 ;;		None
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;		None
 14369 ;; Return value:  Size  Location     Type
 14370 ;;                  1    wreg      void 
 14371 ;; Registers used:
 14372 ;;		wreg, status,2
 14373 ;; Tracked objects:
 14374 ;;		On entry : 1F/1
 14375 ;;		On exit  : 1F/1
 14376 ;;		Unchanged: 0/0
 14377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14378 ;;      Params:         0       0       0       0       0       0       0       0
 14379 ;;      Locals:         0       0       0       0       0       0       0       0
 14380 ;;      Temps:          1       0       0       0       0       0       0       0
 14381 ;;      Totals:         1       0       0       0       0       0       0       0
 14382 ;;Total ram usage:        1 bytes
 14383 ;; Hardware stack levels used:    1
 14384 ;; This function calls:
 14385 ;;		Nothing
 14386 ;; This function is called by:
 14387 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 14388 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 14389 ;;		_TMR2_Interrupt
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           
 14394                           ;psect for function _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14395  134E                     _SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14396                           
 14397                           ;MotorDrive.c: 3499:     dataTRISAWork_M1 = 0x00;
 14398                           
 14399                           ;incstack = 0
 14400                           ; Regs used in _SetDataTRISxWork_M1_SPK_POL0_OPEN: [wreg+status,2]
 14401  134E  0020               	movlb	0	; select bank0
 14402  134F  01DE               	clrf	_dataTRISAWork_M1
 14403                           
 14404                           ;MotorDrive.c: 3500:     dataTRISBWork_M1 = 0x00;
 14405  1350  01DD               	clrf	_dataTRISBWork_M1
 14406                           
 14407                           ;MotorDrive.c: 3501:     dataTRISCWork_M1 = 0x08;
 14408  1351  3008               	movlw	8
 14409  1352  00F5               	movwf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN
 14410  1353  0875               	movf	??_SetDataTRISxWork_M1_SPK_POL0_OPEN,w
 14411  1354  00DC               	movwf	_dataTRISCWork_M1
 14412                           
 14413                           ;MotorDrive.c: 3503:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_SHORT;
 14414  1355  3087               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14415  1356  0021               	movlb	1	; select bank1
 14416  1357  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14417  1358  3015               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_SHORT
 14418  1359  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14419                           
 14420                           ;MotorDrive.c: 3504:     OutTrisRequestFlug = 1;
 14421  135A  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14422  135B  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14423  135C  0008               	return
 14424  135D                     __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN:
 14425                           
 14426                           	psect	text91
 14427  13E3                     __ptext91:	
 14428 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *****************
 14429 ;; Defined at:
 14430 ;;		line 3478 in file "MotorDrive.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;		None
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;		None
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      void 
 14437 ;; Registers used:
 14438 ;;		wreg, status,2
 14439 ;; Tracked objects:
 14440 ;;		On entry : 1F/1
 14441 ;;		On exit  : 1F/1
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14444 ;;      Params:         0       0       0       0       0       0       0       0
 14445 ;;      Locals:         0       0       0       0       0       0       0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0       0
 14447 ;;      Totals:         0       0       0       0       0       0       0       0
 14448 ;;Total ram usage:        0 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 14454 ;;		_TMR2_Interrupt
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           
 14459                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 14460  13E3                     _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 14461                           
 14462                           ;MotorDrive.c: 3480:     pulseOutLATAWork_M1 = 0;
 14463                           
 14464                           ;incstack = 0
 14465                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF: [wreg+status,2]
 14466  13E3  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14467                           
 14468                           ;MotorDrive.c: 3481:     pulseOutLATBWork_M1 = 0;
 14469  13E4  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14470                           
 14471                           ;MotorDrive.c: 3482:     pulseOutLATCWork_M1 = 0;
 14472  13E5  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14473                           
 14474                           ;MotorDrive.c: 3485:     dataTRISAWork_M1 = 0x00;
 14475  13E6  0020               	movlb	0	; select bank0
 14476  13E7  01DE               	clrf	_dataTRISAWork_M1
 14477                           
 14478                           ;MotorDrive.c: 3486:     dataTRISBWork_M1 = 0x00;
 14479  13E8  01DD               	clrf	_dataTRISBWork_M1
 14480                           
 14481                           ;MotorDrive.c: 3487:     dataTRISCWork_M1 = 0x00;
 14482  13E9  01DC               	clrf	_dataTRISCWork_M1
 14483                           
 14484                           ;MotorDrive.c: 3489:     m1PulseOutChangeFunc = SetDataTRISxWork_M1_SPK_POL0_OPEN;
 14485  13EA  304E               	movlw	low _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14486  13EB  0021               	movlb	1	; select bank1
 14487  13EC  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14488  13ED  3013               	movlw	high _SetDataTRISxWork_M1_SPK_POL0_OPEN
 14489  13EE  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14490                           
 14491                           ;MotorDrive.c: 3490:     OutRequestFlug = 1;
 14492  13EF  01D6               	clrf	_OutRequestFlug^(0+128)
 14493  13F0  0AD6               	incf	_OutRequestFlug^(0+128),f
 14494                           
 14495                           ;MotorDrive.c: 3491:     OutTrisRequestFlug = 1;
 14496  13F1  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 14497  13F2  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 14498                           
 14499                           ;MotorDrive.c: 3492:     reqComparatorOnBit |= 0x02;
 14500  13F3  14D4               	bsf	_reqComparatorOnBit^(0+128),1
 14501  13F4  0008               	return
 14502  13F5                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF:
 14503                           
 14504                           	psect	text92
 14505  127D                     __ptext92:	
 14506 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_OFF *****************
 14507 ;; Defined at:
 14508 ;;		line 3322 in file "MotorDrive.c"
 14509 ;; Parameters:    Size  Location     Type
 14510 ;;		None
 14511 ;; Auto vars:     Size  Location     Type
 14512 ;;		None
 14513 ;; Return value:  Size  Location     Type
 14514 ;;                  1    wreg      void 
 14515 ;; Registers used:
 14516 ;;		wreg, status,2, status,0
 14517 ;; Tracked objects:
 14518 ;;		On entry : 1F/1
 14519 ;;		On exit  : 1F/1
 14520 ;;		Unchanged: 0/0
 14521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14522 ;;      Params:         0       0       0       0       0       0       0       0
 14523 ;;      Locals:         0       0       0       0       0       0       0       0
 14524 ;;      Temps:          1       0       0       0       0       0       0       0
 14525 ;;      Totals:         1       0       0       0       0       0       0       0
 14526 ;;Total ram usage:        1 bytes
 14527 ;; Hardware stack levels used:    1
 14528 ;; This function calls:
 14529 ;;		Nothing
 14530 ;; This function is called by:
 14531 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P2
 14532 ;;		_TMR2_Interrupt
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536                           
 14537                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_OFF
 14538  127D                     _SetPulseOutLATxWork_M1_REV_POL1_OFF:
 14539                           
 14540                           ;MotorDrive.c: 3324:     pulseOutLATAWork_M1 = 0;
 14541                           
 14542                           ;incstack = 0
 14543                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_OFF: [wreg+status,2+status,0]
 14544  127D  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14545                           
 14546                           ;MotorDrive.c: 3325:     pulseOutLATBWork_M1 = 0;
 14547  127E  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14548                           
 14549                           ;MotorDrive.c: 3326:     pulseOutLATCWork_M1 = 0;
 14550  127F  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14551                           
 14552                           ;MotorDrive.c: 3328:     polarityBit ^= 0x02;
 14553  1280  3002               	movlw	2
 14554  1281  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF
 14555  1282  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_OFF,w
 14556  1283  06F1               	xorwf	_polarityBit,f
 14557                           
 14558                           ;MotorDrive.c: 3330:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P1;
 14559  1284  3014               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P1
 14560  1285  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14561  1286  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P1
 14562  1287  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14563                           
 14564                           ;MotorDrive.c: 3331:     OutRequestFlug = 1;
 14565  1288  01D6               	clrf	_OutRequestFlug^(0+128)
 14566  1289  0AD6               	incf	_OutRequestFlug^(0+128),f
 14567  128A  0008               	return
 14568  128B                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF:
 14569                           
 14570                           	psect	text93
 14571  1248                     __ptext93:	
 14572 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P2 *****************
 14573 ;; Defined at:
 14574 ;;		line 3310 in file "MotorDrive.c"
 14575 ;; Parameters:    Size  Location     Type
 14576 ;;		None
 14577 ;; Auto vars:     Size  Location     Type
 14578 ;;		None
 14579 ;; Return value:  Size  Location     Type
 14580 ;;                  1    wreg      void 
 14581 ;; Registers used:
 14582 ;;		wreg, status,2
 14583 ;; Tracked objects:
 14584 ;;		On entry : 1F/1
 14585 ;;		On exit  : 1F/1
 14586 ;;		Unchanged: 0/0
 14587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14588 ;;      Params:         0       0       0       0       0       0       0       0
 14589 ;;      Locals:         0       0       0       0       0       0       0       0
 14590 ;;      Temps:          1       0       0       0       0       0       0       0
 14591 ;;      Totals:         1       0       0       0       0       0       0       0
 14592 ;;Total ram usage:        1 bytes
 14593 ;; Hardware stack levels used:    1
 14594 ;; This function calls:
 14595 ;;		Nothing
 14596 ;; This function is called by:
 14597 ;;		_SetPulseOutLATxWork_M1_REV_POL1_P1
 14598 ;;		_TMR2_Interrupt
 14599 ;; This function uses a non-reentrant model
 14600 ;;
 14601                           
 14602                           
 14603                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P2
 14604  1248                     _SetPulseOutLATxWork_M1_REV_POL1_P2:
 14605                           
 14606                           ;MotorDrive.c: 3312:     pulseOutLATAWork_M1 = 0x00;
 14607                           
 14608                           ;incstack = 0
 14609                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P2: [wreg+status,2]
 14610  1248  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14611                           
 14612                           ;MotorDrive.c: 3313:     pulseOutLATBWork_M1 = 0x80;
 14613  1249  3080               	movlw	128
 14614  124A  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P2
 14615  124B  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P2,w
 14616  124C  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 14617                           
 14618                           ;MotorDrive.c: 3314:     pulseOutLATCWork_M1 = 0x00;
 14619  124D  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14620                           
 14621                           ;MotorDrive.c: 3316:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_OFF;
 14622  124E  307D               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_OFF
 14623  124F  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14624  1250  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_OFF
 14625  1251  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14626                           
 14627                           ;MotorDrive.c: 3317:     OutRequestFlug = 1;
 14628  1252  01D6               	clrf	_OutRequestFlug^(0+128)
 14629  1253  0AD6               	incf	_OutRequestFlug^(0+128),f
 14630  1254  0008               	return
 14631  1255                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2:
 14632                           
 14633                           	psect	text94
 14634  126F                     __ptext94:	
 14635 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_OFF *****************
 14636 ;; Defined at:
 14637 ;;		line 3283 in file "MotorDrive.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;		None
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;		None
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  1    wreg      void 
 14644 ;; Registers used:
 14645 ;;		wreg, status,2, status,0
 14646 ;; Tracked objects:
 14647 ;;		On entry : 1F/1
 14648 ;;		On exit  : 1F/1
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14651 ;;      Params:         0       0       0       0       0       0       0       0
 14652 ;;      Locals:         0       0       0       0       0       0       0       0
 14653 ;;      Temps:          1       0       0       0       0       0       0       0
 14654 ;;      Totals:         1       0       0       0       0       0       0       0
 14655 ;;Total ram usage:        1 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; This function calls:
 14658 ;;		Nothing
 14659 ;; This function is called by:
 14660 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P2
 14661 ;;		_TMR2_Interrupt
 14662 ;; This function uses a non-reentrant model
 14663 ;;
 14664                           
 14665                           
 14666                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_OFF
 14667  126F                     _SetPulseOutLATxWork_M1_REV_POL0_OFF:
 14668                           
 14669                           ;MotorDrive.c: 3285:     pulseOutLATAWork_M1 = 0;
 14670                           
 14671                           ;incstack = 0
 14672                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_OFF: [wreg+status,2+status,0]
 14673  126F  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14674                           
 14675                           ;MotorDrive.c: 3286:     pulseOutLATBWork_M1 = 0;
 14676  1270  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14677                           
 14678                           ;MotorDrive.c: 3287:     pulseOutLATCWork_M1 = 0;
 14679  1271  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14680                           
 14681                           ;MotorDrive.c: 3289:     polarityBit ^= 0x02;
 14682  1272  3002               	movlw	2
 14683  1273  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF
 14684  1274  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_OFF,w
 14685  1275  06F1               	xorwf	_polarityBit,f
 14686                           
 14687                           ;MotorDrive.c: 3291:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P1;
 14688  1276  3007               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P1
 14689  1277  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14690  1278  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P1
 14691  1279  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14692                           
 14693                           ;MotorDrive.c: 3292:     OutRequestFlug = 1;
 14694  127A  01D6               	clrf	_OutRequestFlug^(0+128)
 14695  127B  0AD6               	incf	_OutRequestFlug^(0+128),f
 14696  127C  0008               	return
 14697  127D                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF:
 14698                           
 14699                           	psect	text95
 14700  123B                     __ptext95:	
 14701 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P2 *****************
 14702 ;; Defined at:
 14703 ;;		line 3271 in file "MotorDrive.c"
 14704 ;; Parameters:    Size  Location     Type
 14705 ;;		None
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;		None
 14708 ;; Return value:  Size  Location     Type
 14709 ;;                  1    wreg      void 
 14710 ;; Registers used:
 14711 ;;		wreg, status,2
 14712 ;; Tracked objects:
 14713 ;;		On entry : 1F/1
 14714 ;;		On exit  : 1F/1
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14717 ;;      Params:         0       0       0       0       0       0       0       0
 14718 ;;      Locals:         0       0       0       0       0       0       0       0
 14719 ;;      Temps:          1       0       0       0       0       0       0       0
 14720 ;;      Totals:         1       0       0       0       0       0       0       0
 14721 ;;Total ram usage:        1 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; This function calls:
 14724 ;;		Nothing
 14725 ;; This function is called by:
 14726 ;;		_SetPulseOutLATxWork_M1_REV_POL0_P1
 14727 ;;		_TMR2_Interrupt
 14728 ;; This function uses a non-reentrant model
 14729 ;;
 14730                           
 14731                           
 14732                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P2
 14733  123B                     _SetPulseOutLATxWork_M1_REV_POL0_P2:
 14734                           
 14735                           ;MotorDrive.c: 3273:     pulseOutLATAWork_M1 = 0x00;
 14736                           
 14737                           ;incstack = 0
 14738                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P2: [wreg+status,2]
 14739  123B  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14740                           
 14741                           ;MotorDrive.c: 3274:     pulseOutLATBWork_M1 = 0x20;
 14742  123C  3020               	movlw	32
 14743  123D  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P2
 14744  123E  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P2,w
 14745  123F  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 14746                           
 14747                           ;MotorDrive.c: 3275:     pulseOutLATCWork_M1 = 0x00;
 14748  1240  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14749                           
 14750                           ;MotorDrive.c: 3277:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_OFF;
 14751  1241  306F               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_OFF
 14752  1242  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14753  1243  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_OFF
 14754  1244  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14755                           
 14756                           ;MotorDrive.c: 3278:     OutRequestFlug = 1;
 14757  1245  01D6               	clrf	_OutRequestFlug^(0+128)
 14758  1246  0AD6               	incf	_OutRequestFlug^(0+128),f
 14759  1247  0008               	return
 14760  1248                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2:
 14761                           
 14762                           	psect	text96
 14763  14C0                     __ptext96:	
 14764 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_OFF *****************
 14765 ;; Defined at:
 14766 ;;		line 3238 in file "MotorDrive.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;		None
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;		None
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  1    wreg      void 
 14773 ;; Registers used:
 14774 ;;		wreg, status,2, status,0
 14775 ;; Tracked objects:
 14776 ;;		On entry : 1F/1
 14777 ;;		On exit  : 1F/1
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14780 ;;      Params:         0       0       0       0       0       0       0       0
 14781 ;;      Locals:         0       0       0       0       0       0       0       0
 14782 ;;      Temps:          1       0       0       0       0       0       0       0
 14783 ;;      Totals:         1       0       0       0       0       0       0       0
 14784 ;;Total ram usage:        1 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; This function calls:
 14787 ;;		Nothing
 14788 ;; This function is called by:
 14789 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P2
 14790 ;;		_TMR2_Interrupt
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           
 14795                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 14796  14C0                     _SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 14797                           
 14798                           ;MotorDrive.c: 3240:     pulseOutLATAWork_M1 = 0;
 14799                           
 14800                           ;incstack = 0
 14801                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_OFF: [wreg+status,2+status,0]
 14802  14C0  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14803                           
 14804                           ;MotorDrive.c: 3241:     pulseOutLATBWork_M1 = 0;
 14805  14C1  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14806                           
 14807                           ;MotorDrive.c: 3242:     pulseOutLATCWork_M1 = 0;
 14808  14C2  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14809                           
 14810                           ;MotorDrive.c: 3244:     polarityBit ^= 0x02;
 14811  14C3  3002               	movlw	2
 14812  14C4  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 14813  14C5  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_OFF,w
 14814  14C6  06F1               	xorwf	_polarityBit,f
 14815                           
 14816                           ;MotorDrive.c: 3246:     if (addShakePulseBit & 0x02) {
 14817  14C7  1CF0               	btfss	_addShakePulseBit,1
 14818  14C8  2CCD               	goto	i1l4526
 14819                           
 14820                           ;MotorDrive.c: 3247:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_P0
      +                          ;
 14821  14C9  30E0               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 14822  14CA  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14823  14CB  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 14824  14CC  2CD0               	goto	L21
 14825  14CD                     i1l4526:	
 14826                           ;MotorDrive.c: 3248:     } else {
 14827                           
 14828                           
 14829                           ;MotorDrive.c: 3249:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P1;
 14830  14CD  30FA               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14831  14CE  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14832  14CF  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P1
 14833  14D0                     L21:
 14834  14D0  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14835                           
 14836                           ;MotorDrive.c: 3252:     OutRequestFlug = 1;
 14837  14D1  01D6               	clrf	_OutRequestFlug^(0+128)
 14838  14D2  0AD6               	incf	_OutRequestFlug^(0+128),f
 14839  14D3  0008               	return
 14840  14D4                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF:
 14841                           
 14842                           	psect	text97
 14843  122E                     __ptext97:	
 14844 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P2 *****************
 14845 ;; Defined at:
 14846 ;;		line 3226 in file "MotorDrive.c"
 14847 ;; Parameters:    Size  Location     Type
 14848 ;;		None
 14849 ;; Auto vars:     Size  Location     Type
 14850 ;;		None
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  1    wreg      void 
 14853 ;; Registers used:
 14854 ;;		wreg, status,2
 14855 ;; Tracked objects:
 14856 ;;		On entry : 1F/1
 14857 ;;		On exit  : 1F/1
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14860 ;;      Params:         0       0       0       0       0       0       0       0
 14861 ;;      Locals:         0       0       0       0       0       0       0       0
 14862 ;;      Temps:          1       0       0       0       0       0       0       0
 14863 ;;      Totals:         1       0       0       0       0       0       0       0
 14864 ;;Total ram usage:        1 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; This function calls:
 14867 ;;		Nothing
 14868 ;; This function is called by:
 14869 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_P1
 14870 ;;		_TMR2_Interrupt
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           
 14875                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P2
 14876  122E                     _SetPulseOutLATxWork_M1_FWD_POL1_P2:
 14877                           
 14878                           ;MotorDrive.c: 3228:     pulseOutLATAWork_M1 = 0x00;
 14879                           
 14880                           ;incstack = 0
 14881                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P2: [wreg+status,2]
 14882  122E  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14883                           
 14884                           ;MotorDrive.c: 3229:     pulseOutLATBWork_M1 = 0x00;
 14885  122F  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14886                           
 14887                           ;MotorDrive.c: 3230:     pulseOutLATCWork_M1 = 0x08;
 14888  1230  3008               	movlw	8
 14889  1231  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2
 14890  1232  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P2,w
 14891  1233  00E9               	movwf	_pulseOutLATCWork_M1^(0+128)
 14892                           
 14893                           ;MotorDrive.c: 3232:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_OFF;
 14894  1234  30C0               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 14895  1235  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14896  1236  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_OFF
 14897  1237  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14898                           
 14899                           ;MotorDrive.c: 3233:     OutRequestFlug = 1;
 14900  1238  01D6               	clrf	_OutRequestFlug^(0+128)
 14901  1239  0AD6               	incf	_OutRequestFlug^(0+128),f
 14902  123A  0008               	return
 14903  123B                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2:
 14904                           
 14905                           	psect	text98
 14906  14AC                     __ptext98:	
 14907 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_OFF *****************
 14908 ;; Defined at:
 14909 ;;		line 3193 in file "MotorDrive.c"
 14910 ;; Parameters:    Size  Location     Type
 14911 ;;		None
 14912 ;; Auto vars:     Size  Location     Type
 14913 ;;		None
 14914 ;; Return value:  Size  Location     Type
 14915 ;;                  1    wreg      void 
 14916 ;; Registers used:
 14917 ;;		wreg, status,2, status,0
 14918 ;; Tracked objects:
 14919 ;;		On entry : 1F/1
 14920 ;;		On exit  : 1F/1
 14921 ;;		Unchanged: 0/0
 14922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14923 ;;      Params:         0       0       0       0       0       0       0       0
 14924 ;;      Locals:         0       0       0       0       0       0       0       0
 14925 ;;      Temps:          1       0       0       0       0       0       0       0
 14926 ;;      Totals:         1       0       0       0       0       0       0       0
 14927 ;;Total ram usage:        1 bytes
 14928 ;; Hardware stack levels used:    1
 14929 ;; This function calls:
 14930 ;;		Nothing
 14931 ;; This function is called by:
 14932 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P2
 14933 ;;		_TMR2_Interrupt
 14934 ;; This function uses a non-reentrant model
 14935 ;;
 14936                           
 14937                           
 14938                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 14939  14AC                     _SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 14940                           
 14941                           ;MotorDrive.c: 3195:     pulseOutLATAWork_M1 = 0;
 14942                           
 14943                           ;incstack = 0
 14944                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_OFF: [wreg+status,2+status,0]
 14945  14AC  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 14946                           
 14947                           ;MotorDrive.c: 3196:     pulseOutLATBWork_M1 = 0;
 14948  14AD  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 14949                           
 14950                           ;MotorDrive.c: 3197:     pulseOutLATCWork_M1 = 0;
 14951  14AE  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 14952                           
 14953                           ;MotorDrive.c: 3199:     polarityBit ^= 0x02;
 14954  14AF  3002               	movlw	2
 14955  14B0  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 14956  14B1  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_OFF,w
 14957  14B2  06F1               	xorwf	_polarityBit,f
 14958                           
 14959                           ;MotorDrive.c: 3201:     if (addShakePulseBit & 0x02) {
 14960  14B3  1CF0               	btfss	_addShakePulseBit,1
 14961  14B4  2CB9               	goto	i1l4498
 14962                           
 14963                           ;MotorDrive.c: 3202:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_P0
      +                          ;
 14964  14B5  30D3               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 14965  14B6  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14966  14B7  3011               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 14967  14B8  2CBC               	goto	L22
 14968  14B9                     i1l4498:	
 14969                           ;MotorDrive.c: 3203:     } else {
 14970                           
 14971                           
 14972                           ;MotorDrive.c: 3204:         m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P1;
 14973  14B9  30ED               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14974  14BA  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 14975  14BB  3011               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P1
 14976  14BC                     L22:
 14977  14BC  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 14978                           
 14979                           ;MotorDrive.c: 3207:     OutRequestFlug = 1;
 14980  14BD  01D6               	clrf	_OutRequestFlug^(0+128)
 14981  14BE  0AD6               	incf	_OutRequestFlug^(0+128),f
 14982  14BF  0008               	return
 14983  14C0                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF:
 14984                           
 14985                           	psect	text99
 14986  1221                     __ptext99:	
 14987 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P2 *****************
 14988 ;; Defined at:
 14989 ;;		line 3181 in file "MotorDrive.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;		None
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      void 
 14996 ;; Registers used:
 14997 ;;		wreg, status,2
 14998 ;; Tracked objects:
 14999 ;;		On entry : 1F/1
 15000 ;;		On exit  : 1F/1
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15003 ;;      Params:         0       0       0       0       0       0       0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0       0
 15005 ;;      Temps:          1       0       0       0       0       0       0       0
 15006 ;;      Totals:         1       0       0       0       0       0       0       0
 15007 ;;Total ram usage:        1 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; This function calls:
 15010 ;;		Nothing
 15011 ;; This function is called by:
 15012 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15013 ;;		_TMR2_Interrupt
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15019  1221                     _SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15020                           
 15021                           ;MotorDrive.c: 3183:     pulseOutLATAWork_M1 = 0x00;
 15022                           
 15023                           ;incstack = 0
 15024                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P2: [wreg+status,2]
 15025  1221  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15026                           
 15027                           ;MotorDrive.c: 3184:     pulseOutLATBWork_M1 = 0x00;
 15028  1222  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 15029                           
 15030                           ;MotorDrive.c: 3185:     pulseOutLATCWork_M1 = 0x04;
 15031  1223  3004               	movlw	4
 15032  1224  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2
 15033  1225  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P2,w
 15034  1226  00E9               	movwf	_pulseOutLATCWork_M1^(0+128)
 15035                           
 15036                           ;MotorDrive.c: 3187:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_OFF;
 15037  1227  30AC               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15038  1228  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15039  1229  3014               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15040  122A  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15041                           
 15042                           ;MotorDrive.c: 3188:     OutRequestFlug = 1;
 15043  122B  01D6               	clrf	_OutRequestFlug^(0+128)
 15044  122C  0AD6               	incf	_OutRequestFlug^(0+128),f
 15045  122D  0008               	return
 15046  122E                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2:
 15047                           
 15048                           	psect	text100
 15049  1214                     __ptext100:	
 15050 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL0_P1 *****************
 15051 ;; Defined at:
 15052 ;;		line 3259 in file "MotorDrive.c"
 15053 ;; Parameters:    Size  Location     Type
 15054 ;;		None
 15055 ;; Auto vars:     Size  Location     Type
 15056 ;;		None
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  1    wreg      void 
 15059 ;; Registers used:
 15060 ;;		wreg, status,2
 15061 ;; Tracked objects:
 15062 ;;		On entry : 1F/1
 15063 ;;		On exit  : 1F/1
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15066 ;;      Params:         0       0       0       0       0       0       0       0
 15067 ;;      Locals:         0       0       0       0       0       0       0       0
 15068 ;;      Temps:          1       0       0       0       0       0       0       0
 15069 ;;      Totals:         1       0       0       0       0       0       0       0
 15070 ;;Total ram usage:        1 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; This function calls:
 15073 ;;		Nothing
 15074 ;; This function is called by:
 15075 ;;		_StartPulseOutM1
 15076 ;;		_SetPulseOutLATxWork_M1_REV_POL1_OFF
 15077 ;;		_TMR2_Interrupt
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           
 15082                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL0_P1
 15083  1214                     _SetPulseOutLATxWork_M1_REV_POL0_P1:
 15084                           
 15085                           ;MotorDrive.c: 3261:     pulseOutLATAWork_M1 = 0x00;
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL0_P1: [wreg+status,2]
 15089  1214  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15090                           
 15091                           ;MotorDrive.c: 3262:     pulseOutLATBWork_M1 = 0x00;
 15092  1215  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 15093                           
 15094                           ;MotorDrive.c: 3263:     pulseOutLATCWork_M1 = 0x08;
 15095  1216  3008               	movlw	8
 15096  1217  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL0_P1
 15097  1218  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL0_P1,w
 15098  1219  00E9               	movwf	_pulseOutLATCWork_M1^(0+128)
 15099                           
 15100                           ;MotorDrive.c: 3265:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL0_P2;
 15101  121A  303B               	movlw	low _SetPulseOutLATxWork_M1_REV_POL0_P2
 15102  121B  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15103  121C  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL0_P2
 15104  121D  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15105                           
 15106                           ;MotorDrive.c: 3266:     OutRequestFlug = 1;
 15107  121E  01D6               	clrf	_OutRequestFlug^(0+128)
 15108  121F  0AD6               	incf	_OutRequestFlug^(0+128),f
 15109  1220  0008               	return
 15110  1221                     __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1:
 15111                           
 15112                           	psect	text101
 15113  1207                     __ptext101:	
 15114 ;; *************** function _SetPulseOutLATxWork_M1_REV_POL1_P1 *****************
 15115 ;; Defined at:
 15116 ;;		line 3298 in file "MotorDrive.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;		None
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;		None
 15121 ;; Return value:  Size  Location     Type
 15122 ;;                  1    wreg      void 
 15123 ;; Registers used:
 15124 ;;		wreg, status,2
 15125 ;; Tracked objects:
 15126 ;;		On entry : 1F/1
 15127 ;;		On exit  : 1F/1
 15128 ;;		Unchanged: 0/0
 15129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15130 ;;      Params:         0       0       0       0       0       0       0       0
 15131 ;;      Locals:         0       0       0       0       0       0       0       0
 15132 ;;      Temps:          1       0       0       0       0       0       0       0
 15133 ;;      Totals:         1       0       0       0       0       0       0       0
 15134 ;;Total ram usage:        1 bytes
 15135 ;; Hardware stack levels used:    1
 15136 ;; This function calls:
 15137 ;;		Nothing
 15138 ;; This function is called by:
 15139 ;;		_StartPulseOutM1
 15140 ;;		_SetPulseOutLATxWork_M1_REV_POL0_OFF
 15141 ;;		_TMR2_Interrupt
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           
 15146                           ;psect for function _SetPulseOutLATxWork_M1_REV_POL1_P1
 15147  1207                     _SetPulseOutLATxWork_M1_REV_POL1_P1:
 15148                           
 15149                           ;MotorDrive.c: 3300:     pulseOutLATAWork_M1 = 0x00;
 15150                           
 15151                           ;incstack = 0
 15152                           ; Regs used in _SetPulseOutLATxWork_M1_REV_POL1_P1: [wreg+status,2]
 15153  1207  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15154                           
 15155                           ;MotorDrive.c: 3301:     pulseOutLATBWork_M1 = 0x00;
 15156  1208  01EA               	clrf	_pulseOutLATBWork_M1^(0+128)
 15157                           
 15158                           ;MotorDrive.c: 3302:     pulseOutLATCWork_M1 = 0x04;
 15159  1209  3004               	movlw	4
 15160  120A  00F5               	movwf	??_SetPulseOutLATxWork_M1_REV_POL1_P1
 15161  120B  0875               	movf	??_SetPulseOutLATxWork_M1_REV_POL1_P1,w
 15162  120C  00E9               	movwf	_pulseOutLATCWork_M1^(0+128)
 15163                           
 15164                           ;MotorDrive.c: 3304:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_REV_POL1_P2;
 15165  120D  3048               	movlw	low _SetPulseOutLATxWork_M1_REV_POL1_P2
 15166  120E  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15167  120F  3012               	movlw	high _SetPulseOutLATxWork_M1_REV_POL1_P2
 15168  1210  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15169                           
 15170                           ;MotorDrive.c: 3305:     OutRequestFlug = 1;
 15171  1211  01D6               	clrf	_OutRequestFlug^(0+128)
 15172  1212  0AD6               	incf	_OutRequestFlug^(0+128),f
 15173  1213  0008               	return
 15174  1214                     __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1:
 15175                           
 15176                           	psect	text102
 15177  11FA                     __ptext102:	
 15178 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL0_P1 *****************
 15179 ;; Defined at:
 15180 ;;		line 3169 in file "MotorDrive.c"
 15181 ;; Parameters:    Size  Location     Type
 15182 ;;		None
 15183 ;; Auto vars:     Size  Location     Type
 15184 ;;		None
 15185 ;; Return value:  Size  Location     Type
 15186 ;;                  1    wreg      void 
 15187 ;; Registers used:
 15188 ;;		wreg, status,2
 15189 ;; Tracked objects:
 15190 ;;		On entry : 1F/1
 15191 ;;		On exit  : 1F/1
 15192 ;;		Unchanged: 0/0
 15193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15194 ;;      Params:         0       0       0       0       0       0       0       0
 15195 ;;      Locals:         0       0       0       0       0       0       0       0
 15196 ;;      Temps:          1       0       0       0       0       0       0       0
 15197 ;;      Totals:         1       0       0       0       0       0       0       0
 15198 ;;Total ram usage:        1 bytes
 15199 ;; Hardware stack levels used:    1
 15200 ;; This function calls:
 15201 ;;		Nothing
 15202 ;; This function is called by:
 15203 ;;		_StartPulseOutM1
 15204 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15205 ;;		_SetDataTRISxWork_M1_SPK_POL0_SHORT
 15206 ;;		_TMR2_Interrupt
 15207 ;; This function uses a non-reentrant model
 15208 ;;
 15209                           
 15210                           
 15211                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL0_P1
 15212  11FA                     _SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15213                           
 15214                           ;MotorDrive.c: 3171:     pulseOutLATAWork_M1 = 0x00;
 15215                           
 15216                           ;incstack = 0
 15217                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL0_P1: [wreg+status,2]
 15218  11FA  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15219                           
 15220                           ;MotorDrive.c: 3172:     pulseOutLATBWork_M1 = 0x80;
 15221  11FB  3080               	movlw	128
 15222  11FC  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1
 15223  11FD  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL0_P1,w
 15224  11FE  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 15225                           
 15226                           ;MotorDrive.c: 3173:     pulseOutLATCWork_M1 = 0x00;
 15227  11FF  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 15228                           
 15229                           ;MotorDrive.c: 3175:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL0_P2;
 15230  1200  3021               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15231  1201  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15232  1202  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL0_P2
 15233  1203  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15234                           
 15235                           ;MotorDrive.c: 3176:     OutRequestFlug = 1;
 15236  1204  01D6               	clrf	_OutRequestFlug^(0+128)
 15237  1205  0AD6               	incf	_OutRequestFlug^(0+128),f
 15238  1206  0008               	return
 15239  1207                     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1:
 15240                           
 15241                           	psect	text103
 15242  11ED                     __ptext103:	
 15243 ;; *************** function _SetPulseOutLATxWork_M1_FWD_POL1_P1 *****************
 15244 ;; Defined at:
 15245 ;;		line 3214 in file "MotorDrive.c"
 15246 ;; Parameters:    Size  Location     Type
 15247 ;;		None
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;		None
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, status,2
 15254 ;; Tracked objects:
 15255 ;;		On entry : 1F/1
 15256 ;;		On exit  : 1F/1
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15259 ;;      Params:         0       0       0       0       0       0       0       0
 15260 ;;      Locals:         0       0       0       0       0       0       0       0
 15261 ;;      Temps:          1       0       0       0       0       0       0       0
 15262 ;;      Totals:         1       0       0       0       0       0       0       0
 15263 ;;Total ram usage:        1 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; This function calls:
 15266 ;;		Nothing
 15267 ;; This function is called by:
 15268 ;;		_StartPulseOutM1
 15269 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15270 ;;		_SetDataTRISxWork_M1_SPK_POL1_SHORT
 15271 ;;		_TMR2_Interrupt
 15272 ;; This function uses a non-reentrant model
 15273 ;;
 15274                           
 15275                           
 15276                           ;psect for function _SetPulseOutLATxWork_M1_FWD_POL1_P1
 15277  11ED                     _SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15278                           
 15279                           ;MotorDrive.c: 3216:     pulseOutLATAWork_M1 = 0x00;
 15280                           
 15281                           ;incstack = 0
 15282                           ; Regs used in _SetPulseOutLATxWork_M1_FWD_POL1_P1: [wreg+status,2]
 15283  11ED  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15284                           
 15285                           ;MotorDrive.c: 3217:     pulseOutLATBWork_M1 = 0x20;
 15286  11EE  3020               	movlw	32
 15287  11EF  00F5               	movwf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1
 15288  11F0  0875               	movf	??_SetPulseOutLATxWork_M1_FWD_POL1_P1,w
 15289  11F1  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 15290                           
 15291                           ;MotorDrive.c: 3218:     pulseOutLATCWork_M1 = 0x00;
 15292  11F2  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 15293                           
 15294                           ;MotorDrive.c: 3220:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_FWD_POL1_P2;
 15295  11F3  302E               	movlw	low _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15296  11F4  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15297  11F5  3012               	movlw	high _SetPulseOutLATxWork_M1_FWD_POL1_P2
 15298  11F6  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15299                           
 15300                           ;MotorDrive.c: 3221:     OutRequestFlug = 1;
 15301  11F7  01D6               	clrf	_OutRequestFlug^(0+128)
 15302  11F8  0AD6               	incf	_OutRequestFlug^(0+128),f
 15303  11F9  0008               	return
 15304  11FA                     __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1:
 15305                           
 15306                           	psect	text104
 15307  11E0                     __ptext104:	
 15308 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *****************
 15309 ;; Defined at:
 15310 ;;		line 3466 in file "MotorDrive.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		wreg, status,2
 15319 ;; Tracked objects:
 15320 ;;		On entry : 1F/1
 15321 ;;		On exit  : 1F/1
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15324 ;;      Params:         0       0       0       0       0       0       0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0
 15326 ;;      Temps:          1       0       0       0       0       0       0       0
 15327 ;;      Totals:         1       0       0       0       0       0       0       0
 15328 ;;Total ram usage:        1 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; This function calls:
 15331 ;;		Nothing
 15332 ;; This function is called by:
 15333 ;;		_StartPulseOutM1
 15334 ;;		_SetPulseOutLATxWork_M1_FWD_POL1_OFF
 15335 ;;		_TMR2_Interrupt
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           
 15340                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15341  11E0                     _SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15342                           
 15343                           ;MotorDrive.c: 3468:     pulseOutLATAWork_M1 = 0x00;
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL0_P0: [wreg+status,2]
 15347  11E0  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15348                           
 15349                           ;MotorDrive.c: 3469:     pulseOutLATBWork_M1 = 0x80;
 15350  11E1  3080               	movlw	128
 15351  11E2  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0
 15352  11E3  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0,w
 15353  11E4  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 15354                           
 15355                           ;MotorDrive.c: 3470:     pulseOutLATCWork_M1 = 0x00;
 15356  11E5  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 15357                           
 15358                           ;MotorDrive.c: 3472:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL0_OFF;
 15359  11E6  30E3               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15360  11E7  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15361  11E8  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF
 15362  11E9  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15363                           
 15364                           ;MotorDrive.c: 3473:     OutRequestFlug = 1;
 15365  11EA  01D6               	clrf	_OutRequestFlug^(0+128)
 15366  11EB  0AD6               	incf	_OutRequestFlug^(0+128),f
 15367  11EC  0008               	return
 15368  11ED                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0:
 15369                           
 15370                           	psect	text105
 15371  11D3                     __ptext105:	
 15372 ;; *************** function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *****************
 15373 ;; Defined at:
 15374 ;;		line 3529 in file "MotorDrive.c"
 15375 ;; Parameters:    Size  Location     Type
 15376 ;;		None
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  1    wreg      void 
 15381 ;; Registers used:
 15382 ;;		wreg, status,2
 15383 ;; Tracked objects:
 15384 ;;		On entry : 1F/1
 15385 ;;		On exit  : 1F/1
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15388 ;;      Params:         0       0       0       0       0       0       0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0       0
 15390 ;;      Temps:          1       0       0       0       0       0       0       0
 15391 ;;      Totals:         1       0       0       0       0       0       0       0
 15392 ;;Total ram usage:        1 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; This function calls:
 15395 ;;		Nothing
 15396 ;; This function is called by:
 15397 ;;		_StartPulseOutM1
 15398 ;;		_SetPulseOutLATxWork_M1_FWD_POL0_OFF
 15399 ;;		_TMR2_Interrupt
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15405  11D3                     _SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 15406                           
 15407                           ;MotorDrive.c: 3531:     pulseOutLATAWork_M1 = 0x00;
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _SetPulseOutLATxWork_M1_SHAKE_POL1_P0: [wreg+status,2]
 15411  11D3  01EB               	clrf	_pulseOutLATAWork_M1^(0+128)
 15412                           
 15413                           ;MotorDrive.c: 3532:     pulseOutLATBWork_M1 = 0x20;
 15414  11D4  3020               	movlw	32
 15415  11D5  00F5               	movwf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0
 15416  11D6  0875               	movf	??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0,w
 15417  11D7  00EA               	movwf	_pulseOutLATBWork_M1^(0+128)
 15418                           
 15419                           ;MotorDrive.c: 3533:     pulseOutLATCWork_M1 = 0x00;
 15420  11D8  01E9               	clrf	_pulseOutLATCWork_M1^(0+128)
 15421                           
 15422                           ;MotorDrive.c: 3535:     m1PulseOutChangeFunc = SetPulseOutLATxWork_M1_SHAKE_POL1_OFF;
 15423  11D9  30F5               	movlw	low _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 15424  11DA  00C8               	movwf	_m1PulseOutChangeFunc^(0+128)
 15425  11DB  3013               	movlw	high _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF
 15426  11DC  00C9               	movwf	(_m1PulseOutChangeFunc^(0+128)+1)
 15427                           
 15428                           ;MotorDrive.c: 3536:     OutRequestFlug = 1;
 15429  11DD  01D6               	clrf	_OutRequestFlug^(0+128)
 15430  11DE  0AD6               	incf	_OutRequestFlug^(0+128),f
 15431  11DF  0008               	return
 15432  11E0                     __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0:
 15433                           
 15434                           	psect	text106
 15435  156F                     __ptext106:	
 15436 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_SHORT *****************
 15437 ;; Defined at:
 15438 ;;		line 3445 in file "MotorDrive.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;		None
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;		None
 15443 ;; Return value:  Size  Location     Type
 15444 ;;                  1    wreg      void 
 15445 ;; Registers used:
 15446 ;;		wreg, status,2, status,0
 15447 ;; Tracked objects:
 15448 ;;		On entry : 1F/1
 15449 ;;		On exit  : 1F/1
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15452 ;;      Params:         0       0       0       0       0       0       0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0       0
 15454 ;;      Temps:          0       0       0       0       0       0       0       0
 15455 ;;      Totals:         0       0       0       0       0       0       0       0
 15456 ;;Total ram usage:        0 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; This function calls:
 15459 ;;		Nothing
 15460 ;; This function is called by:
 15461 ;;		_SetDataTRISxWork_M0_SPK_POL1_OPEN
 15462 ;;		_TMR2_Interrupt
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_SHORT
 15468  156F                     _SetDataTRISxWork_M0_SPK_POL1_SHORT:
 15469                           
 15470                           ;MotorDrive.c: 3447:     dataTRISAWork_M0 = 0x00;
 15471                           
 15472                           ;incstack = 0
 15473                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_SHORT: [wreg+status,2+status,0]
 15474  156F  0020               	movlb	0	; select bank0
 15475  1570  01E1               	clrf	_dataTRISAWork_M0
 15476                           
 15477                           ;MotorDrive.c: 3448:     dataTRISBWork_M0 = 0x00;
 15478  1571  01E0               	clrf	_dataTRISBWork_M0
 15479                           
 15480                           ;MotorDrive.c: 3449:     dataTRISCWork_M0 = 0x00;
 15481  1572  01DF               	clrf	_dataTRISCWork_M0
 15482                           
 15483                           ;MotorDrive.c: 3451:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 15484  1573  3016               	movlw	22
 15485  1574  0673               	xorwf	_m0PulseOutStep,w
 15486  1575  1D03               	btfss	3,2
 15487  1576  2D7E               	goto	i1l4652
 15488                           
 15489                           ;MotorDrive.c: 3452:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 15490  1577  30B8               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 15491  1578  0021               	movlb	1	; select bank1
 15492  1579  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15493  157A  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 15494  157B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15495                           
 15496                           ;MotorDrive.c: 3453:         reqComparatorOffBit |= 0x01;
 15497  157C  1453               	bsf	_reqComparatorOffBit^(0+128),0
 15498                           
 15499                           ;MotorDrive.c: 3454:     } else {
 15500  157D  2D83               	goto	i1l4654
 15501  157E                     i1l4652:
 15502                           
 15503                           ;MotorDrive.c: 3455:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 15504  157E  303F               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 15505  157F  0021               	movlb	1	; select bank1
 15506  1580  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15507  1581  3013               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 15508  1582  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15509  1583                     i1l4654:
 15510                           
 15511                           ;MotorDrive.c: 3458:     OutTrisRequestFlug = 1;
 15512  1583  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15513  1584  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15514                           
 15515                           ;MotorDrive.c: 3459:     reqVrsCheckBit |= 0x01;
 15516  1585  1452               	bsf	_reqVrsCheckBit^(0+128),0
 15517  1586  0008               	return
 15518  1587                     __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT:
 15519                           
 15520                           	psect	text107
 15521  133F                     __ptext107:	
 15522 ;; *************** function _SetDataTRISxWork_M0_SPK_POL1_OPEN *****************
 15523 ;; Defined at:
 15524 ;;		line 3433 in file "MotorDrive.c"
 15525 ;; Parameters:    Size  Location     Type
 15526 ;;		None
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;		None
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  1    wreg      void 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2
 15533 ;; Tracked objects:
 15534 ;;		On entry : 1F/1
 15535 ;;		On exit  : 1F/1
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15538 ;;      Params:         0       0       0       0       0       0       0       0
 15539 ;;      Locals:         0       0       0       0       0       0       0       0
 15540 ;;      Temps:          1       0       0       0       0       0       0       0
 15541 ;;      Totals:         1       0       0       0       0       0       0       0
 15542 ;;Total ram usage:        1 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; This function calls:
 15545 ;;		Nothing
 15546 ;; This function is called by:
 15547 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 15548 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 15549 ;;		_TMR2_Interrupt
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           
 15554                           ;psect for function _SetDataTRISxWork_M0_SPK_POL1_OPEN
 15555  133F                     _SetDataTRISxWork_M0_SPK_POL1_OPEN:
 15556                           
 15557                           ;MotorDrive.c: 3435:     dataTRISAWork_M0 = 0x02;
 15558                           
 15559                           ;incstack = 0
 15560                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL1_OPEN: [wreg+status,2]
 15561  133F  3002               	movlw	2
 15562  1340  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN
 15563  1341  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL1_OPEN,w
 15564  1342  0020               	movlb	0	; select bank0
 15565  1343  00E1               	movwf	_dataTRISAWork_M0
 15566                           
 15567                           ;MotorDrive.c: 3436:     dataTRISBWork_M0 = 0x00;
 15568  1344  01E0               	clrf	_dataTRISBWork_M0
 15569                           
 15570                           ;MotorDrive.c: 3437:     dataTRISCWork_M0 = 0x00;
 15571  1345  01DF               	clrf	_dataTRISCWork_M0
 15572                           
 15573                           ;MotorDrive.c: 3439:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_SHORT;
 15574  1346  306F               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_SHORT
 15575  1347  0021               	movlb	1	; select bank1
 15576  1348  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15577  1349  3015               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_SHORT
 15578  134A  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15579                           
 15580                           ;MotorDrive.c: 3440:     OutTrisRequestFlug = 1;
 15581  134B  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15582  134C  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15583  134D  0008               	return
 15584  134E                     __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN:
 15585                           
 15586                           	psect	text108
 15587  13D1                     __ptext108:	
 15588 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *****************
 15589 ;; Defined at:
 15590 ;;		line 3414 in file "MotorDrive.c"
 15591 ;; Parameters:    Size  Location     Type
 15592 ;;		None
 15593 ;; Auto vars:     Size  Location     Type
 15594 ;;		None
 15595 ;; Return value:  Size  Location     Type
 15596 ;;                  1    wreg      void 
 15597 ;; Registers used:
 15598 ;;		wreg, status,2
 15599 ;; Tracked objects:
 15600 ;;		On entry : 1F/1
 15601 ;;		On exit  : 1F/1
 15602 ;;		Unchanged: 0/0
 15603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15604 ;;      Params:         0       0       0       0       0       0       0       0
 15605 ;;      Locals:         0       0       0       0       0       0       0       0
 15606 ;;      Temps:          0       0       0       0       0       0       0       0
 15607 ;;      Totals:         0       0       0       0       0       0       0       0
 15608 ;;Total ram usage:        0 bytes
 15609 ;; Hardware stack levels used:    1
 15610 ;; This function calls:
 15611 ;;		Nothing
 15612 ;; This function is called by:
 15613 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 15614 ;;		_TMR2_Interrupt
 15615 ;; This function uses a non-reentrant model
 15616 ;;
 15617                           
 15618                           
 15619                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 15620  13D1                     _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 15621                           
 15622                           ;MotorDrive.c: 3416:     pulseOutLATAWork_M0 = 0;
 15623                           
 15624                           ;incstack = 0
 15625                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF: [wreg+status,2]
 15626  13D1  0020               	movlb	0	; select bank0
 15627  13D2  01E7               	clrf	_pulseOutLATAWork_M0
 15628                           
 15629                           ;MotorDrive.c: 3417:     pulseOutLATBWork_M0 = 0;
 15630  13D3  01E6               	clrf	_pulseOutLATBWork_M0
 15631                           
 15632                           ;MotorDrive.c: 3418:     pulseOutLATCWork_M0 = 0;
 15633  13D4  01E5               	clrf	_pulseOutLATCWork_M0
 15634                           
 15635                           ;MotorDrive.c: 3421:     dataTRISAWork_M0 = 0x00;
 15636  13D5  01E1               	clrf	_dataTRISAWork_M0
 15637                           
 15638                           ;MotorDrive.c: 3422:     dataTRISBWork_M0 = 0x00;
 15639  13D6  01E0               	clrf	_dataTRISBWork_M0
 15640                           
 15641                           ;MotorDrive.c: 3423:     dataTRISCWork_M0 = 0x00;
 15642  13D7  01DF               	clrf	_dataTRISCWork_M0
 15643                           
 15644                           ;MotorDrive.c: 3425:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL1_OPEN;
 15645  13D8  303F               	movlw	low _SetDataTRISxWork_M0_SPK_POL1_OPEN
 15646  13D9  0021               	movlb	1	; select bank1
 15647  13DA  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15648  13DB  3013               	movlw	high _SetDataTRISxWork_M0_SPK_POL1_OPEN
 15649  13DC  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15650                           
 15651                           ;MotorDrive.c: 3426:     OutRequestFlug = 1;
 15652  13DD  01D6               	clrf	_OutRequestFlug^(0+128)
 15653  13DE  0AD6               	incf	_OutRequestFlug^(0+128),f
 15654                           
 15655                           ;MotorDrive.c: 3427:     OutTrisRequestFlug = 1;
 15656  13DF  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15657  13E0  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15658                           
 15659                           ;MotorDrive.c: 3428:     reqComparatorOnBit |= 0x01;
 15660  13E1  1454               	bsf	_reqComparatorOnBit^(0+128),0
 15661  13E2  0008               	return
 15662  13E3                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF:
 15663                           
 15664                           	psect	text109
 15665  1557                     __ptext109:	
 15666 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_SHORT *****************
 15667 ;; Defined at:
 15668 ;;		line 3382 in file "MotorDrive.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;		None
 15671 ;; Auto vars:     Size  Location     Type
 15672 ;;		None
 15673 ;; Return value:  Size  Location     Type
 15674 ;;                  1    wreg      void 
 15675 ;; Registers used:
 15676 ;;		wreg, status,2, status,0
 15677 ;; Tracked objects:
 15678 ;;		On entry : 1F/1
 15679 ;;		On exit  : 1F/1
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15682 ;;      Params:         0       0       0       0       0       0       0       0
 15683 ;;      Locals:         0       0       0       0       0       0       0       0
 15684 ;;      Temps:          0       0       0       0       0       0       0       0
 15685 ;;      Totals:         0       0       0       0       0       0       0       0
 15686 ;;Total ram usage:        0 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; This function calls:
 15689 ;;		Nothing
 15690 ;; This function is called by:
 15691 ;;		_SetDataTRISxWork_M0_SPK_POL0_OPEN
 15692 ;;		_TMR2_Interrupt
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           
 15697                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_SHORT
 15698  1557                     _SetDataTRISxWork_M0_SPK_POL0_SHORT:
 15699                           
 15700                           ;MotorDrive.c: 3384:     dataTRISAWork_M0 = 0x00;
 15701                           
 15702                           ;incstack = 0
 15703                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_SHORT: [wreg+status,2+status,0]
 15704  1557  0020               	movlb	0	; select bank0
 15705  1558  01E1               	clrf	_dataTRISAWork_M0
 15706                           
 15707                           ;MotorDrive.c: 3385:     dataTRISBWork_M0 = 0x00;
 15708  1559  01E0               	clrf	_dataTRISBWork_M0
 15709                           
 15710                           ;MotorDrive.c: 3386:     dataTRISCWork_M0 = 0x00;
 15711  155A  01DF               	clrf	_dataTRISCWork_M0
 15712                           
 15713                           ;MotorDrive.c: 3388:     if (m0PulseOutStep == ID_PULSE_OUT_STEP_P1) {
 15714  155B  3016               	movlw	22
 15715  155C  0673               	xorwf	_m0PulseOutStep,w
 15716  155D  1D03               	btfss	3,2
 15717  155E  2D66               	goto	i1l4612
 15718                           
 15719                           ;MotorDrive.c: 3389:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 15720  155F  30C7               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 15721  1560  0021               	movlb	1	; select bank1
 15722  1561  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15723  1562  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 15724  1563  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15725                           
 15726                           ;MotorDrive.c: 3390:         reqComparatorOffBit |= 0x01;
 15727  1564  1453               	bsf	_reqComparatorOffBit^(0+128),0
 15728                           
 15729                           ;MotorDrive.c: 3391:     } else {
 15730  1565  2D6B               	goto	i1l4614
 15731  1566                     i1l4612:
 15732                           
 15733                           ;MotorDrive.c: 3392:         m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 15734  1566  3030               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 15735  1567  0021               	movlb	1	; select bank1
 15736  1568  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15737  1569  3013               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 15738  156A  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15739  156B                     i1l4614:
 15740                           
 15741                           ;MotorDrive.c: 3395:     OutTrisRequestFlug = 1;
 15742  156B  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15743  156C  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15744                           
 15745                           ;MotorDrive.c: 3396:     reqVrsCheckBit |= 0x01;
 15746  156D  1452               	bsf	_reqVrsCheckBit^(0+128),0
 15747  156E  0008               	return
 15748  156F                     __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT:
 15749                           
 15750                           	psect	text110
 15751  1330                     __ptext110:	
 15752 ;; *************** function _SetDataTRISxWork_M0_SPK_POL0_OPEN *****************
 15753 ;; Defined at:
 15754 ;;		line 3370 in file "MotorDrive.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;		None
 15757 ;; Auto vars:     Size  Location     Type
 15758 ;;		None
 15759 ;; Return value:  Size  Location     Type
 15760 ;;                  1    wreg      void 
 15761 ;; Registers used:
 15762 ;;		wreg, status,2
 15763 ;; Tracked objects:
 15764 ;;		On entry : 1F/1
 15765 ;;		On exit  : 1F/1
 15766 ;;		Unchanged: 0/0
 15767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15768 ;;      Params:         0       0       0       0       0       0       0       0
 15769 ;;      Locals:         0       0       0       0       0       0       0       0
 15770 ;;      Temps:          1       0       0       0       0       0       0       0
 15771 ;;      Totals:         1       0       0       0       0       0       0       0
 15772 ;;Total ram usage:        1 bytes
 15773 ;; Hardware stack levels used:    1
 15774 ;; This function calls:
 15775 ;;		Nothing
 15776 ;; This function is called by:
 15777 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 15778 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 15779 ;;		_TMR2_Interrupt
 15780 ;; This function uses a non-reentrant model
 15781 ;;
 15782                           
 15783                           
 15784                           ;psect for function _SetDataTRISxWork_M0_SPK_POL0_OPEN
 15785  1330                     _SetDataTRISxWork_M0_SPK_POL0_OPEN:
 15786                           
 15787                           ;MotorDrive.c: 3372:     dataTRISAWork_M0 = 0x00;
 15788                           
 15789                           ;incstack = 0
 15790                           ; Regs used in _SetDataTRISxWork_M0_SPK_POL0_OPEN: [wreg+status,2]
 15791  1330  0020               	movlb	0	; select bank0
 15792  1331  01E1               	clrf	_dataTRISAWork_M0
 15793                           
 15794                           ;MotorDrive.c: 3373:     dataTRISBWork_M0 = 0x00;
 15795  1332  01E0               	clrf	_dataTRISBWork_M0
 15796                           
 15797                           ;MotorDrive.c: 3374:     dataTRISCWork_M0 = 0x02;
 15798  1333  3002               	movlw	2
 15799  1334  00F5               	movwf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN
 15800  1335  0875               	movf	??_SetDataTRISxWork_M0_SPK_POL0_OPEN,w
 15801  1336  00DF               	movwf	_dataTRISCWork_M0
 15802                           
 15803                           ;MotorDrive.c: 3376:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_SHORT;
 15804  1337  3057               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_SHORT
 15805  1338  0021               	movlb	1	; select bank1
 15806  1339  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15807  133A  3015               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_SHORT
 15808  133B  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15809                           
 15810                           ;MotorDrive.c: 3377:     OutTrisRequestFlug = 1;
 15811  133C  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15812  133D  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15813  133E  0008               	return
 15814  133F                     __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN:
 15815                           
 15816                           	psect	text111
 15817  13BF                     __ptext111:	
 15818 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *****************
 15819 ;; Defined at:
 15820 ;;		line 3351 in file "MotorDrive.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;		None
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;		None
 15825 ;; Return value:  Size  Location     Type
 15826 ;;                  1    wreg      void 
 15827 ;; Registers used:
 15828 ;;		wreg, status,2
 15829 ;; Tracked objects:
 15830 ;;		On entry : 1F/1
 15831 ;;		On exit  : 1F/1
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15834 ;;      Params:         0       0       0       0       0       0       0       0
 15835 ;;      Locals:         0       0       0       0       0       0       0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0
 15837 ;;      Totals:         0       0       0       0       0       0       0       0
 15838 ;;Total ram usage:        0 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; This function calls:
 15841 ;;		Nothing
 15842 ;; This function is called by:
 15843 ;;		_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 15844 ;;		_TMR2_Interrupt
 15845 ;; This function uses a non-reentrant model
 15846 ;;
 15847                           
 15848                           
 15849                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 15850  13BF                     _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 15851                           
 15852                           ;MotorDrive.c: 3353:     pulseOutLATAWork_M0 = 0;
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF: [wreg+status,2]
 15856  13BF  0020               	movlb	0	; select bank0
 15857  13C0  01E7               	clrf	_pulseOutLATAWork_M0
 15858                           
 15859                           ;MotorDrive.c: 3354:     pulseOutLATBWork_M0 = 0;
 15860  13C1  01E6               	clrf	_pulseOutLATBWork_M0
 15861                           
 15862                           ;MotorDrive.c: 3355:     pulseOutLATCWork_M0 = 0;
 15863  13C2  01E5               	clrf	_pulseOutLATCWork_M0
 15864                           
 15865                           ;MotorDrive.c: 3358:     dataTRISAWork_M0 = 0x00;
 15866  13C3  01E1               	clrf	_dataTRISAWork_M0
 15867                           
 15868                           ;MotorDrive.c: 3359:     dataTRISBWork_M0 = 0x00;
 15869  13C4  01E0               	clrf	_dataTRISBWork_M0
 15870                           
 15871                           ;MotorDrive.c: 3360:     dataTRISCWork_M0 = 0x00;
 15872  13C5  01DF               	clrf	_dataTRISCWork_M0
 15873                           
 15874                           ;MotorDrive.c: 3362:     m0PulseOutChangeFunc = SetDataTRISxWork_M0_SPK_POL0_OPEN;
 15875  13C6  3030               	movlw	low _SetDataTRISxWork_M0_SPK_POL0_OPEN
 15876  13C7  0021               	movlb	1	; select bank1
 15877  13C8  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15878  13C9  3013               	movlw	high _SetDataTRISxWork_M0_SPK_POL0_OPEN
 15879  13CA  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15880                           
 15881                           ;MotorDrive.c: 3363:     OutRequestFlug = 1;
 15882  13CB  01D6               	clrf	_OutRequestFlug^(0+128)
 15883  13CC  0AD6               	incf	_OutRequestFlug^(0+128),f
 15884                           
 15885                           ;MotorDrive.c: 3364:     OutTrisRequestFlug = 1;
 15886  13CD  01D5               	clrf	_OutTrisRequestFlug^(0+128)
 15887  13CE  0AD5               	incf	_OutTrisRequestFlug^(0+128),f
 15888                           
 15889                           ;MotorDrive.c: 3365:     reqComparatorOnBit |= 0x01;
 15890  13CF  1454               	bsf	_reqComparatorOnBit^(0+128),0
 15891  13D0  0008               	return
 15892  13D1                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF:
 15893                           
 15894                           	psect	text112
 15895  137C                     __ptext112:	
 15896 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_OFF *****************
 15897 ;; Defined at:
 15898 ;;		line 3153 in file "MotorDrive.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;		None
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;		None
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  1    wreg      void 
 15905 ;; Registers used:
 15906 ;;		wreg, status,2, status,0
 15907 ;; Tracked objects:
 15908 ;;		On entry : 1F/1
 15909 ;;		On exit  : 1F/1
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15912 ;;      Params:         0       0       0       0       0       0       0       0
 15913 ;;      Locals:         0       0       0       0       0       0       0       0
 15914 ;;      Temps:          1       0       0       0       0       0       0       0
 15915 ;;      Totals:         1       0       0       0       0       0       0       0
 15916 ;;Total ram usage:        1 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; This function calls:
 15919 ;;		Nothing
 15920 ;; This function is called by:
 15921 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P2
 15922 ;;		_TMR2_Interrupt
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_OFF
 15928  137C                     _SetPulseOutLATxWork_M0_REV_POL1_OFF:
 15929                           
 15930                           ;MotorDrive.c: 3155:     pulseOutLATAWork_M0 = 0;
 15931                           
 15932                           ;incstack = 0
 15933                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_OFF: [wreg+status,2+status,0]
 15934  137C  0020               	movlb	0	; select bank0
 15935  137D  01E7               	clrf	_pulseOutLATAWork_M0
 15936                           
 15937                           ;MotorDrive.c: 3156:     pulseOutLATBWork_M0 = 0;
 15938  137E  01E6               	clrf	_pulseOutLATBWork_M0
 15939                           
 15940                           ;MotorDrive.c: 3157:     pulseOutLATCWork_M0 = 0;
 15941  137F  01E5               	clrf	_pulseOutLATCWork_M0
 15942                           
 15943                           ;MotorDrive.c: 3159:     polarityBit ^= 0x01;
 15944  1380  3001               	movlw	1
 15945  1381  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF
 15946  1382  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_OFF,w
 15947  1383  06F1               	xorwf	_polarityBit,f
 15948                           
 15949                           ;MotorDrive.c: 3161:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P1;
 15950  1384  30E5               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P1
 15951  1385  0021               	movlb	1	; select bank1
 15952  1386  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 15953  1387  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P1
 15954  1388  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 15955                           
 15956                           ;MotorDrive.c: 3162:     OutRequestFlug = 1;
 15957  1389  01D6               	clrf	_OutRequestFlug^(0+128)
 15958  138A  0AD6               	incf	_OutRequestFlug^(0+128),f
 15959  138B  0008               	return
 15960  138C                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF:
 15961                           
 15962                           	psect	text113
 15963  1321                     __ptext113:	
 15964 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P2 *****************
 15965 ;; Defined at:
 15966 ;;		line 3141 in file "MotorDrive.c"
 15967 ;; Parameters:    Size  Location     Type
 15968 ;;		None
 15969 ;; Auto vars:     Size  Location     Type
 15970 ;;		None
 15971 ;; Return value:  Size  Location     Type
 15972 ;;                  1    wreg      void 
 15973 ;; Registers used:
 15974 ;;		wreg, status,2
 15975 ;; Tracked objects:
 15976 ;;		On entry : 1F/1
 15977 ;;		On exit  : 1F/1
 15978 ;;		Unchanged: 0/0
 15979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15980 ;;      Params:         0       0       0       0       0       0       0       0
 15981 ;;      Locals:         0       0       0       0       0       0       0       0
 15982 ;;      Temps:          1       0       0       0       0       0       0       0
 15983 ;;      Totals:         1       0       0       0       0       0       0       0
 15984 ;;Total ram usage:        1 bytes
 15985 ;; Hardware stack levels used:    1
 15986 ;; This function calls:
 15987 ;;		Nothing
 15988 ;; This function is called by:
 15989 ;;		_SetPulseOutLATxWork_M0_REV_POL1_P1
 15990 ;;		_TMR2_Interrupt
 15991 ;; This function uses a non-reentrant model
 15992 ;;
 15993                           
 15994                           
 15995                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P2
 15996  1321                     _SetPulseOutLATxWork_M0_REV_POL1_P2:
 15997                           
 15998                           ;MotorDrive.c: 3143:     pulseOutLATAWork_M0 = 0x10;
 15999                           
 16000                           ;incstack = 0
 16001                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P2: [wreg+status,2]
 16002  1321  3010               	movlw	16
 16003  1322  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P2
 16004  1323  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P2,w
 16005  1324  0020               	movlb	0	; select bank0
 16006  1325  00E7               	movwf	_pulseOutLATAWork_M0
 16007                           
 16008                           ;MotorDrive.c: 3144:     pulseOutLATBWork_M0 = 0x00;
 16009  1326  01E6               	clrf	_pulseOutLATBWork_M0
 16010                           
 16011                           ;MotorDrive.c: 3145:     pulseOutLATCWork_M0 = 0x00;
 16012  1327  01E5               	clrf	_pulseOutLATCWork_M0
 16013                           
 16014                           ;MotorDrive.c: 3147:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_OFF;
 16015  1328  307C               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16016  1329  0021               	movlb	1	; select bank1
 16017  132A  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16018  132B  3013               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_OFF
 16019  132C  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16020                           
 16021                           ;MotorDrive.c: 3148:     OutRequestFlug = 1;
 16022  132D  01D6               	clrf	_OutRequestFlug^(0+128)
 16023  132E  0AD6               	incf	_OutRequestFlug^(0+128),f
 16024  132F  0008               	return
 16025  1330                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2:
 16026                           
 16027                           	psect	text114
 16028  136C                     __ptext114:	
 16029 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_OFF *****************
 16030 ;; Defined at:
 16031 ;;		line 3114 in file "MotorDrive.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;		None
 16034 ;; Auto vars:     Size  Location     Type
 16035 ;;		None
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      void 
 16038 ;; Registers used:
 16039 ;;		wreg, status,2, status,0
 16040 ;; Tracked objects:
 16041 ;;		On entry : 1F/1
 16042 ;;		On exit  : 1F/1
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16045 ;;      Params:         0       0       0       0       0       0       0       0
 16046 ;;      Locals:         0       0       0       0       0       0       0       0
 16047 ;;      Temps:          1       0       0       0       0       0       0       0
 16048 ;;      Totals:         1       0       0       0       0       0       0       0
 16049 ;;Total ram usage:        1 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; This function calls:
 16052 ;;		Nothing
 16053 ;; This function is called by:
 16054 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P2
 16055 ;;		_TMR2_Interrupt
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16061  136C                     _SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16062                           
 16063                           ;MotorDrive.c: 3116:     pulseOutLATAWork_M0 = 0;
 16064                           
 16065                           ;incstack = 0
 16066                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_OFF: [wreg+status,2+status,0]
 16067  136C  0020               	movlb	0	; select bank0
 16068  136D  01E7               	clrf	_pulseOutLATAWork_M0
 16069                           
 16070                           ;MotorDrive.c: 3117:     pulseOutLATBWork_M0 = 0;
 16071  136E  01E6               	clrf	_pulseOutLATBWork_M0
 16072                           
 16073                           ;MotorDrive.c: 3118:     pulseOutLATCWork_M0 = 0;
 16074  136F  01E5               	clrf	_pulseOutLATCWork_M0
 16075                           
 16076                           ;MotorDrive.c: 3120:     polarityBit ^= 0x01;
 16077  1370  3001               	movlw	1
 16078  1371  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF
 16079  1372  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_OFF,w
 16080  1373  06F1               	xorwf	_polarityBit,f
 16081                           
 16082                           ;MotorDrive.c: 3122:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P1;
 16083  1374  30D6               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P1
 16084  1375  0021               	movlb	1	; select bank1
 16085  1376  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16086  1377  3012               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P1
 16087  1378  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16088                           
 16089                           ;MotorDrive.c: 3123:     OutRequestFlug = 1;
 16090  1379  01D6               	clrf	_OutRequestFlug^(0+128)
 16091  137A  0AD6               	incf	_OutRequestFlug^(0+128),f
 16092  137B  0008               	return
 16093  137C                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF:
 16094                           
 16095                           	psect	text115
 16096  1312                     __ptext115:	
 16097 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P2 *****************
 16098 ;; Defined at:
 16099 ;;		line 3102 in file "MotorDrive.c"
 16100 ;; Parameters:    Size  Location     Type
 16101 ;;		None
 16102 ;; Auto vars:     Size  Location     Type
 16103 ;;		None
 16104 ;; Return value:  Size  Location     Type
 16105 ;;                  1    wreg      void 
 16106 ;; Registers used:
 16107 ;;		wreg, status,2
 16108 ;; Tracked objects:
 16109 ;;		On entry : 1F/1
 16110 ;;		On exit  : 1F/1
 16111 ;;		Unchanged: 0/0
 16112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16113 ;;      Params:         0       0       0       0       0       0       0       0
 16114 ;;      Locals:         0       0       0       0       0       0       0       0
 16115 ;;      Temps:          1       0       0       0       0       0       0       0
 16116 ;;      Totals:         1       0       0       0       0       0       0       0
 16117 ;;Total ram usage:        1 bytes
 16118 ;; Hardware stack levels used:    1
 16119 ;; This function calls:
 16120 ;;		Nothing
 16121 ;; This function is called by:
 16122 ;;		_SetPulseOutLATxWork_M0_REV_POL0_P1
 16123 ;;		_TMR2_Interrupt
 16124 ;; This function uses a non-reentrant model
 16125 ;;
 16126                           
 16127                           
 16128                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P2
 16129  1312                     _SetPulseOutLATxWork_M0_REV_POL0_P2:
 16130                           
 16131                           ;MotorDrive.c: 3104:     pulseOutLATAWork_M0 = 0x20;
 16132                           
 16133                           ;incstack = 0
 16134                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P2: [wreg+status,2]
 16135  1312  3020               	movlw	32
 16136  1313  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P2
 16137  1314  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P2,w
 16138  1315  0020               	movlb	0	; select bank0
 16139  1316  00E7               	movwf	_pulseOutLATAWork_M0
 16140                           
 16141                           ;MotorDrive.c: 3105:     pulseOutLATBWork_M0 = 0x00;
 16142  1317  01E6               	clrf	_pulseOutLATBWork_M0
 16143                           
 16144                           ;MotorDrive.c: 3106:     pulseOutLATCWork_M0 = 0x00;
 16145  1318  01E5               	clrf	_pulseOutLATCWork_M0
 16146                           
 16147                           ;MotorDrive.c: 3108:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_OFF;
 16148  1319  306C               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16149  131A  0021               	movlb	1	; select bank1
 16150  131B  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16151  131C  3013               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_OFF
 16152  131D  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16153                           
 16154                           ;MotorDrive.c: 3109:     OutRequestFlug = 1;
 16155  131E  01D6               	clrf	_OutRequestFlug^(0+128)
 16156  131F  0AD6               	incf	_OutRequestFlug^(0+128),f
 16157  1320  0008               	return
 16158  1321                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2:
 16159                           
 16160                           	psect	text116
 16161  1529                     __ptext116:	
 16162 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_OFF *****************
 16163 ;; Defined at:
 16164 ;;		line 3069 in file "MotorDrive.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;		None
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;		None
 16169 ;; Return value:  Size  Location     Type
 16170 ;;                  1    wreg      void 
 16171 ;; Registers used:
 16172 ;;		wreg, status,2, status,0
 16173 ;; Tracked objects:
 16174 ;;		On entry : 1F/1
 16175 ;;		On exit  : 1F/1
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16178 ;;      Params:         0       0       0       0       0       0       0       0
 16179 ;;      Locals:         0       0       0       0       0       0       0       0
 16180 ;;      Temps:          1       0       0       0       0       0       0       0
 16181 ;;      Totals:         1       0       0       0       0       0       0       0
 16182 ;;Total ram usage:        1 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; This function calls:
 16185 ;;		Nothing
 16186 ;; This function is called by:
 16187 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16188 ;;		_TMR2_Interrupt
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           
 16193                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16194  1529                     _SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16195                           
 16196                           ;MotorDrive.c: 3071:     pulseOutLATAWork_M0 = 0;
 16197                           
 16198                           ;incstack = 0
 16199                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_OFF: [wreg+status,2+status,0]
 16200  1529  0020               	movlb	0	; select bank0
 16201  152A  01E7               	clrf	_pulseOutLATAWork_M0
 16202                           
 16203                           ;MotorDrive.c: 3072:     pulseOutLATBWork_M0 = 0;
 16204  152B  01E6               	clrf	_pulseOutLATBWork_M0
 16205                           
 16206                           ;MotorDrive.c: 3073:     pulseOutLATCWork_M0 = 0;
 16207  152C  01E5               	clrf	_pulseOutLATCWork_M0
 16208                           
 16209                           ;MotorDrive.c: 3075:     polarityBit ^= 0x01;
 16210  152D  3001               	movlw	1
 16211  152E  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16212  152F  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_OFF,w
 16213  1530  06F1               	xorwf	_polarityBit,f
 16214                           
 16215                           ;MotorDrive.c: 3077:     if (addShakePulseBit & 0x01) {
 16216  1531  1C70               	btfss	_addShakePulseBit,0
 16217  1532  2D38               	goto	i1l4422
 16218                           
 16219                           ;MotorDrive.c: 3078:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_P0
      +                          ;
 16220  1533  30A9               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16221  1534  0021               	movlb	1	; select bank1
 16222  1535  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16223  1536  3012               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16224  1537  2D3C               	goto	L23
 16225  1538                     i1l4422:	
 16226                           ;MotorDrive.c: 3079:     } else {
 16227                           
 16228                           
 16229                           ;MotorDrive.c: 3080:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P1;
 16230  1538  30C7               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16231  1539  0021               	movlb	1	; select bank1
 16232  153A  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16233  153B  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16234  153C                     L23:
 16235  153C  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16236                           
 16237                           ;MotorDrive.c: 3083:     OutRequestFlug = 1;
 16238  153D  01D6               	clrf	_OutRequestFlug^(0+128)
 16239  153E  0AD6               	incf	_OutRequestFlug^(0+128),f
 16240  153F  0008               	return
 16241  1540                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF:
 16242                           
 16243                           	psect	text117
 16244  1303                     __ptext117:	
 16245 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P2 *****************
 16246 ;; Defined at:
 16247 ;;		line 3057 in file "MotorDrive.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;		None
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;		None
 16252 ;; Return value:  Size  Location     Type
 16253 ;;                  1    wreg      void 
 16254 ;; Registers used:
 16255 ;;		wreg, status,2
 16256 ;; Tracked objects:
 16257 ;;		On entry : 1F/1
 16258 ;;		On exit  : 1F/1
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16261 ;;      Params:         0       0       0       0       0       0       0       0
 16262 ;;      Locals:         0       0       0       0       0       0       0       0
 16263 ;;      Temps:          1       0       0       0       0       0       0       0
 16264 ;;      Totals:         1       0       0       0       0       0       0       0
 16265 ;;Total ram usage:        1 bytes
 16266 ;; Hardware stack levels used:    1
 16267 ;; This function calls:
 16268 ;;		Nothing
 16269 ;; This function is called by:
 16270 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_P1
 16271 ;;		_TMR2_Interrupt
 16272 ;; This function uses a non-reentrant model
 16273 ;;
 16274                           
 16275                           
 16276                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P2
 16277  1303                     _SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16278                           
 16279                           ;MotorDrive.c: 3059:     pulseOutLATAWork_M0 = 0x00;
 16280                           
 16281                           ;incstack = 0
 16282                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P2: [wreg+status,2]
 16283  1303  0020               	movlb	0	; select bank0
 16284  1304  01E7               	clrf	_pulseOutLATAWork_M0
 16285                           
 16286                           ;MotorDrive.c: 3060:     pulseOutLATBWork_M0 = 0x00;
 16287  1305  01E6               	clrf	_pulseOutLATBWork_M0
 16288                           
 16289                           ;MotorDrive.c: 3061:     pulseOutLATCWork_M0 = 0x02;
 16290  1306  3002               	movlw	2
 16291  1307  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2
 16292  1308  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P2,w
 16293  1309  00E5               	movwf	_pulseOutLATCWork_M0
 16294                           
 16295                           ;MotorDrive.c: 3063:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_OFF;
 16296  130A  3029               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16297  130B  0021               	movlb	1	; select bank1
 16298  130C  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16299  130D  3015               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16300  130E  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16301                           
 16302                           ;MotorDrive.c: 3064:     OutRequestFlug = 1;
 16303  130F  01D6               	clrf	_OutRequestFlug^(0+128)
 16304  1310  0AD6               	incf	_OutRequestFlug^(0+128),f
 16305  1311  0008               	return
 16306  1312                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2:
 16307                           
 16308                           	psect	text118
 16309  1512                     __ptext118:	
 16310 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_OFF *****************
 16311 ;; Defined at:
 16312 ;;		line 3024 in file "MotorDrive.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;                  1    wreg      void 
 16319 ;; Registers used:
 16320 ;;		wreg, status,2, status,0
 16321 ;; Tracked objects:
 16322 ;;		On entry : 1F/1
 16323 ;;		On exit  : 1F/1
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16326 ;;      Params:         0       0       0       0       0       0       0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0       0
 16328 ;;      Temps:          1       0       0       0       0       0       0       0
 16329 ;;      Totals:         1       0       0       0       0       0       0       0
 16330 ;;Total ram usage:        1 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; This function calls:
 16333 ;;		Nothing
 16334 ;; This function is called by:
 16335 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P2
 16336 ;;		_TMR2_Interrupt
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16342  1512                     _SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16343                           
 16344                           ;MotorDrive.c: 3026:     pulseOutLATAWork_M0 = 0;
 16345                           
 16346                           ;incstack = 0
 16347                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_OFF: [wreg+status,2+status,0]
 16348  1512  0020               	movlb	0	; select bank0
 16349  1513  01E7               	clrf	_pulseOutLATAWork_M0
 16350                           
 16351                           ;MotorDrive.c: 3027:     pulseOutLATBWork_M0 = 0;
 16352  1514  01E6               	clrf	_pulseOutLATBWork_M0
 16353                           
 16354                           ;MotorDrive.c: 3028:     pulseOutLATCWork_M0 = 0;
 16355  1515  01E5               	clrf	_pulseOutLATCWork_M0
 16356                           
 16357                           ;MotorDrive.c: 3030:     polarityBit ^= 0x01;
 16358  1516  3001               	movlw	1
 16359  1517  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16360  1518  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_OFF,w
 16361  1519  06F1               	xorwf	_polarityBit,f
 16362                           
 16363                           ;MotorDrive.c: 3032:     if (addShakePulseBit & 0x01) {
 16364  151A  1C70               	btfss	_addShakePulseBit,0
 16365  151B  2D21               	goto	i1l4394
 16366                           
 16367                           ;MotorDrive.c: 3033:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_P0
      +                          ;
 16368  151C  309A               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16369  151D  0021               	movlb	1	; select bank1
 16370  151E  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16371  151F  3012               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16372  1520  2D25               	goto	L24
 16373  1521                     i1l4394:	
 16374                           ;MotorDrive.c: 3034:     } else {
 16375                           
 16376                           
 16377                           ;MotorDrive.c: 3035:         m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P1;
 16378  1521  30B8               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16379  1522  0021               	movlb	1	; select bank1
 16380  1523  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16381  1524  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16382  1525                     L24:
 16383  1525  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16384                           
 16385                           ;MotorDrive.c: 3038:     OutRequestFlug = 1;
 16386  1526  01D6               	clrf	_OutRequestFlug^(0+128)
 16387  1527  0AD6               	incf	_OutRequestFlug^(0+128),f
 16388  1528  0008               	return
 16389  1529                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF:
 16390                           
 16391                           	psect	text119
 16392  12F4                     __ptext119:	
 16393 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P2 *****************
 16394 ;; Defined at:
 16395 ;;		line 3012 in file "MotorDrive.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;		None
 16398 ;; Auto vars:     Size  Location     Type
 16399 ;;		None
 16400 ;; Return value:  Size  Location     Type
 16401 ;;                  1    wreg      void 
 16402 ;; Registers used:
 16403 ;;		wreg, status,2
 16404 ;; Tracked objects:
 16405 ;;		On entry : 1F/1
 16406 ;;		On exit  : 1F/1
 16407 ;;		Unchanged: 0/0
 16408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16409 ;;      Params:         0       0       0       0       0       0       0       0
 16410 ;;      Locals:         0       0       0       0       0       0       0       0
 16411 ;;      Temps:          1       0       0       0       0       0       0       0
 16412 ;;      Totals:         1       0       0       0       0       0       0       0
 16413 ;;Total ram usage:        1 bytes
 16414 ;; Hardware stack levels used:    1
 16415 ;; This function calls:
 16416 ;;		Nothing
 16417 ;; This function is called by:
 16418 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_P1
 16419 ;;		_TMR2_Interrupt
 16420 ;; This function uses a non-reentrant model
 16421 ;;
 16422                           
 16423                           
 16424                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P2
 16425  12F4                     _SetPulseOutLATxWork_M0_FWD_POL0_P2:
 16426                           
 16427                           ;MotorDrive.c: 3014:     pulseOutLATAWork_M0 = 0x02;
 16428                           
 16429                           ;incstack = 0
 16430                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P2: [wreg+status,2]
 16431  12F4  3002               	movlw	2
 16432  12F5  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2
 16433  12F6  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P2,w
 16434  12F7  0020               	movlb	0	; select bank0
 16435  12F8  00E7               	movwf	_pulseOutLATAWork_M0
 16436                           
 16437                           ;MotorDrive.c: 3015:     pulseOutLATBWork_M0 = 0x00;
 16438  12F9  01E6               	clrf	_pulseOutLATBWork_M0
 16439                           
 16440                           ;MotorDrive.c: 3016:     pulseOutLATCWork_M0 = 0x00;
 16441  12FA  01E5               	clrf	_pulseOutLATCWork_M0
 16442                           
 16443                           ;MotorDrive.c: 3018:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_OFF;
 16444  12FB  3012               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16445  12FC  0021               	movlb	1	; select bank1
 16446  12FD  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16447  12FE  3015               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16448  12FF  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16449                           
 16450                           ;MotorDrive.c: 3019:     OutRequestFlug = 1;
 16451  1300  01D6               	clrf	_OutRequestFlug^(0+128)
 16452  1301  0AD6               	incf	_OutRequestFlug^(0+128),f
 16453  1302  0008               	return
 16454  1303                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2:
 16455                           
 16456                           	psect	text120
 16457  12E5                     __ptext120:	
 16458 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL0_P1 *****************
 16459 ;; Defined at:
 16460 ;;		line 3090 in file "MotorDrive.c"
 16461 ;; Parameters:    Size  Location     Type
 16462 ;;		None
 16463 ;; Auto vars:     Size  Location     Type
 16464 ;;		None
 16465 ;; Return value:  Size  Location     Type
 16466 ;;                  1    wreg      void 
 16467 ;; Registers used:
 16468 ;;		wreg, status,2
 16469 ;; Tracked objects:
 16470 ;;		On entry : 1F/1
 16471 ;;		On exit  : 1F/1
 16472 ;;		Unchanged: 0/0
 16473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16474 ;;      Params:         0       0       0       0       0       0       0       0
 16475 ;;      Locals:         0       0       0       0       0       0       0       0
 16476 ;;      Temps:          1       0       0       0       0       0       0       0
 16477 ;;      Totals:         1       0       0       0       0       0       0       0
 16478 ;;Total ram usage:        1 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; This function calls:
 16481 ;;		Nothing
 16482 ;; This function is called by:
 16483 ;;		_StartPulseOutM0
 16484 ;;		_SetPulseOutLATxWork_M0_REV_POL1_OFF
 16485 ;;		_TMR2_Interrupt
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489                           
 16490                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL0_P1
 16491  12E5                     _SetPulseOutLATxWork_M0_REV_POL0_P1:
 16492                           
 16493                           ;MotorDrive.c: 3092:     pulseOutLATAWork_M0 = 0x00;
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL0_P1: [wreg+status,2]
 16497  12E5  0020               	movlb	0	; select bank0
 16498  12E6  01E7               	clrf	_pulseOutLATAWork_M0
 16499                           
 16500                           ;MotorDrive.c: 3093:     pulseOutLATBWork_M0 = 0x00;
 16501  12E7  01E6               	clrf	_pulseOutLATBWork_M0
 16502                           
 16503                           ;MotorDrive.c: 3094:     pulseOutLATCWork_M0 = 0x02;
 16504  12E8  3002               	movlw	2
 16505  12E9  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL0_P1
 16506  12EA  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL0_P1,w
 16507  12EB  00E5               	movwf	_pulseOutLATCWork_M0
 16508                           
 16509                           ;MotorDrive.c: 3096:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL0_P2;
 16510  12EC  3012               	movlw	low _SetPulseOutLATxWork_M0_REV_POL0_P2
 16511  12ED  0021               	movlb	1	; select bank1
 16512  12EE  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16513  12EF  3013               	movlw	high _SetPulseOutLATxWork_M0_REV_POL0_P2
 16514  12F0  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16515                           
 16516                           ;MotorDrive.c: 3097:     OutRequestFlug = 1;
 16517  12F1  01D6               	clrf	_OutRequestFlug^(0+128)
 16518  12F2  0AD6               	incf	_OutRequestFlug^(0+128),f
 16519  12F3  0008               	return
 16520  12F4                     __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1:
 16521                           
 16522                           	psect	text121
 16523  12D6                     __ptext121:	
 16524 ;; *************** function _SetPulseOutLATxWork_M0_REV_POL1_P1 *****************
 16525 ;; Defined at:
 16526 ;;		line 3129 in file "MotorDrive.c"
 16527 ;; Parameters:    Size  Location     Type
 16528 ;;		None
 16529 ;; Auto vars:     Size  Location     Type
 16530 ;;		None
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  1    wreg      void 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2
 16535 ;; Tracked objects:
 16536 ;;		On entry : 1F/1
 16537 ;;		On exit  : 1F/1
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16540 ;;      Params:         0       0       0       0       0       0       0       0
 16541 ;;      Locals:         0       0       0       0       0       0       0       0
 16542 ;;      Temps:          1       0       0       0       0       0       0       0
 16543 ;;      Totals:         1       0       0       0       0       0       0       0
 16544 ;;Total ram usage:        1 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; This function calls:
 16547 ;;		Nothing
 16548 ;; This function is called by:
 16549 ;;		_StartPulseOutM0
 16550 ;;		_SetPulseOutLATxWork_M0_REV_POL0_OFF
 16551 ;;		_TMR2_Interrupt
 16552 ;; This function uses a non-reentrant model
 16553 ;;
 16554                           
 16555                           
 16556                           ;psect for function _SetPulseOutLATxWork_M0_REV_POL1_P1
 16557  12D6                     _SetPulseOutLATxWork_M0_REV_POL1_P1:
 16558                           
 16559                           ;MotorDrive.c: 3131:     pulseOutLATAWork_M0 = 0x02;
 16560                           
 16561                           ;incstack = 0
 16562                           ; Regs used in _SetPulseOutLATxWork_M0_REV_POL1_P1: [wreg+status,2]
 16563  12D6  3002               	movlw	2
 16564  12D7  00F5               	movwf	??_SetPulseOutLATxWork_M0_REV_POL1_P1
 16565  12D8  0875               	movf	??_SetPulseOutLATxWork_M0_REV_POL1_P1,w
 16566  12D9  0020               	movlb	0	; select bank0
 16567  12DA  00E7               	movwf	_pulseOutLATAWork_M0
 16568                           
 16569                           ;MotorDrive.c: 3132:     pulseOutLATBWork_M0 = 0x00;
 16570  12DB  01E6               	clrf	_pulseOutLATBWork_M0
 16571                           
 16572                           ;MotorDrive.c: 3133:     pulseOutLATCWork_M0 = 0x00;
 16573  12DC  01E5               	clrf	_pulseOutLATCWork_M0
 16574                           
 16575                           ;MotorDrive.c: 3135:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_REV_POL1_P2;
 16576  12DD  3021               	movlw	low _SetPulseOutLATxWork_M0_REV_POL1_P2
 16577  12DE  0021               	movlb	1	; select bank1
 16578  12DF  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16579  12E0  3013               	movlw	high _SetPulseOutLATxWork_M0_REV_POL1_P2
 16580  12E1  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16581                           
 16582                           ;MotorDrive.c: 3136:     OutRequestFlug = 1;
 16583  12E2  01D6               	clrf	_OutRequestFlug^(0+128)
 16584  12E3  0AD6               	incf	_OutRequestFlug^(0+128),f
 16585  12E4  0008               	return
 16586  12E5                     __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1:
 16587                           
 16588                           	psect	text122
 16589  12C7                     __ptext122:	
 16590 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL0_P1 *****************
 16591 ;; Defined at:
 16592 ;;		line 3000 in file "MotorDrive.c"
 16593 ;; Parameters:    Size  Location     Type
 16594 ;;		None
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;		None
 16597 ;; Return value:  Size  Location     Type
 16598 ;;                  1    wreg      void 
 16599 ;; Registers used:
 16600 ;;		wreg, status,2
 16601 ;; Tracked objects:
 16602 ;;		On entry : 1F/1
 16603 ;;		On exit  : 1F/1
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16606 ;;      Params:         0       0       0       0       0       0       0       0
 16607 ;;      Locals:         0       0       0       0       0       0       0       0
 16608 ;;      Temps:          1       0       0       0       0       0       0       0
 16609 ;;      Totals:         1       0       0       0       0       0       0       0
 16610 ;;Total ram usage:        1 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; This function calls:
 16613 ;;		Nothing
 16614 ;; This function is called by:
 16615 ;;		_StartPulseOutM0
 16616 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16617 ;;		_SetDataTRISxWork_M0_SPK_POL0_SHORT
 16618 ;;		_TMR2_Interrupt
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL0_P1
 16624  12C7                     _SetPulseOutLATxWork_M0_FWD_POL0_P1:
 16625                           
 16626                           ;MotorDrive.c: 3002:     pulseOutLATAWork_M0 = 0x10;
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL0_P1: [wreg+status,2]
 16630  12C7  3010               	movlw	16
 16631  12C8  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1
 16632  12C9  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL0_P1,w
 16633  12CA  0020               	movlb	0	; select bank0
 16634  12CB  00E7               	movwf	_pulseOutLATAWork_M0
 16635                           
 16636                           ;MotorDrive.c: 3003:     pulseOutLATBWork_M0 = 0x00;
 16637  12CC  01E6               	clrf	_pulseOutLATBWork_M0
 16638                           
 16639                           ;MotorDrive.c: 3004:     pulseOutLATCWork_M0 = 0x00;
 16640  12CD  01E5               	clrf	_pulseOutLATCWork_M0
 16641                           
 16642                           ;MotorDrive.c: 3006:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL0_P2;
 16643  12CE  30F4               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL0_P2
 16644  12CF  0021               	movlb	1	; select bank1
 16645  12D0  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16646  12D1  3012               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL0_P2
 16647  12D2  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16648                           
 16649                           ;MotorDrive.c: 3007:     OutRequestFlug = 1;
 16650  12D3  01D6               	clrf	_OutRequestFlug^(0+128)
 16651  12D4  0AD6               	incf	_OutRequestFlug^(0+128),f
 16652  12D5  0008               	return
 16653  12D6                     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1:
 16654                           
 16655                           	psect	text123
 16656  12B8                     __ptext123:	
 16657 ;; *************** function _SetPulseOutLATxWork_M0_FWD_POL1_P1 *****************
 16658 ;; Defined at:
 16659 ;;		line 3045 in file "MotorDrive.c"
 16660 ;; Parameters:    Size  Location     Type
 16661 ;;		None
 16662 ;; Auto vars:     Size  Location     Type
 16663 ;;		None
 16664 ;; Return value:  Size  Location     Type
 16665 ;;                  1    wreg      void 
 16666 ;; Registers used:
 16667 ;;		wreg, status,2
 16668 ;; Tracked objects:
 16669 ;;		On entry : 1F/1
 16670 ;;		On exit  : 1F/1
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16673 ;;      Params:         0       0       0       0       0       0       0       0
 16674 ;;      Locals:         0       0       0       0       0       0       0       0
 16675 ;;      Temps:          1       0       0       0       0       0       0       0
 16676 ;;      Totals:         1       0       0       0       0       0       0       0
 16677 ;;Total ram usage:        1 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; This function calls:
 16680 ;;		Nothing
 16681 ;; This function is called by:
 16682 ;;		_StartPulseOutM0
 16683 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16684 ;;		_SetDataTRISxWork_M0_SPK_POL1_SHORT
 16685 ;;		_TMR2_Interrupt
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689                           
 16690                           ;psect for function _SetPulseOutLATxWork_M0_FWD_POL1_P1
 16691  12B8                     _SetPulseOutLATxWork_M0_FWD_POL1_P1:
 16692                           
 16693                           ;MotorDrive.c: 3047:     pulseOutLATAWork_M0 = 0x20;
 16694                           
 16695                           ;incstack = 0
 16696                           ; Regs used in _SetPulseOutLATxWork_M0_FWD_POL1_P1: [wreg+status,2]
 16697  12B8  3020               	movlw	32
 16698  12B9  00F5               	movwf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1
 16699  12BA  0875               	movf	??_SetPulseOutLATxWork_M0_FWD_POL1_P1,w
 16700  12BB  0020               	movlb	0	; select bank0
 16701  12BC  00E7               	movwf	_pulseOutLATAWork_M0
 16702                           
 16703                           ;MotorDrive.c: 3048:     pulseOutLATBWork_M0 = 0x00;
 16704  12BD  01E6               	clrf	_pulseOutLATBWork_M0
 16705                           
 16706                           ;MotorDrive.c: 3049:     pulseOutLATCWork_M0 = 0x00;
 16707  12BE  01E5               	clrf	_pulseOutLATCWork_M0
 16708                           
 16709                           ;MotorDrive.c: 3051:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_FWD_POL1_P2;
 16710  12BF  3003               	movlw	low _SetPulseOutLATxWork_M0_FWD_POL1_P2
 16711  12C0  0021               	movlb	1	; select bank1
 16712  12C1  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16713  12C2  3013               	movlw	high _SetPulseOutLATxWork_M0_FWD_POL1_P2
 16714  12C3  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16715                           
 16716                           ;MotorDrive.c: 3052:     OutRequestFlug = 1;
 16717  12C4  01D6               	clrf	_OutRequestFlug^(0+128)
 16718  12C5  0AD6               	incf	_OutRequestFlug^(0+128),f
 16719  12C6  0008               	return
 16720  12C7                     __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1:
 16721                           
 16722                           	psect	text124
 16723  12A9                     __ptext124:	
 16724 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *****************
 16725 ;; Defined at:
 16726 ;;		line 3339 in file "MotorDrive.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;		None
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;		None
 16731 ;; Return value:  Size  Location     Type
 16732 ;;                  1    wreg      void 
 16733 ;; Registers used:
 16734 ;;		wreg, status,2
 16735 ;; Tracked objects:
 16736 ;;		On entry : 1F/1
 16737 ;;		On exit  : 1F/1
 16738 ;;		Unchanged: 0/0
 16739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16740 ;;      Params:         0       0       0       0       0       0       0       0
 16741 ;;      Locals:         0       0       0       0       0       0       0       0
 16742 ;;      Temps:          1       0       0       0       0       0       0       0
 16743 ;;      Totals:         1       0       0       0       0       0       0       0
 16744 ;;Total ram usage:        1 bytes
 16745 ;; Hardware stack levels used:    1
 16746 ;; This function calls:
 16747 ;;		Nothing
 16748 ;; This function is called by:
 16749 ;;		_StartPulseOutM0
 16750 ;;		_SetPulseOutLATxWork_M0_FWD_POL1_OFF
 16751 ;;		_TMR2_Interrupt
 16752 ;; This function uses a non-reentrant model
 16753 ;;
 16754                           
 16755                           
 16756                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16757  12A9                     _SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 16758                           
 16759                           ;MotorDrive.c: 3341:     pulseOutLATAWork_M0 = 0x10;
 16760                           
 16761                           ;incstack = 0
 16762                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL0_P0: [wreg+status,2]
 16763  12A9  3010               	movlw	16
 16764  12AA  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0
 16765  12AB  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0,w
 16766  12AC  0020               	movlb	0	; select bank0
 16767  12AD  00E7               	movwf	_pulseOutLATAWork_M0
 16768                           
 16769                           ;MotorDrive.c: 3342:     pulseOutLATBWork_M0 = 0x00;
 16770  12AE  01E6               	clrf	_pulseOutLATBWork_M0
 16771                           
 16772                           ;MotorDrive.c: 3343:     pulseOutLATCWork_M0 = 0x00;
 16773  12AF  01E5               	clrf	_pulseOutLATCWork_M0
 16774                           
 16775                           ;MotorDrive.c: 3345:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL0_OFF;
 16776  12B0  30BF               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16777  12B1  0021               	movlb	1	; select bank1
 16778  12B2  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16779  12B3  3013               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF
 16780  12B4  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16781                           
 16782                           ;MotorDrive.c: 3346:     OutRequestFlug = 1;
 16783  12B5  01D6               	clrf	_OutRequestFlug^(0+128)
 16784  12B6  0AD6               	incf	_OutRequestFlug^(0+128),f
 16785  12B7  0008               	return
 16786  12B8                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0:
 16787                           
 16788                           	psect	text125
 16789  129A                     __ptext125:	
 16790 ;; *************** function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *****************
 16791 ;; Defined at:
 16792 ;;		line 3402 in file "MotorDrive.c"
 16793 ;; Parameters:    Size  Location     Type
 16794 ;;		None
 16795 ;; Auto vars:     Size  Location     Type
 16796 ;;		None
 16797 ;; Return value:  Size  Location     Type
 16798 ;;                  1    wreg      void 
 16799 ;; Registers used:
 16800 ;;		wreg, status,2
 16801 ;; Tracked objects:
 16802 ;;		On entry : 1F/1
 16803 ;;		On exit  : 1F/1
 16804 ;;		Unchanged: 0/0
 16805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16806 ;;      Params:         0       0       0       0       0       0       0       0
 16807 ;;      Locals:         0       0       0       0       0       0       0       0
 16808 ;;      Temps:          1       0       0       0       0       0       0       0
 16809 ;;      Totals:         1       0       0       0       0       0       0       0
 16810 ;;Total ram usage:        1 bytes
 16811 ;; Hardware stack levels used:    1
 16812 ;; This function calls:
 16813 ;;		Nothing
 16814 ;; This function is called by:
 16815 ;;		_StartPulseOutM0
 16816 ;;		_SetPulseOutLATxWork_M0_FWD_POL0_OFF
 16817 ;;		_TMR2_Interrupt
 16818 ;; This function uses a non-reentrant model
 16819 ;;
 16820                           
 16821                           
 16822                           ;psect for function _SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16823  129A                     _SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 16824                           
 16825                           ;MotorDrive.c: 3404:     pulseOutLATAWork_M0 = 0x20;
 16826                           
 16827                           ;incstack = 0
 16828                           ; Regs used in _SetPulseOutLATxWork_M0_SHAKE_POL1_P0: [wreg+status,2]
 16829  129A  3020               	movlw	32
 16830  129B  00F5               	movwf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0
 16831  129C  0875               	movf	??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0,w
 16832  129D  0020               	movlb	0	; select bank0
 16833  129E  00E7               	movwf	_pulseOutLATAWork_M0
 16834                           
 16835                           ;MotorDrive.c: 3405:     pulseOutLATBWork_M0 = 0x00;
 16836  129F  01E6               	clrf	_pulseOutLATBWork_M0
 16837                           
 16838                           ;MotorDrive.c: 3406:     pulseOutLATCWork_M0 = 0x00;
 16839  12A0  01E5               	clrf	_pulseOutLATCWork_M0
 16840                           
 16841                           ;MotorDrive.c: 3408:     m0PulseOutChangeFunc = SetPulseOutLATxWork_M0_SHAKE_POL1_OFF;
 16842  12A1  30D1               	movlw	low _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16843  12A2  0021               	movlb	1	; select bank1
 16844  12A3  00CA               	movwf	_m0PulseOutChangeFunc^(0+128)
 16845  12A4  3013               	movlw	high _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF
 16846  12A5  00CB               	movwf	(_m0PulseOutChangeFunc^(0+128)+1)
 16847                           
 16848                           ;MotorDrive.c: 3409:     OutRequestFlug = 1;
 16849  12A6  01D6               	clrf	_OutRequestFlug^(0+128)
 16850  12A7  0AD6               	incf	_OutRequestFlug^(0+128),f
 16851  12A8  0008               	return
 16852  12A9                     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0:
 16853                           
 16854                           	psect	text126
 16855  1651                     __ptext126:	
 16856 ;; *************** function _ComparatorOn *****************
 16857 ;; Defined at:
 16858 ;;		line 2669 in file "MotorDrive.c"
 16859 ;; Parameters:    Size  Location     Type
 16860 ;;  motor_no        1    wreg     unsigned char 
 16861 ;; Auto vars:     Size  Location     Type
 16862 ;;  motor_no        1    0[COMMON] unsigned char 
 16863 ;; Return value:  Size  Location     Type
 16864 ;;                  1    wreg      void 
 16865 ;; Registers used:
 16866 ;;		wreg, status,2, status,0
 16867 ;; Tracked objects:
 16868 ;;		On entry : 1F/1
 16869 ;;		On exit  : 1F/0
 16870 ;;		Unchanged: 0/0
 16871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16872 ;;      Params:         0       0       0       0       0       0       0       0
 16873 ;;      Locals:         1       0       0       0       0       0       0       0
 16874 ;;      Temps:          0       0       0       0       0       0       0       0
 16875 ;;      Totals:         1       0       0       0       0       0       0       0
 16876 ;;Total ram usage:        1 bytes
 16877 ;; Hardware stack levels used:    1
 16878 ;; This function calls:
 16879 ;;		Nothing
 16880 ;; This function is called by:
 16881 ;;		_TMR2_Interrupt
 16882 ;; This function uses a non-reentrant model
 16883 ;;
 16884                           
 16885                           
 16886                           ;psect for function _ComparatorOn
 16887  1651                     _ComparatorOn:
 16888                           
 16889                           ;incstack = 0
 16890                           ; Regs used in _ComparatorOn: [wreg+status,2+status,0]
 16891                           ;ComparatorOn@motor_no stored from wreg
 16892  1651  00F5               	movwf	ComparatorOn@motor_no
 16893                           
 16894                           ;MotorDrive.c: 2669: void ComparatorOn(UB motor_no);MotorDrive.c: 2670: {;MotorDrive.c: 
      +                          2671:     if (motor_no == 0) {
 16895  1652  0875               	movf	ComparatorOn@motor_no,w
 16896  1653  1D03               	btfss	3,2
 16897  1654  2E61               	goto	i1l4136
 16898                           
 16899                           ;MotorDrive.c: 2672:         CM1CON0 = (0x14 | 0x80);
 16900  1655  3094               	movlw	148
 16901  1656  0022               	movlb	2	; select bank2
 16902  1657  0091               	movwf	17	;volatile
 16903                           
 16904                           ;MotorDrive.c: 2673:         if (polarityBit & 0x01) {
 16905  1658  1C71               	btfss	_polarityBit,0
 16906  1659  2E5C               	goto	i1l4132
 16907                           
 16908                           ;MotorDrive.c: 2675:             CM1CON1 = (0x90 | 0x00);
 16909  165A  3090               	movlw	144
 16910  165B  2E5D               	goto	L25
 16911  165C                     i1l4132:	
 16912                           ;MotorDrive.c: 2676:         } else {
 16913                           
 16914                           
 16915                           ;MotorDrive.c: 2678:             CM1CON1 = (0x90 | 0x01);
 16916  165C  3091               	movlw	145
 16917  165D                     L25:
 16918  165D  0092               	movwf	18	;volatile
 16919                           
 16920                           ;MotorDrive.c: 2680:         PIR2bits.C1IF = 0;
 16921  165E  0020               	movlb	0	; select bank0
 16922  165F  1292               	bcf	18,5	;volatile
 16923                           
 16924                           ;MotorDrive.c: 2682:     } else {
 16925  1660  0008               	return
 16926  1661                     i1l4136:
 16927                           
 16928                           ;MotorDrive.c: 2684:         CM2CON0 = (0x14 | 0x80);
 16929  1661  3094               	movlw	148
 16930  1662  0022               	movlb	2	; select bank2
 16931  1663  0093               	movwf	19	;volatile
 16932                           
 16933                           ;MotorDrive.c: 2685:         if (polarityBit & 0x02) {
 16934  1664  1CF1               	btfss	_polarityBit,1
 16935  1665  2E68               	goto	i1l4142
 16936                           
 16937                           ;MotorDrive.c: 2687:             CM2CON1 = (0x90 | 0x02);
 16938  1666  3092               	movlw	146
 16939  1667  2E69               	goto	L26
 16940  1668                     i1l4142:	
 16941                           ;MotorDrive.c: 2688:         } else {
 16942                           
 16943                           
 16944                           ;MotorDrive.c: 2690:             CM2CON1 = (0x90 | 0x03);
 16945  1668  3093               	movlw	147
 16946  1669                     L26:
 16947  1669  0094               	movwf	20	;volatile
 16948                           
 16949                           ;MotorDrive.c: 2692:         PIR2bits.C2IF = 0;
 16950  166A  0020               	movlb	0	; select bank0
 16951  166B  1312               	bcf	18,6	;volatile
 16952  166C  0008               	return
 16953  166D                     __end_of_ComparatorOn:
 16954                           
 16955                           	psect	text127
 16956  1473                     __ptext127:	
 16957 ;; *************** function _ComparatorOff *****************
 16958 ;; Defined at:
 16959 ;;		line 2650 in file "MotorDrive.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;  motor_no        1    wreg     unsigned char 
 16962 ;; Auto vars:     Size  Location     Type
 16963 ;;  motor_no        1    0[COMMON] unsigned char 
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      void 
 16966 ;; Registers used:
 16967 ;;		wreg, status,2, status,0
 16968 ;; Tracked objects:
 16969 ;;		On entry : 1F/1
 16970 ;;		On exit  : 1F/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16973 ;;      Params:         0       0       0       0       0       0       0       0
 16974 ;;      Locals:         1       0       0       0       0       0       0       0
 16975 ;;      Temps:          0       0       0       0       0       0       0       0
 16976 ;;      Totals:         1       0       0       0       0       0       0       0
 16977 ;;Total ram usage:        1 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; This function calls:
 16980 ;;		Nothing
 16981 ;; This function is called by:
 16982 ;;		_TMR2_Interrupt
 16983 ;; This function uses a non-reentrant model
 16984 ;;
 16985                           
 16986                           
 16987                           ;psect for function _ComparatorOff
 16988  1473                     _ComparatorOff:
 16989                           
 16990                           ;incstack = 0
 16991                           ; Regs used in _ComparatorOff: [wreg+status,2+status,0]
 16992                           ;ComparatorOff@motor_no stored from wreg
 16993  1473  00F5               	movwf	ComparatorOff@motor_no
 16994                           
 16995                           ;MotorDrive.c: 2650: void ComparatorOff(UB motor_no);MotorDrive.c: 2651: {;MotorDrive.c:
      +                           2652:     if (motor_no == 0) {
 16996  1474  0875               	movf	ComparatorOff@motor_no,w
 16997  1475  1D03               	btfss	3,2
 16998  1476  2C7D               	goto	i1l4150
 16999                           
 17000                           ;MotorDrive.c: 2653:         CM1CON0 = 0x14;
 17001  1477  3014               	movlw	20
 17002  1478  0022               	movlb	2	; select bank2
 17003  1479  0091               	movwf	17	;volatile
 17004                           
 17005                           ;MotorDrive.c: 2654:         CM1CON1 = 0x90;
 17006  147A  3090               	movlw	144
 17007  147B  0092               	movwf	18	;volatile
 17008                           
 17009                           ;MotorDrive.c: 2655:     } else {
 17010  147C  2C82               	goto	i1l4152
 17011  147D                     i1l4150:
 17012                           
 17013                           ;MotorDrive.c: 2656:         CM2CON0 = 0x14;
 17014  147D  3014               	movlw	20
 17015  147E  0022               	movlb	2	; select bank2
 17016  147F  0093               	movwf	19	;volatile
 17017                           
 17018                           ;MotorDrive.c: 2657:         CM2CON1 = 0x90;
 17019  1480  3090               	movlw	144
 17020  1481  0094               	movwf	20	;volatile
 17021  1482                     i1l4152:
 17022                           
 17023                           ;MotorDrive.c: 2659:     PIR2bits.C1IF = 0;
 17024  1482  0020               	movlb	0	; select bank0
 17025  1483  1292               	bcf	18,5	;volatile
 17026                           
 17027                           ;MotorDrive.c: 2660:     PIR2bits.C2IF = 0;
 17028  1484  1312               	bcf	18,6	;volatile
 17029  1485  0008               	return
 17030  1486                     __end_of_ComparatorOff:
 17031                           
 17032                           	psect	text128
 17033  11BB                     __ptext128:	
 17034 ;; *************** function _TMR1_ISR *****************
 17035 ;; Defined at:
 17036 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 17037 ;; Parameters:    Size  Location     Type
 17038 ;;		None
 17039 ;; Auto vars:     Size  Location     Type
 17040 ;;		None
 17041 ;; Return value:  Size  Location     Type
 17042 ;;                  1    wreg      void 
 17043 ;; Registers used:
 17044 ;;		wreg, status,2, status,0, pclath, cstack
 17045 ;; Tracked objects:
 17046 ;;		On entry : 1F/0
 17047 ;;		On exit  : 0/0
 17048 ;;		Unchanged: 0/0
 17049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17050 ;;      Params:         0       0       0       0       0       0       0       0
 17051 ;;      Locals:         0       0       0       0       0       0       0       0
 17052 ;;      Temps:          0       0       0       0       0       0       0       0
 17053 ;;      Totals:         0       0       0       0       0       0       0       0
 17054 ;;Total ram usage:        0 bytes
 17055 ;; Hardware stack levels used:    1
 17056 ;; Hardware stack levels required when called:    2
 17057 ;; This function calls:
 17058 ;;		_TMR1_CallBack
 17059 ;;		_TMR1_WriteTimer
 17060 ;; This function is called by:
 17061 ;;		_INTERRUPT_InterruptManager
 17062 ;; This function uses a non-reentrant model
 17063 ;;
 17064                           
 17065                           
 17066                           ;psect for function _TMR1_ISR
 17067  11BB                     _TMR1_ISR:
 17068                           
 17069                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 17070                           
 17071                           ;incstack = 0
 17072                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 17073  11BB  1011               	bcf	17,0	;volatile
 17074                           
 17075                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 17076  11BC  0022               	movlb	2	; select bank2
 17077  11BD  0867               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 17078  11BE  00F6               	movwf	TMR1_WriteTimer@timerVal+1
 17079  11BF  0866               	movf	_timer1ReloadVal^(0+256),w	;volatile
 17080  11C0  00F5               	movwf	TMR1_WriteTimer@timerVal
 17081  11C1  3192  228B  3191   	fcall	_TMR1_WriteTimer
 17082                           
 17083                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 17084  11C4  3191  219A         	fcall	_TMR1_CallBack
 17085  11C6  0008               	return
 17086  11C7                     __end_of_TMR1_ISR:
 17087                           
 17088                           	psect	text129
 17089  128B                     __ptext129:	
 17090 ;; *************** function _TMR1_WriteTimer *****************
 17091 ;; Defined at:
 17092 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 17093 ;; Parameters:    Size  Location     Type
 17094 ;;  timerVal        2    0[COMMON] unsigned short 
 17095 ;; Auto vars:     Size  Location     Type
 17096 ;;		None
 17097 ;; Return value:  Size  Location     Type
 17098 ;;                  1    wreg      void 
 17099 ;; Registers used:
 17100 ;;		wreg
 17101 ;; Tracked objects:
 17102 ;;		On entry : 1F/2
 17103 ;;		On exit  : 1F/0
 17104 ;;		Unchanged: 0/0
 17105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17106 ;;      Params:         2       0       0       0       0       0       0       0
 17107 ;;      Locals:         0       0       0       0       0       0       0       0
 17108 ;;      Temps:          0       0       0       0       0       0       0       0
 17109 ;;      Totals:         2       0       0       0       0       0       0       0
 17110 ;;Total ram usage:        2 bytes
 17111 ;; Hardware stack levels used:    1
 17112 ;; This function calls:
 17113 ;;		Nothing
 17114 ;; This function is called by:
 17115 ;;		_TMR1_ISR
 17116 ;; This function uses a non-reentrant model
 17117 ;;
 17118                           
 17119                           
 17120                           ;psect for function _TMR1_WriteTimer
 17121  128B                     _TMR1_WriteTimer:
 17122                           
 17123                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 17124                           
 17125                           ;incstack = 0
 17126                           ; Regs used in _TMR1_WriteTimer: [wreg]
 17127  128B  0020               	movlb	0	; select bank0
 17128  128C  1D18               	btfss	24,2	;volatile
 17129  128D  2A95               	goto	i1l5376
 17130                           
 17131                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 17132  128E  1018               	bcf	24,0	;volatile
 17133                           
 17134                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 17135  128F  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17136  1290  0097               	movwf	23	;volatile
 17137                           
 17138                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 17139  1291  0875               	movf	TMR1_WriteTimer@timerVal,w
 17140  1292  0096               	movwf	22	;volatile
 17141                           
 17142                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 17143  1293  1418               	bsf	24,0	;volatile
 17144                           
 17145                           ;mcc_generated_files/tmr1.c: 133:     }
 17146  1294  0008               	return
 17147  1295                     i1l5376:
 17148                           
 17149                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 17150  1295  0876               	movf	TMR1_WriteTimer@timerVal+1,w
 17151  1296  0097               	movwf	23	;volatile
 17152                           
 17153                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 17154  1297  0875               	movf	TMR1_WriteTimer@timerVal,w
 17155  1298  0096               	movwf	22	;volatile
 17156  1299  0008               	return
 17157  129A                     __end_of_TMR1_WriteTimer:
 17158                           
 17159                           	psect	text130
 17160  119A                     __ptext130:	
 17161 ;; *************** function _TMR1_CallBack *****************
 17162 ;; Defined at:
 17163 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;		None
 17166 ;; Auto vars:     Size  Location     Type
 17167 ;;		None
 17168 ;; Return value:  Size  Location     Type
 17169 ;;                  1    wreg      void 
 17170 ;; Registers used:
 17171 ;;		wreg, status,2, status,0, pclath, cstack
 17172 ;; Tracked objects:
 17173 ;;		On entry : 1F/0
 17174 ;;		On exit  : 0/0
 17175 ;;		Unchanged: 0/0
 17176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17177 ;;      Params:         0       0       0       0       0       0       0       0
 17178 ;;      Locals:         0       0       0       0       0       0       0       0
 17179 ;;      Temps:          0       0       0       0       0       0       0       0
 17180 ;;      Totals:         0       0       0       0       0       0       0       0
 17181 ;;Total ram usage:        0 bytes
 17182 ;; Hardware stack levels used:    1
 17183 ;; Hardware stack levels required when called:    1
 17184 ;; This function calls:
 17185 ;;		Absolute function
 17186 ;;		_TMR1_DefaultInterruptHandler
 17187 ;; This function is called by:
 17188 ;;		_TMR1_ISR
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _TMR1_CallBack
 17194  119A                     _TMR1_CallBack:
 17195                           
 17196                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 17197                           
 17198                           ;incstack = 0
 17199                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 17200  119A  0022               	movlb	2	; select bank2
 17201  119B  0864               	movf	_TMR1_InterruptHandler^(0+256),w
 17202  119C  0465               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 17203  119D  1903               	btfsc	3,2
 17204  119E  0008               	return
 17205                           
 17206                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 17207  119F  0865               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 17208  11A0  008A               	movwf	10
 17209  11A1  0864               	movf	_TMR1_InterruptHandler^(0+256),w
 17210  11A2  000A               	callw
 17211  11A3  3191               	pagesel	$
 17212  11A4  0008               	return
 17213  11A5                     __end_of_TMR1_CallBack:
 17214                           
 17215                           	psect	text131
 17216  1137                     __ptext131:	
 17217 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 17218 ;; Defined at:
 17219 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 17220 ;; Parameters:    Size  Location     Type
 17221 ;;		None
 17222 ;; Auto vars:     Size  Location     Type
 17223 ;;		None
 17224 ;; Return value:  Size  Location     Type
 17225 ;;                  1    wreg      void 
 17226 ;; Registers used:
 17227 ;;		None
 17228 ;; Tracked objects:
 17229 ;;		On entry : 1F/2
 17230 ;;		On exit  : 1F/2
 17231 ;;		Unchanged: 1F/0
 17232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17233 ;;      Params:         0       0       0       0       0       0       0       0
 17234 ;;      Locals:         0       0       0       0       0       0       0       0
 17235 ;;      Temps:          0       0       0       0       0       0       0       0
 17236 ;;      Totals:         0       0       0       0       0       0       0       0
 17237 ;;Total ram usage:        0 bytes
 17238 ;; Hardware stack levels used:    1
 17239 ;; This function calls:
 17240 ;;		Nothing
 17241 ;; This function is called by:
 17242 ;;		_TMR1_Initialize
 17243 ;;		_TMR1_CallBack
 17244 ;; This function uses a non-reentrant model
 17245 ;;
 17246                           
 17247                           
 17248                           ;psect for function _TMR1_DefaultInterruptHandler
 17249  1137                     _TMR1_DefaultInterruptHandler:
 17250                           
 17251                           ;incstack = 0
 17252                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 17253  1137  0008               	return
 17254  1138                     __end_of_TMR1_DefaultInterruptHandler:
 17255  007E                     btemp	set	126	;btemp
 17256  007E                     int$flags	set	126
 17257  007E                     wtemp0	set	126
 17258  2138                     
 17259                           	psect	config
 17260                           
 17261                           ;Config register CONFIG1 @ 0x8007
 17262                           ;	Oscillator Selection Bits
 17263                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17264                           ;	Watchdog Timer Enable
 17265                           ;	WDTE = OFF, WDT disabled
 17266                           ;	Power-up Timer Enable
 17267                           ;	PWRTE = OFF, PWRT disabled
 17268                           ;	MCLR Pin Function Select
 17269                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17270                           ;	Flash Program Memory Code Protection
 17271                           ;	CP = OFF, Program memory code protection is disabled
 17272                           ;	Brown-out Reset Enable
 17273                           ;	BOREN = ON, Brown-out Reset enabled
 17274                           ;	Clock Out Enable
 17275                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17276                           ;	Internal/External Switchover Mode
 17277                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 17278                           ;	Fail-Safe Clock Monitor Enable
 17279                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17280  8007                     	org	32775
 17281  8007  3FE4               	dw	16356
 17282                           
 17283                           ;Config register CONFIG2 @ 0x8008
 17284                           ;	Flash Memory Self-Write Protection
 17285                           ;	WRT = OFF, Write protection off
 17286                           ;	Stack Overflow/Underflow Reset Enable
 17287                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17288                           ;	Brown-out Reset Voltage Selection
 17289                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17290                           ;	Low-Power Brown Out Reset
 17291                           ;	LPBOR = OFF, Low-Power BOR is disabled
 17292                           ;	Low-Voltage Programming Enable
 17293                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
 17294  8008                     	org	32776
 17295  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    94
    Data        0
    BSS         232
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     47      80
    BANK1            80      0      80
    BANK2            80      4      78
    BANK3            72      0      46
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    SPIControl_ExecuteCommand$2140	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SPIControl_ExecuteCommand$2135	const PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    SpiCmmandFunction	const PTR FTN(unsigned char ,)void [14] size(2) Largest target is 1
		 -> SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), SpiCmdFunc_StopDetectVrs(), 
		 -> SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), SpiCmdFunc_FwdPulseWithCorrect(), 
		 -> SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), SpiCmdFunc_RevPulseNormal(), 
		 -> SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), 

    CorrectPosition@pos	PTR short  size(2) Largest target is 92
		 -> detectBasePosition(BANK2[4]), missingDetectFinePosition(BANK1[2]), detectLoadPosition(BIGRAM[92]), currentPosition(BANK0[4]), 
		 -> targetPosition(BANK2[4]), 

    detectLoadPositionTypePtr	PTR unsigned char [2] size(1) Largest target is 46
		 -> detectLoadPositionType(BANK2[46]), 

    detectLoadPositionPtr	PTR short [2] size(2) Largest target is 92
		 -> detectLoadPosition(BIGRAM[92]), 

    sp__GetAfterDetectLoadFunc	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    SetAfterDetectLoadFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), 

    SetAfterMotorStopFunc@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 

    cbAfterMotorStopFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), SPIControl_SetNotification(), 
		 -> NULL(NULL[0]), 

    WatchMotorDriveFinish@func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> SetFwdPulseWithCorrectProc(), SpiCmdFunc_Search1008Position(), SpiCmdFunc_DisableExcitating(), SpiCmdFunc_EnableExcitating(), 
		 -> SpiCmdFunc_StopDetectVrs(), SpiCmdFunc_StartDetectVrs(), SpiCmdFunc_RevPulsePositionCtl(), SpiCmdFunc_FwdPulsePositionCtl(), 
		 -> SpiCmdFunc_FwdPulseWithCorrect(), SpiCmdFunc_SearchBasePosition(), SpiCmdFunc_SearchLoadPosition(), SpiCmdFunc_FwdPulseWithShake(), 
		 -> SpiCmdFunc_RevPulseNormal(), SpiCmdFunc_FwdPulseNormal(), SpiCmdFunc_Test(), VerifyHandPosition_LoadPosition(), 
		 -> SPIControl_SetNotification(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    cbAfterDetectLoadFunc	PTR FTN(unsigned char ,)void [2] size(2) Largest target is 1
		 -> VerifyHandPosition_LoadPosition(), AfterDetectedLoadPosition(), NULL(NULL[0]), 

    spkOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_SPK_OPEN(), SetDataTRISxWork_SPK_SHORT(), Absolute function(), 

    m1PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M1_SPK_POL1_SHORT(), SetDataTRISxWork_M1_SPK_POL1_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL1_OFF(), SetDataTRISxWork_M1_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M1_SPK_POL0_OPEN(), SetPulseOutLATxWork_M1_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL1_OFF(), SetPulseOutLATxWork_M1_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_REV_POL0_OFF(), SetPulseOutLATxWork_M1_REV_POL0_P2(), SetPulseOutLATxWork_M1_FWD_POL1_OFF(), SetPulseOutLATxWork_M1_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_OFF(), SetPulseOutLATxWork_M1_FWD_POL0_P2(), SetPulseOutLATxWork_M1_REV_POL0_P1(), SetPulseOutLATxWork_M1_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M1_FWD_POL0_P1(), SetPulseOutLATxWork_M1_FWD_POL1_P1(), SetPulseOutLATxWork_M1_SHAKE_POL0_P0(), SetPulseOutLATxWork_M1_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    m0PulseOutChangeFunc	PTR FTN()void  size(2) Largest target is 1
		 -> SetDataTRISxWork_M0_SPK_POL1_SHORT(), SetDataTRISxWork_M0_SPK_POL1_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL1_OFF(), SetDataTRISxWork_M0_SPK_POL0_SHORT(), 
		 -> SetDataTRISxWork_M0_SPK_POL0_OPEN(), SetPulseOutLATxWork_M0_SHAKE_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL1_OFF(), SetPulseOutLATxWork_M0_REV_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_REV_POL0_OFF(), SetPulseOutLATxWork_M0_REV_POL0_P2(), SetPulseOutLATxWork_M0_FWD_POL1_OFF(), SetPulseOutLATxWork_M0_FWD_POL1_P2(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_OFF(), SetPulseOutLATxWork_M0_FWD_POL0_P2(), SetPulseOutLATxWork_M0_REV_POL0_P1(), SetPulseOutLATxWork_M0_REV_POL1_P1(), 
		 -> SetPulseOutLATxWork_M0_FWD_POL0_P1(), SetPulseOutLATxWork_M0_FWD_POL1_P1(), SetPulseOutLATxWork_M0_SHAKE_POL0_P0(), SetPulseOutLATxWork_M0_SHAKE_POL1_P0(), 
		 -> Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_Interrupt_SPK(), TMR2_Interrupt(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_Interrupt
    _TMR2_Interrupt_SPK->_SetDataTRISxWork_SPK_OPEN
    _TMR2_Interrupt_SPK->_SetDataTRISxWork_SPK_SHORT
    _TMR2_Interrupt->_VrsCheck
    _TMR1_ISR->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _SPIControl_RecieveComannd->_WatchMotorDriveFinish
    _WatchMotorDriveFinish->_VerifyHandPosition_LoadPosition
    _VerifyHandPosition_LoadPosition->_MoveTargetPosition
    _SetMotorCorrectPositionStart->_InitPositionSearch
    _AfterDetectedLoadPosition->_MoveTargetPosition
    _UpdateCurrentPositionByFinePosition->___wmul
    _UpdataHandPosition->_CorrectPosition
    _SaveLoadPosition->___wmul
    _MoveTargetPosition->_CalcMotorStepCounter
    _DetermineBasePosition->_CorrectPosition
    _SPIControl_ExecuteCommand->_SpiCmdFunc_FwdPulseWithCorrect
    _SetMotorStopSPK->_SetExcitatingOutOffData
    _SetMotorStopSPK->_TMR2_SetInterruptHandler
    _SetExcitatingOutOffData->_SetOutPutLATX
    _SetMotorStartSPK->_ExcitatingOutOn
    _SetMotorStartSPK->_TMR2_SetInterruptHandler
    _ExcitatingOutOn->_SetOutPutLATX
    _SetMotorPositionSearchStart->_InitPositionSearch
    _InitPositionSearch->___wmul
    _UpdateTargetPosition->_CorrectPosition
    _CalcMotorStepCounter->_PriorUpdateCorrentPosition
    _SetMotorStepCounter->_PriorUpdateCorrentPosition
    _PriorUpdateCorrentPosition->_CorrectPosition
    _CorrectPosition->___wmul
    _SetMotorStart->_StartPulseOutM0
    _SetMotorStart->_StartPulseOutM1

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_SPIControl_RecieveComannd
    _SPIControl_RecieveComannd->_WatchMotorDriveFinish

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  233837
                                              3 BANK2      1     1      0
             _InitPulsePositionTable
          _SPIControl_RecieveComannd
                           _SPI_Open
                  _SYSTEM_Initialize
              _SetMotorAddShakePulse
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
                     _TMR1_StopTimer
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorAddShakePulse                                4     3      1     242
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     512
                     _DAC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     391
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Open                                             4     4      0      88
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPIControl_RecieveComannd                            1     1      0  226918
                                              2 BANK2      1     1      0
          _SPIControl_ExecuteCommand
                       _SPI_ReadByte
              _WatchMotorDriveFinish
 ---------------------------------------------------------------------------------
 (2) _WatchMotorDriveFinish                                3     3      0  151040
                                             46 BANK0      1     1      0
                                              0 BANK2      2     2      0
          _AfterDetectedLoadPosition *
         _SPIControl_SetNotification *
         _SetFwdPulseWithCorrectProc *
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
    _VerifyHandPosition_LoadPosition *
 ---------------------------------------------------------------------------------
 (3) _VerifyHandPosition_LoadPosition                     19    18      1   21394
                                             29 BANK0     17    16      1
                    _CorrectPosition
                 _MoveTargetPosition
       _SetMotorCorrectPositionStart
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorCorrectPositionStart                         3     3      0    6392
                                             16 BANK0      3     3      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
 ---------------------------------------------------------------------------------
 (3) _SPIControl_SetNotification                           2     1      1       0
                                             29 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _AfterDetectedLoadPosition                           11    10      1   42663
                                             29 BANK0     11    10      1
               _ActivateHandPosition
                    _CorrectPosition
              _DetermineBasePosition
                 _InitPositionSearch
                 _MoveTargetPosition
                   _SaveLoadPosition
             _SetAfterDetectLoadFunc
              _SetAfterMotorStopFunc
                       _SetDriveType
                 _SetMotorBitMotorNo
                      _SetMotorStart
                 _UpdataHandPosition
_UpdateCurrentPositionByFinePosition
 ---------------------------------------------------------------------------------
 (4) _UpdateCurrentPositionByFinePosition                 14    14      0    5517
                                              6 BANK0     12    12      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _UpdataHandPosition                                  12    12      0    6752
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _SetMotorBitMotorNo                                   3     3      0      62
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SaveLoadPosition                                    18    18      0    5480
                                              6 BANK0     18    18      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _MoveTargetPosition                                   2     2      0    7528
                                             27 BANK0      2     2      0
               _CalcMotorStepCounter
                  _SetMotorFrequency
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (4) _DetermineBasePosition                               12    12      0    7273
                                             13 BANK0     12    12      0
                    _CorrectPosition
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ActivateHandPosition                                 3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _SPI_ReadByte                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPIControl_ExecuteCommand                            5     5      0   75878
                                             32 BANK0      5     5      0
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
        _SpiCmdFunc_EnableExcitating *
          _SpiCmdFunc_FwdPulseNormal *
     _SpiCmdFunc_FwdPulsePositionCtl *
     _SpiCmdFunc_FwdPulseWithCorrect *
       _SpiCmdFunc_FwdPulseWithShake *
          _SpiCmdFunc_RevPulseNormal *
     _SpiCmdFunc_RevPulsePositionCtl *
      _SpiCmdFunc_Search1008Position *
      _SpiCmdFunc_SearchBasePosition *
      _SpiCmdFunc_SearchLoadPosition *
          _SpiCmdFunc_StartDetectVrs *
           _SpiCmdFunc_StopDetectVrs *
                    _SpiCmdFunc_Test *
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Test                                      1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StopDetectVrs                             1     0      1     391
                                             29 BANK0      1     0      1
                    _SetMotorStopSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStopSPK                                      0     0      0     391
            _SetExcitatingOutOffData
                   _SpkComparatorOff
           _TMR2_SetInterruptHandler
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (5) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOff                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetExcitatingOutOffData                              1     1      0       0
                                              1 BANK0      1     1      0
                      _SetOutPutLATX
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_StartDetectVrs                            1     0      1     391
                                             29 BANK0      1     0      1
                   _SetMotorStartSPK
 ---------------------------------------------------------------------------------
 (4) _SetMotorStartSPK                                     0     0      0     391
                    _ExcitatingOutOn
                    _SpkComparatorOn
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR2_SetInterruptHandler                             2     0      2     391
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SpkComparatorOn                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ExcitatingOutOn                                      1     1      0       0
                                              1 BANK0      1     1      0
                      _SetOutPutLATX
 ---------------------------------------------------------------------------------
 (6) _SetOutPutLATX                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchLoadPosition                        1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_SearchBasePosition                        2     1      1   13319
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_Search1008Position                        2     1      1   13449
                                             29 BANK0      2     1      1
             _DeactivateHandPosition
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
        _SetMotorPositionSearchStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (4) _SetMotorPositionSearchStart                          1     1      0    6454
                                             16 BANK0      1     1      0
                 _InitPositionSearch
             _SetAfterDetectLoadFunc
                      _SetMotorStart
 ---------------------------------------------------------------------------------
 (5) _InitPositionSearch                                  10    10      0    5666
                                              6 BANK0     10    10      0
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4686
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     416
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _DeactivateHandPosition                               3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_RevPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithShake                         1     0      1       0
                                             29 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseWithCorrect                       3     2      1   12351
                                             29 BANK0      3     2      1
                   _GetIsMotorActive
              _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
                       _SetMotorStop
 ---------------------------------------------------------------------------------
 (4) _SetMotorStop                                         3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _SetFwdPulseWithCorrectProc                           4     3      1   11762
                                             29 BANK0      4     3      1
               _CalcMotorStepCounter
             _SetAfterDetectLoadFunc
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (5) _SetAfterDetectLoadFunc                               3     1      2     602
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _SetAfterMotorStopFunc                                3     1      2     332
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetIsMotorActive                                     4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulsePositionCtl                       2     1      1   10696
                                             29 BANK0      2     1      1
               _CalcMotorStepCounter
                       _SetDriveType
                  _SetMotorFrequency
                      _SetMotorStart
               _UpdateTargetPosition
 ---------------------------------------------------------------------------------
 (4) _UpdateTargetPosition                                 5     3      2    2082
                                             13 BANK0      5     3      2
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (5) _CalcMotorStepCounter                                11    11      0    5170
                                             16 BANK0     11    11      0
                    _CorrectPosition
         _PriorUpdateCorrentPosition
                  _SetMotorDirection
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_FwdPulseNormal                            2     1      1    6834
                                             29 BANK0      2     1      1
                       _SetDriveType
                  _SetMotorDirection
                  _SetMotorFrequency
                      _SetMotorStart
                _SetMotorStepCounter
 ---------------------------------------------------------------------------------
 (1) _SetMotorStepCounter                                  3     1      2    2538
                                             16 BANK0      3     1      2
         _PriorUpdateCorrentPosition
 ---------------------------------------------------------------------------------
 (2) _PriorUpdateCorrentPosition                           3     3      0    1905
                                             13 BANK0      3     3      0
                    _CorrectPosition
 ---------------------------------------------------------------------------------
 (3) _CorrectPosition                                      7     3      4    1688
                                              6 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetMotorStart                                        1     1      0      31
                                              1 BANK0      1     1      0
                    _StartPulseOutM0
                    _StartPulseOutM1
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM1                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _StartPulseOutM0                                      1     1      0       0
                                              0 BANK0      1     1      0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMotorFrequency                                    4     2      2    2234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _SetMotorDirection                                    4     3      1     852
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _SetDriveType                                         4     3      1    1024
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_EnableExcitating                          1     0      1      62
                                             29 BANK0      1     0      1
           _SetMotorEnableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorEnableExcitating                             3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SpiCmdFunc_DisableExcitating                         1     0      1      62
                                             29 BANK0      1     0      1
          _SetMotorDisableExcitating
 ---------------------------------------------------------------------------------
 (4) _SetMotorDisableExcitating                            3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitPulsePositionTable                               2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     295
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0      66
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR2_CallBack                                       0     0      0      66
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                     _TMR2_Interrupt *
                 _TMR2_Interrupt_SPK *
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt_SPK                                  1     1      0       0
                                              1 COMMON     1     1      0
                   Absolute function *
          _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_SHORT                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_SPK_OPEN                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_Interrupt                                      3     3      0      66
                                              2 COMMON     3     3      0
                   Absolute function *
                      _ComparatorOff
                       _ComparatorOn
  _SetDataTRISxWork_M0_SPK_POL0_OPEN *
 _SetDataTRISxWork_M0_SPK_POL0_SHORT *
  _SetDataTRISxWork_M0_SPK_POL1_OPEN *
 _SetDataTRISxWork_M0_SPK_POL1_SHORT *
  _SetDataTRISxWork_M1_SPK_POL0_OPEN *
 _SetDataTRISxWork_M1_SPK_POL0_SHORT *
  _SetDataTRISxWork_M1_SPK_POL1_OPEN *
 _SetDataTRISxWork_M1_SPK_POL1_SHORT *
_SetPulseOutLATxWork_M0_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
_SetPulseOutLATxWork_M0_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
_SetPulseOutLATxWork_M0_REV_POL0_OFF *
 _SetPulseOutLATxWork_M0_REV_POL0_P1 *
 _SetPulseOutLATxWork_M0_REV_POL0_P2 *
_SetPulseOutLATxWork_M0_REV_POL1_OFF *
 _SetPulseOutLATxWork_M0_REV_POL1_P1 *
 _SetPulseOutLATxWork_M0_REV_POL1_P2 *
_SetPulseOutLATxWork_M0_SHAKE_POL0_O *
_SetPulseOutLATxWork_M0_SHAKE_POL0_P *
_SetPulseOutLATxWork_M0_SHAKE_POL1_O *
_SetPulseOutLATxWork_M0_SHAKE_POL1_P *
_SetPulseOutLATxWork_M1_FWD_POL0_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
_SetPulseOutLATxWork_M1_FWD_POL1_OFF *
 _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
 _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
_SetPulseOutLATxWork_M1_REV_POL0_OFF *
 _SetPulseOutLATxWork_M1_REV_POL0_P1 *
 _SetPulseOutLATxWork_M1_REV_POL0_P2 *
_SetPulseOutLATxWork_M1_REV_POL1_OFF *
 _SetPulseOutLATxWork_M1_REV_POL1_P1 *
 _SetPulseOutLATxWork_M1_REV_POL1_P2 *
_SetPulseOutLATxWork_M1_SHAKE_POL0_O *
_SetPulseOutLATxWork_M1_SHAKE_POL0_P *
_SetPulseOutLATxWork_M1_SHAKE_POL1_O *
_SetPulseOutLATxWork_M1_SHAKE_POL1_P *
                           _VrsCheck
                   i1_TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (12) i1_TMR2_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _VrsCheck                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M1_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_P0                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF               0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_REV_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL1_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P2                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_P1                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetPulseOutLATxWork_M0_FWD_POL0_OFF                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M1_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL1_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_SHORT                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _SetDataTRISxWork_M0_SPK_POL0_OPEN                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOn                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _ComparatorOff                                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPulsePositionTable
   _SPIControl_RecieveComannd
     _SPIControl_ExecuteCommand
       _GetIsMotorActive
       _SetAfterMotorStopFunc
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _ExcitatingOutOn
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
     _SPI_ReadByte
     _WatchMotorDriveFinish
       _AfterDetectedLoadPosition *
         _ActivateHandPosition
         _CorrectPosition
           ___wmul (ARG)
         _DetermineBasePosition
           _CorrectPosition
             ___wmul (ARG)
           ___bmul
           ___wmul
         _InitPositionSearch
           ___bmul
           ___wmul
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SaveLoadPosition
           ___bmul
           ___wmul
         _SetAfterDetectLoadFunc
         _SetAfterMotorStopFunc
         _SetDriveType
         _SetMotorBitMotorNo
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdataHandPosition
           _CorrectPosition
             ___wmul (ARG)
           ___wmul
         _UpdateCurrentPositionByFinePosition
           ___bmul
           ___wmul
       _SPIControl_SetNotification *
       _SetFwdPulseWithCorrectProc *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetAfterDetectLoadFunc
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_DisableExcitating *
         _SetMotorDisableExcitating
       _SpiCmdFunc_EnableExcitating *
         _SetMotorEnableExcitating
       _SpiCmdFunc_FwdPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_FwdPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_FwdPulseWithCorrect *
         _GetIsMotorActive
         _SetAfterMotorStopFunc
         _SetFwdPulseWithCorrectProc
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetAfterDetectLoadFunc
           _SetDriveType
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
           _UpdateTargetPosition
             _CorrectPosition
               ___wmul (ARG)
         _SetMotorStop
       _SpiCmdFunc_FwdPulseWithShake *
       _SpiCmdFunc_RevPulseNormal *
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_RevPulsePositionCtl *
         _CalcMotorStepCounter
           _CorrectPosition
             ___wmul (ARG)
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
           _SetMotorDirection
         _SetDriveType
         _SetMotorFrequency
         _SetMotorStart
           _StartPulseOutM0
             _TMR2_StartTimer
           _StartPulseOutM1
             _TMR2_StartTimer
         _UpdateTargetPosition
           _CorrectPosition
             ___wmul (ARG)
       _SpiCmdFunc_Search1008Position *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchBasePosition *
         _DeactivateHandPosition
         _SetDriveType
         _SetMotorDirection
         _SetMotorFrequency
         _SetMotorPositionSearchStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorStepCounter
           _PriorUpdateCorrentPosition
             _CorrectPosition
               ___wmul (ARG)
       _SpiCmdFunc_SearchLoadPosition *
       _SpiCmdFunc_StartDetectVrs *
         _SetMotorStartSPK
           _ExcitatingOutOn
             _SetOutPutLATX
           _SpkComparatorOn
           _TMR2_SetInterruptHandler
           _TMR2_StartTimer
       _SpiCmdFunc_StopDetectVrs *
         _SetMotorStopSPK
           _SetExcitatingOutOffData
             _SetOutPutLATX
           _SpkComparatorOff
           _TMR2_SetInterruptHandler
           _TMR2_StopTimer
       _SpiCmdFunc_Test *
       _VerifyHandPosition_LoadPosition *
         _CorrectPosition
           ___wmul (ARG)
         _MoveTargetPosition
           _CalcMotorStepCounter
             _CorrectPosition
               ___wmul (ARG)
             _PriorUpdateCorrentPosition
               _CorrectPosition
                 ___wmul (ARG)
             _SetMotorDirection
           _SetMotorFrequency
           _SetMotorStart
             _StartPulseOutM0
               _TMR2_StartTimer
             _StartPulseOutM1
               _TMR2_StartTimer
         _SetMotorCorrectPositionStart
           _InitPositionSearch
             ___bmul
             ___wmul
           _SetAfterDetectLoadFunc
         ___bmul
         ___wmul
   _SPI_Open
   _SYSTEM_Initialize
     _DAC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _SetMotorAddShakePulse
   _SetMotorDirection
   _SetMotorFrequency
   _SetMotorStart
     _StartPulseOutM0
       _TMR2_StartTimer
     _StartPulseOutM1
       _TMR2_StartTimer
   _SetMotorStepCounter
     _PriorUpdateCorrentPosition
       _CorrectPosition
         ___wmul (ARG)
   _TMR1_StopTimer
   _TMR2_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_Interrupt *
         Absolute function(Fake) *
         _ComparatorOff *
         _ComparatorOn *
         _SetDataTRISxWork_M0_SPK_POL0_OPEN *
         _SetDataTRISxWork_M0_SPK_POL0_SHORT *
         _SetDataTRISxWork_M0_SPK_POL1_OPEN *
         _SetDataTRISxWork_M0_SPK_POL1_SHORT *
         _SetDataTRISxWork_M1_SPK_POL0_OPEN *
         _SetDataTRISxWork_M1_SPK_POL0_SHORT *
         _SetDataTRISxWork_M1_SPK_POL1_OPEN *
         _SetDataTRISxWork_M1_SPK_POL1_SHORT *
         _SetPulseOutLATxWork_M0_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M0_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M0_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M0_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M0_REV_POL0_OFF *
         _SetPulseOutLATxWork_M0_REV_POL0_P1 *
         _SetPulseOutLATxWork_M0_REV_POL0_P2 *
         _SetPulseOutLATxWork_M0_REV_POL1_OFF *
         _SetPulseOutLATxWork_M0_REV_POL1_P1 *
         _SetPulseOutLATxWork_M0_REV_POL1_P2 *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 *
         _SetPulseOutLATxWork_M1_FWD_POL0_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL0_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL0_P2 *
         _SetPulseOutLATxWork_M1_FWD_POL1_OFF *
         _SetPulseOutLATxWork_M1_FWD_POL1_P1 *
         _SetPulseOutLATxWork_M1_FWD_POL1_P2 *
         _SetPulseOutLATxWork_M1_REV_POL0_OFF *
         _SetPulseOutLATxWork_M1_REV_POL0_P1 *
         _SetPulseOutLATxWork_M1_REV_POL0_P2 *
         _SetPulseOutLATxWork_M1_REV_POL1_OFF *
         _SetPulseOutLATxWork_M1_REV_POL1_P1 *
         _SetPulseOutLATxWork_M1_REV_POL1_P2 *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF *
         _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 *
         _VrsCheck *
         i1_TMR2_StopTimer *
       _TMR2_Interrupt_SPK *
         Absolute function(Fake) *
         _SetDataTRISxWork_SPK_OPEN *
         _SetDataTRISxWork_SPK_SHORT *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     126       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2F      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      4      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               48      0      2E      12       63.9%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     126      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Aug 23 13:31:59 2021

                  __end_of_SetAfterDetectLoadFunc 1190                             __end_of_SetOutPutLATX 0B1A  
                                  _SPI_Initialize 1190                        MoveTargetPosition@motor_no 003C  
                __end_of_TMR2_SetInterruptHandler 1172                SetFwdPulseWithCorrectProc@motor_no 003D  
                            SetMotorDirection@dir 0020                                    ??_ComparatorOn 0075  
                               _motorBitOperation 0074                        __end_of_offsetBasePosition 1852  
                                  ___bmul@product 0022                         _detectLoadPositionTypePtr 00BC  
             SetFwdPulseWithCorrectProc@motor_bit 0040             SpiCmdFunc_SearchBasePosition@motor_no 003D  
                                 ??_ComparatorOff 0075                               ___wmul@multiplicand 0022  
                                    _pulseOutLATA 006A                                      _pulseOutLATB 0069  
                                    _pulseOutLATC 0068                      CalcMotorStepCounter@motor_no 003A  
                              _m1PulseOutStepWork 00E1        __end_of_SetPulseOutLATxWork_M1_REV_POL0_P1 1221  
     __size_of_SetPulseOutLATxWork_M1_REV_POL0_P1 000D              ??_SetPulseOutLATxWork_M1_REV_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL0_P1 0075                _SetPulseOutLATxWork_M1_REV_POL0_P1 1214  
      __end_of_SetPulseOutLATxWork_M1_REV_POL0_P2 1248       __size_of_SetPulseOutLATxWork_M1_REV_POL0_P2 000D  
            ??_SetPulseOutLATxWork_M1_REV_POL0_P2 0075               ?_SetPulseOutLATxWork_M1_REV_POL0_P2 0075  
              _SetPulseOutLATxWork_M1_REV_POL0_P2 123B                            ?_WatchMotorDriveFinish 0075  
      __end_of_SetPulseOutLATxWork_M1_REV_POL1_P1 1214       __size_of_SetPulseOutLATxWork_M1_REV_POL1_P1 000D  
            ??_SetPulseOutLATxWork_M1_REV_POL1_P1 0075               ?_SetPulseOutLATxWork_M1_REV_POL1_P1 0075  
              _SetPulseOutLATxWork_M1_REV_POL1_P1 1207        __end_of_SetPulseOutLATxWork_M1_REV_POL1_P2 1255  
     __size_of_SetPulseOutLATxWork_M1_REV_POL1_P2 000D              ??_SetPulseOutLATxWork_M1_REV_POL1_P2 0075  
             ?_SetPulseOutLATxWork_M1_REV_POL1_P2 0075                _SetPulseOutLATxWork_M1_REV_POL1_P2 1248  
          __end_of_SpiCmdFunc_FwdPulsePositionCtl 1703           __size_of_SpiCmdFunc_FwdPulsePositionCtl 0021  
                  _SpiCmdFunc_FwdPulsePositionCtl 16E2               __size_of_SetDataTRISxWork_SPK_SHORT 0014  
                                             l727 0BBC                                               l728 0BB0  
                                             l744 0C32                                               l745 0C26  
                                             l935 0352                                               l864 0862  
                                             l779 0E19                                               l867 088C  
                                             _PR2 001B                                   _timer1ReloadVal 0166  
                                 _TMR2_Initialize 1461                                               wreg 0009  
                   CalcMotorStepCounter@motor_bit 0037                       __size_of_SetMotorBitMotorNo 0011  
                         ??_SetMotorAddShakePulse 0021       __end_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 127D  
    __size_of_SetPulseOutLATxWork_M1_REV_POL0_OFF 000E             ??_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075  
            ?_SetPulseOutLATxWork_M1_REV_POL0_OFF 0075               _SetPulseOutLATxWork_M1_REV_POL0_OFF 126F  
     __end_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 128B      __size_of_SetPulseOutLATxWork_M1_REV_POL1_OFF 000E  
           ??_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075              ?_SetPulseOutLATxWork_M1_REV_POL1_OFF 0075  
             _SetPulseOutLATxWork_M1_REV_POL1_OFF 127D              __size_of_SpiCmdFunc_EnableExcitating 0005  
                               _spkChangePosition 00DC                    ??_SpiCmdFunc_FwdPulseWithShake 003E  
          __end_of_SpiCmdFunc_FwdPulseWithCorrect 16A5           __size_of_SpiCmdFunc_FwdPulseWithCorrect 001C  
                  _SpiCmdFunc_FwdPulseWithCorrect 1689                                              l1302 0B3E  
                                            l1432 163E                                              l1336 0932  
                                            l1294 1499                                              l6010 0FA3  
                          ?_SetAfterMotorStopFunc 0020                                              l6200 0230  
                                            l6112 0090                                              l6130 0105  
                                            l6106 0076                                              l6036 077F  
                                            l6028 0EE6                                              l6212 0251  
                                            l6220 0265                                              l6204 0240  
                                            l6116 00B6                                              l6062 0D49  
                                            l6302 03AF                                              l6214 0261  
                                            l6206 0242                                              l6142 0141  
                                            l6126 00E8                                              l6080 14FB  
                                            l6232 027D                                              l6128 0102  
                                            l6144 0144                                              l6066 0D80  
                                            l6242 0296                                              l6154 0165  
                                            l6068 0CFA                                              l6324 03EA  
                                            l6308 03C0                                              l6260 030A  
                                            l6244 029C                                              l6164 018B  
                                            l5606 0BFC                                              l5614 0C0B  
                                            l6350 0771                                              l6326 03EE  
                                            l6174 01BA                                              l6094 094C  
                                            l5608 0C01                                              l5632 0C2D  
                                            l5624 0C1E                                              l5560 0882  
                                            l5720 139F                                              l6360 072D  
                                            l6352 06F9                                              l6336 06CA  
                                            l6272 035A                                              l6192 021B  
                                            l6168 01AB                                              l6408 169E  
                                            l6520 0C98                                              l5650 0C77  
                                            l5706 1638                                              l6290 0393  
                                            l6530 0CB8                                              l5820 0D9B  
                                            l5740 08E1                                              l5572 0B95  
                                            l5636 0C39                                              l5660 09D5  
                                            l5724 13A5                                              l5900 0E4B  
                                            l6372 0779                                              l6364 0736  
                                            l6540 0CD7                                              l6612 14A8  
                                            l6604 15FD                                              l5822 0DB8  
                                            l5566 15CB                                              l5750 0903  
                                            l5590 0BB7                                              l5582 0BA8  
                                            l5638 0C4A                                              l6366 073A  
                                            l6286 0385                                              l6294 039E  
                                            l5824 0DD5                                              l5832 0DFD  
                                            l5648 0C72                                              l6368 0772  
                                            l6288 038B                                              l5826 0DE3  
                                            l5594 0BC3                                              l5762 1179  
                                            l5658 09C3                                              l5850 061A  
                                            l6570 0B5E                                              l6562 0B3A  
                                            l6650 0AA4                                              l5828 0DF0  
                                            l5748 08FA                                              l5756 0907  
                                            l5596 0BD4                                              l5854 0628  
                                            l5846 060D                                              l6574 0B78  
                                            l6558 0B33                                              l6672 0E05  
                                            l5874 06B3                                              l5866 0661  
                                            l5858 0634                                              l5868 0677  
                                            l6598 1397                                              l5990 0F5C  
                                            l5998 0F7B                                              _LATA 010C  
                                            _LATB 010D                                              _LATC 010E  
                                            u4015 0874                                              u4034 15BD  
                                            u4035 15BC                                              u4235 163F  
                                            u5115 076F                                              u4405 0696  
                                            u4245 1644                                              u5135 0728  
                                            u4424 141F                                              u4344 0D8C  
                                            u4425 141E                                              u4345 0D8B  
                                            u5145 0734                                              u4434 140D  
                                            u4194 09A4                                              u4354 05F6  
                                            u4435 140C                                              u4195 09A3  
                                            u4355 05F5                                              u4524 1455  
                                            u4444 080F                                              u4604 0916  
                                            u4525 1454                                              u4445 080E  
                                            u4605 0915                                              u4454 1431  
                                            u4455 1430                                              u4464 13B8  
                                            u4465 13B7                                              u5354 15EF  
                                            u4555 0D52                                              u4715 0125  
                                            u5355 15EE                                              u4725 013F  
                                            u4574 1443                                              u4575 1442  
                                            u4735 014E                                              u4655 00B2  
                                            i1l80 0012                                              u4584 14EF  
                                            u4585 14EE                                              u4825 01D5  
                                            u4745 015A                                              u4665 00C0  
                                            u4835 01E9                                              u4675 00CC  
                                            u5387 1678                                              i1l85 001A  
                                            u4845 01FD                                              u4765 016F  
                                            u4685 00D8                                              u5397 1683  
                                            u4795 0189                                              _TMR2 001A  
                                            _WPUA 020C                                              _WPUB 020D  
                      __end_of_MoveTargetPosition 1499                     ??_SetMotorPositionSearchStart 0030  
                                            _main 0A42             __end_of_SpiCmdFunc_Search1008Position 085E  
          __size_of_SpiCmdFunc_Search1008Position 002B                     _SpiCmdFunc_Search1008Position 0833  
              __end_of_SetFwdPulseWithCorrectProc 0950                        _SetFwdPulseWithCorrectProc 0910  
                                            fsr0h 0005                                              fsr1h 0007  
                                            indf0 0000                                              fsr0l 0004  
                                            indf1 0001                                              fsr1l 0006  
                                            btemp 007E                           __end_of_SpiCmdFunc_Test 113A  
               __end_of_SpiCmdFunc_StartDetectVrs 1149                       __end_of_SetMotorStepCounter 1262  
                                            start 001C                 SPIControl_ExecuteCommand@cmd_type 0043  
                           ?_UpdateTargetPosition 002D                            __end_of_SPI_Initialize 119A  
                      ??_TMR1_SetInterruptHandler 0022                                 ___bmul@multiplier 0023  
                 ??_SpiCmdFunc_SearchBasePosition 003E                    __size_of_DetermineBasePosition 00A6  
                              _reqCheckLoadPosBit 00CE                                  _SaveLoadPosition 077D  
                   __end_of_DetermineBasePosition 1000                __size_of_AfterDetectedLoadPosition 039C  
                  InitPulsePositionTable@motor_no 0021                        __end_of_TMR2_Interrupt_SPK 099E  
                  __size_of_OSCILLATOR_Initialize 0006                     __end_of_OSCILLATOR_Initialize 116A  
                                           ?_main 0075                                 ??_SpkComparatorOn 0020  
                                           _T1CON 0018                                             _T2CON 001C  
                                           _LATC0 0870                                             i1l690 0591  
                                           i1l675 04F7                      AfterDetectedLoadPosition@res 0043  
                                           _TMR1H 0017                                             _TMR1L 0016  
                                           _TRISA 008C                                             _TRISB 008D  
                                           _TRISC 008E                         _SPIControl_RecieveComannd 1499  
                                  _reqVrsCheckBit 00D2                               _finishPositionCtSet 00C6  
                        __end_ofi1_TMR2_StopTimer 113D                                 _driveDirectionBit 005B  
                                __end_of_TMR1_ISR 11C7                                  __end_of_TMR2_ISR 1150  
                            _CalcMotorStepCounter 05F0                                    _WDT_Initialize 1150  
                                ?_SetMotorStopSPK 0075         __end_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 133F  
      __size_of_SetDataTRISxWork_M0_SPK_POL0_OPEN 000F               ??_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075  
              ?_SetDataTRISxWork_M0_SPK_POL0_OPEN 0075                 _SetDataTRISxWork_M0_SPK_POL0_OPEN 1330  
       __end_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 134E        __size_of_SetDataTRISxWork_M0_SPK_POL1_OPEN 000F  
             ??_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075                ?_SetDataTRISxWork_M0_SPK_POL1_OPEN 0075  
               _SetDataTRISxWork_M0_SPK_POL1_OPEN 133F                                 _spkReqVrsCheckBit 00DA  
                        _reqAfterMotorStopFuncBit 00D9                                _actCorrectDriveBit 0057  
                                __end_of_SPI_Open 0A42                           __end_of_TMR1_Initialize 1636  
                                           pclath 000A                         ??_SetExcitatingOutOffData 0021  
                                           status 0003                          ??_DeactivateHandPosition 0020  
                       SetAfterMotorStopFunc@func 0020                                             wtemp0 007E  
                                 _TMR2_StartTimer 113D                               InitPositionSearch@i 002E  
                __end_of_TblM0PulseChangePosition 184E                                   _TMR1_WriteTimer 128B  
                     __size_of_UpdataHandPosition 00A0                                   ?_SPI_Initialize 0075  
                               ??_ExcitatingOutOn 0021                                  ??_DAC_Initialize 0020  
                                 __initialization 001E                                    _doubleInterval 00CD  
                      ?_SpiCmdFunc_FwdPulseNormal 003D                                      __end_of_main 0AA8  
             SetMotorPositionSearchStart@motor_no 0030                           __end_of_TMR2_Initialize 1473  
                     ?_INTERRUPT_InterruptManager 0075                          _TMR2_SetInterruptHandler 116A  
                                          ??_main 016D                        ?_SpiCmdFunc_RevPulseNormal 003D  
                              _reqComparatorOnBit 00D4                              _cbAfterMotorStopFunc 00B0  
                        ??_InitPulsePositionTable 0020                                  _motorNoOperation 006B  
                          __end_of_WDT_Initialize 1154                             ?_CalcMotorStepCounter 0075  
                               ?_SpkComparatorOff 0075                             _cbAfterDetectLoadFunc 00A0  
                                __end_of_VrsCheck 161C                                  _searchTotalSteps 0120  
                                   _vrsCountValue 00C0                                ??_SpkComparatorOff 0020  
                                          _APFCON 011D                                            _ANSELA 018C  
                                          _ANSELB 018D                                            _ANSELC 018E  
          SpiCmdFunc_FwdPulseWithCorrect@motor_no 003D                              __end_of_ComparatorOn 166D  
                                          _BORCON 0116                                            _T1GCON 0019  
                          _detectLoadPositionType 012E                           TMR1_WriteTimer@timerVal 0075  
                                          i1l1028 1611                                            i1l4122 1619  
                                          i1l4132 165C                                            i1l4150 147D  
                                          i1l4142 1668                                            i1l4118 160E  
                                          i1l4152 1482                                            i1l4136 1661  
                                          i1l4340 08AD                                            i1l4422 1538  
                                          i1l4612 1566                                            i1l4614 156B  
                                          i1l4526 14CD                                            i1l4358 08D1  
                                          i1l4394 1521                                            i1l4652 157E  
                                          i1l4732 15AE                                            i1l4820 0489  
                                          i1l4654 1583                                            i1l4734 15B3  
                                          i1l4814 047E                                            i1l5376 1295  
                                          i1l4832 049F                                            i1l4808 0473  
                                          i1l4498 14B9                                            i1l4930 05B3  
                                          i1l4826 0494                                            i1l4692 1596  
                                          i1l4844 04B5                                            i1l4780 0431  
                                          i1l4694 159B                                            i1l4950 05E4  
                                          i1l4918 058A                                            i1l4942 05CB  
                                          i1l4838 04AA                                            i1l4936 05C1  
                                          i1l4952 05E9                                            i1l4864 04F0  
                                          i1l4946 05D4                                            i1l4882 0527  
                                          i1l4892 053A                                            i1l4876 0519  
                                          i1l4982 0988                                            i1l4896 054A  
                                          i1l4888 0531                                            i1l4898 054F  
                                _dataTRISAWork_M0 0061                                  _dataTRISAWork_M1 005E  
                                          u307_25 0588                                            u309_25 05A3  
                                          u295_25 04EE                                            u297_25 0509  
                                          _OSCCON 0099                                  _dataTRISBWork_M0 0060  
                                _dataTRISBWork_M1 005D                                  _dataTRISCWork_M0 005F  
                                _dataTRISCWork_M1 005C                                            _WDTCON 0097  
                   SetMotorAddShakePulse@motor_no 0023                               __end_of_TblMaxSteps 185A  
                          ??_UpdateTargetPosition 002F                                  ?_SpiCmdFunc_Test 003D  
                     ??_SetDataTRISxWork_SPK_OPEN 0075                                CorrectPosition@max 0028  
                              CorrectPosition@pos 0026                                 _correctDriveSteps 012A  
                     ?_SPIControl_SetNotification 003D              __end_of_TMR1_DefaultInterruptHandler 1138  
           __size_of_TMR1_DefaultInterruptHandler 0001                      _TMR1_DefaultInterruptHandler 1137  
                  ?_SpiCmdFunc_Search1008Position 003D                                            ___bmul 139D  
                                          ___wmul 1636                           SpiCmdFunc_Test@motor_no 003D  
               __end_of_SpiCmdFunc_FwdPulseNormal 178C                                _InitPositionSearch 0E1A  
                               ?_SetMotorStartSPK 0075             __end_of_SpiCmdFunc_SearchBasePosition 1800  
          __size_of_SpiCmdFunc_SearchBasePosition 0029                     _SpiCmdFunc_SearchBasePosition 17D7  
                              ??_SetMotorStartSPK 0022                                     ?_SetDriveType 0020  
                      ??_SpiCmdFunc_StopDetectVrs 003E                             ComparatorOff@motor_no 0075  
                           _m1PulsePositionCtWork 00E5                  ??_SpiCmdFunc_RevPulsePositionCtl 003E  
                 ?_SpiCmdFunc_RevPulsePositionCtl 003D                 __end_of_SpiCmdFunc_RevPulseNormal 1746  
                             ?_InitPositionSearch 0075                                   ?_WDT_Initialize 0075  
                                 _currentPosition 006C                          SetMotorStepCounter@steps 0030  
                         __end_of_TMR2_StartTimer 1140          TMR1_SetInterruptHandler@InterruptHandler 0020  
        TMR2_SetInterruptHandler@InterruptHandler 0020              SpiCmdFunc_FwdPulseWithShake@motor_no 003D  
                         __end_of_TMR1_WriteTimer 129A                             __end_of_TMR1_CallBack 11A5  
                                  _m0PulseOutStep 0073                                  ?_TMR1_Initialize 0075  
                               _SYSTEM_Initialize 14FD                                   _reqStopMotorBit 00D8  
                         __end_of__initialization 0059                             __end_of_TMR2_CallBack 11B0  
                     ??_SpiCmdFunc_StartDetectVrs 003E                               UpdataHandPosition@i 0037  
                 __size_of_DeactivateHandPosition 0012                                ?_SYSTEM_Initialize 0075  
                            ??_InitPositionSearch 0026                         __size_of_GetIsMotorActive 0015  
                                   ?_SetMotorStop 0075                               ___bmul@multiplicand 0020  
                        __size_of_CorrectPosition 003A                                    __pcstackCOMMON 0075  
                        __size_of_StartPulseOutM0 0076                          __size_of_StartPulseOutM1 0076  
                        _TblM0PulseChangePosition 1835                               ??_SYSTEM_Initialize 0022  
                         ??_WatchMotorDriveFinish 004E                                         ?_TMR1_ISR 0075  
                                       ?_TMR2_ISR 0075                     ?_TMR1_DefaultInterruptHandler 0075  
                   __size_of_ActivateHandPosition 0012                                  ?_TMR2_Initialize 0075  
                    ?_SpiCmdFunc_EnableExcitating 003D              SetMotorCorrectPositionStart@motor_no 0032  
                                  ??_SetDriveType 0021                                         ?_SPI_Open 0075  
                       _SetDataTRISxWork_SPK_OPEN 0898                              SetMotorStop@motor_no 0022  
                                  _OPTION_REGbits 0095                            ??_CalcMotorStepCounter 0030  
                      ?_SetMotorDisableExcitating 0075                             _handPositionActiveBit 00D1  
                 __size_of_InitPulsePositionTable 0011                             _m1PulseChangePosition 00E3  
                         ??_SetAfterMotorStopFunc 0022                 __size_of_SetMotorEnableExcitating 0012  
                              _offsetBasePosition 184E                         ?_SetMotorEnableExcitating 0075  
                        __end_of_SaveLoadPosition 0800                                       _TblMaxSteps 1856  
                       __end_of_SYSTEM_Initialize 1512                               _reqComparatorOffBit 00D3  
                  __size_of_SetMotorAddShakePulse 0019                     __end_of_SetMotorAddShakePulse 1602  
                                      __pbssBANK0 004F                                        __pbssBANK1 00A0  
                                      __pbssBANK2 0120                                        __pbssBANK3 01A0  
                       WatchMotorDriveFinish@func 016A                                    _m1PulseOutStep 0072  
              __size_of_SPIControl_RecieveComannd 0013                      ??_PriorUpdateCorrentPosition 002D  
                     ?_SetFwdPulseWithCorrectProc 003D                                _detectLoadPosition 2194  
                         __size_of_TMR2_Interrupt 01F7                                    ??_SetMotorStop 0020  
                             _reqSearchBasePosBit 0059                                   _SpkComparatorOn 11B0  
                                      __pmaintext 0A42                                           ?___bmul 0020  
                              _positionSearchStat 00B4                         _missingDetectFinePosition 00EE  
                           _spkOutTrisRequestFlug 00DB                                           ?___wmul 0020  
                               _SetMotorDirection 15B7                                        ??_TMR1_ISR 0077  
                                      ??_TMR2_ISR 007A                                _MoveTargetPosition 1486  
                                      __pintentry 0004                                         ?_VrsCheck 0075  
                                         _DACCON0 0118                                           _DACCON1 0119  
                                         _CM1CON0 0111                                           _CM1CON1 0112  
                                         _CM2CON0 0113                                           _CM2CON1 0114  
              PriorUpdateCorrentPosition@motor_no 002F        __end_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 159F  
     __size_of_SetDataTRISxWork_M1_SPK_POL0_SHORT 0018              ??_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075  
             ?_SetDataTRISxWork_M1_SPK_POL0_SHORT 0075                _SetDataTRISxWork_M1_SPK_POL0_SHORT 1587  
      __end_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 15B7       __size_of_SetDataTRISxWork_M1_SPK_POL1_SHORT 0018  
            ??_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075               ?_SetDataTRISxWork_M1_SPK_POL1_SHORT 0075  
              _SetDataTRISxWork_M1_SPK_POL1_SHORT 159F                                ?_SetMotorDirection 0020  
                      ?_SPIControl_ExecuteCommand 0075                                        ??_SPI_Open 0020  
                         _detectLoadPositionIndex 00BE                         _SpiCmdFunc_StartDetectVrs 1146  
                          _DeactivateHandPosition 143D                             __end_of_ComparatorOff 1486  
                         __size_of_TMR1_StopTimer 0002                     ??_SpiCmdFunc_EnableExcitating 003E  
                      __end_of_SetMotorBitMotorNo 13BF                         CalcMotorStepCounter@steps 0038  
                             ?_MoveTargetPosition 0075                                 _TblMaxSearchSteps 1852  
                                  _targetPosition 0160                                 _SetMotorFrequency 08D3  
                           __size_of_ComparatorOn 001C                               ??_SetMotorDirection 0021  
                  ?_SpiCmdFunc_SearchBasePosition 003D                 __end_of_SetMotorDisableExcitating 1419  
                          __size_of_SetMotorStart 000A                 SpiCmdFunc_FwdPulseNormal@motor_no 003D  
                               ?i1_TMR2_StopTimer 0075                                           _SSP1ADD 0212  
                                         _SSP1BUF 0211                                ?_SetMotorFrequency 0020  
                         __size_of_TMR2_StopTimer 0003           __end_of_VerifyHandPosition_LoadPosition 077D  
        __size_of_VerifyHandPosition_LoadPosition 00BD                 ??_VerifyHandPosition_LoadPosition 003E  
                ?_VerifyHandPosition_LoadPosition 003D                   _VerifyHandPosition_LoadPosition 06C0  
             __size_of_SPIControl_SetNotification 001C                                  ?_TMR2_StartTimer 0075  
                              _TMR2_Interrupt_SPK 0950                                   _ExcitatingOutOn 178C  
                          __size_of_SetOutPutLATX 0072                                  ?_TMR1_WriteTimer 0075  
                            SetDriveType@motor_no 0023                                ??i1_TMR2_StopTimer 0075  
       __end_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 135D        __size_of_SetDataTRISxWork_M1_SPK_POL0_OPEN 000F  
             ??_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075                ?_SetDataTRISxWork_M1_SPK_POL0_OPEN 0075  
               _SetDataTRISxWork_M1_SPK_POL0_OPEN 134E         __end_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 136C  
      __size_of_SetDataTRISxWork_M1_SPK_POL1_OPEN 000F               ??_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075  
              ?_SetDataTRISxWork_M1_SPK_POL1_OPEN 0075                 _SetDataTRISxWork_M1_SPK_POL1_OPEN 135D  
                                ??_SPI_Initialize 0020                             SetMotorStart@motor_no 0021  
               SpiCmdFunc_RevPulseNormal@motor_no 003D                      ??_SetDataTRISxWork_SPK_SHORT 0075  
                             ??_SetMotorFrequency 0022                              ??_MoveTargetPosition 003B  
                             ?_TMR2_Interrupt_SPK 0075                                 _SpiCmmandFunction 1800  
                          _InitPulsePositionTable 138C                         __end_of_SetMotorDirection 15D0  
                      ??_TMR2_SetInterruptHandler 0022                                   __size_of___bmul 0011  
                     ??_SpiCmdFunc_FwdPulseNormal 003E                                   __size_of___wmul 001B  
                    __size_of_SetMotorStepCounter 000D                                        ??_VrsCheck 0075  
                                    _ComparatorOn 1651                             _DetermineBasePosition 0F5A  
                               ??_CorrectPosition 002A                         __end_of_TblMaxSearchSteps 1856  
                                         __ptext1 0002                                           __ptext2 15E9  
                                         __ptext3 14FD                                           __ptext4 1150  
                                         __ptext5 1461                                           __ptext6 161C  
                                         __ptext7 0801                                           __ptext8 1190  
                                         __ptext9 15D0                 __end_of_SPIControl_ExecuteCommand 0B8D  
                               ??_StartPulseOutM0 0020                                 ??_StartPulseOutM1 0020  
                       __end_of_SetMotorFrequency 0910                    ??_TMR1_DefaultInterruptHandler 0075  
                     ??_SpiCmdFunc_RevPulseNormal 003E                              ??_TMR2_Interrupt_SPK 0076  
                          SetDriveType@drive_type 0020                                         _T1CONbits 0018  
                           _OSCILLATOR_Initialize 1164                                         _T2CONbits 001C  
               __size_of_TMR1_SetInterruptHandler 0008                          ??_PIN_MANAGER_Initialize 0020  
   __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 13F5    __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0012  
         ??_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075            ?_SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 0075  
           _SetPulseOutLATxWork_M1_SHAKE_POL0_OFF 13E3                         ?_TMR1_SetInterruptHandler 0020  
   __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 1407    __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0012  
         ??_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075            ?_SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 0075  
           _SetPulseOutLATxWork_M1_SHAKE_POL1_OFF 13F5                        __size_of_SYSTEM_Initialize 0015  
                                         clrloop0 11C8               __end_of_SetMotorPositionSearchStart 16E2  
                     _SetMotorPositionSearchStart 16C2                              end_of_initialization 0059  
    __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 12B8     __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 000F  
          ??_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075             ?_SetPulseOutLATxWork_M0_SHAKE_POL0_P0 0075  
            _SetPulseOutLATxWork_M0_SHAKE_POL0_P0 12A9      __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 12A9  
   __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 000F            ??_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075  
           ?_SetPulseOutLATxWork_M0_SHAKE_POL1_P0 0075              _SetPulseOutLATxWork_M0_SHAKE_POL1_P0 129A  
                         __end_of_SpkComparatorOn 11BB                         __end_of_SpiCmmandFunction 181C  
                      __end_of_UpdataHandPosition 0F5A                      ActivateHandPosition@motor_no 0022  
                            __end_of_SetDriveType 0E1A                          ??_SetAfterDetectLoadFunc 0022  
                                  _detectLoadCont 004F                                  _GetIsMotorActive 14E8  
                                  _detectLoadType 0051                          __size_of_SetMotorStopSPK 0017  
                                   _SetMotorStart 1172                         __size_of_SpkComparatorOff 000D  
                                  _OutRequestFlug 00D6                                     _SetOutPutLATX 0AA8  
                   SetAfterMotorStopFunc@motor_no 0022                                  ??_WDT_Initialize 0020  
                      ?_AfterDetectedLoadPosition 003D                                 _spi_configuration 185A  
                 ??_SpiCmdFunc_SearchLoadPosition 003E                  VerifyHandPosition_LoadPosition@i 004B  
                         __end_of_ExcitatingOutOn 17B0                             _excitatingOffMaskTime 00DF  
                                  _motorActiveBit 005A                              __end_of_SetMotorStop 143D  
             __size_of_SetFwdPulseWithCorrectProc 0040                                         _TRISBbits 008D  
           SPIControl_ExecuteCommand@motor_select 0044              SpiCmdFunc_DisableExcitating@motor_no 003D  
                       _SpiCmdFunc_FwdPulseNormal 1769                          ?_SetExcitatingOutOffData 0075  
                       __size_of_SetMotorStartSPK 0027                      _TblM1PulseChangePositionLast 00EC  
              __size_of_SetDataTRISxWork_SPK_OPEN 003B                                 _m1PulsePositionCt 00E7  
              __end_of_PriorUpdateCorrentPosition 09EC                        _PriorUpdateCorrentPosition 099E  
          __end_of_SpiCmdFunc_RevPulsePositionCtl 1724           __size_of_SpiCmdFunc_RevPulsePositionCtl 0021  
                  _SpiCmdFunc_RevPulsePositionCtl 1703                         _SpiCmdFunc_RevPulseNormal 1724  
           SpiCmdFunc_SearchLoadPosition@motor_no 003D                                    _excitatingTime 012C  
                              _motorM0StepCounter 0055                                    _TMR2_Interrupt 03F9  
                                  ?_SetMotorStart 0075                     __size_of_UpdateTargetPosition 0023  
                                   ?_SPI_ReadByte 0075                        __size_of_SetMotorDirection 0019  
                                  ?_SetOutPutLATX 0075                            ?_DetermineBasePosition 0075  
                SpiCmdFunc_StopDetectVrs@motor_no 003D                              _m0PulseOutChangeFunc 00CA  
                        _correctDriveDirectionBit 00D7              __end_of_TMR2_DefaultInterruptHandler 1139  
           __size_of_TMR2_DefaultInterruptHandler 0001                      _TMR2_DefaultInterruptHandler 1138  
                __end_of_SetMotorEnableExcitating 142B                                    __end_of___bmul 13AE  
            UpdateCurrentPositionByFinePosition@i 0030                          __size_of_SpiCmdFunc_Test 0001  
                       __end_of_spi_configuration 185E                    __size_of_WatchMotorDriveFinish 007F  
                                  __end_of___wmul 1651                     __end_of_WatchMotorDriveFinish 0CF8  
                               __size_of_TMR1_ISR 000C                                 __size_of_TMR2_ISR 0004  
                                  _TMR1_StopTimer 0002                            ?_OSCILLATOR_Initialize 0075  
                      __size_of_SetMotorFrequency 003D                                _motorM1StepCounter 0053  
                           _m0PulsePositionCtWork 00E6                 __end_of_AfterDetectedLoadPosition 03F9  
                         __size_of_DAC_Initialize 0006                                 __size_of_SPI_Open 0056  
                     ??_SetMotorDisableExcitating 0020                               start_initialization 001E  
             SpiCmdFunc_EnableExcitating@motor_no 003D                        SetMotorBitMotorNo@motor_no 0022  
                 __size_of_PIN_MANAGER_Initialize 0019                                    _TMR2_StopTimer 1140  
            __end_of_SetMotorCorrectPositionStart 0833             __size_of_SetMotorCorrectPositionStart 002A  
                    _SetMotorCorrectPositionStart 0809                    __size_of_SetAfterMotorStopFunc 000A  
                   __end_of_SetAfterMotorStopFunc 1186                __size_of_SpiCmdFunc_StartDetectVrs 0003  
                               ?_SaveLoadPosition 0075               DetermineBasePosition@base_pos_index 0037  
                    __end_of_ActivateHandPosition 1461                __end_of_SetDataTRISxWork_SPK_SHORT 14E8  
                      _SetDataTRISxWork_SPK_SHORT 14D4                            __end_of_TMR2_Interrupt 05F0  
                              ??_SaveLoadPosition 0026                                  ?_SpkComparatorOn 0075  
               __size_of_SpiCmdFunc_StopDetectVrs 0003                         ?_SpiCmdFunc_StopDetectVrs 003D  
                           _detectLoadPositionPtr 0124       UpdateCurrentPositionByFinePosition@motor_no 0031  
                 __size_of_SetAfterDetectLoadFunc 000A                       __size_of_InitPositionSearch 00A0  
                                  ??_SPI_ReadByte 0020                         SetMotorFrequency@set_freq 0021  
                       SetMotorFrequency@motor_no 0023                    SPI_Open@spiUniqueConfiguration 0023  
               SetMotorDisableExcitating@motor_no 0022                          __size_of_TMR1_Initialize 001A  
                               SaveLoadPosition@i 0037                               _excitatingEnableBit 00E0  
                                        ??___bmul 0021                                          ??___wmul 0024  
                         ?_DeactivateHandPosition 0075                                  _addShakePulseBit 0070  
                               ??_SetMotorStopSPK 0022                            __end_of_TMR1_StopTimer 0004  
                SetMotorEnableExcitating@motor_no 0022                     ?_TMR2_DefaultInterruptHandler 0075  
                            ComparatorOn@motor_no 0075                                      _loadPosition 2138  
                             GetIsMotorActive@res 0023                            __size_of_TMR1_CallBack 000B  
                     ??_SPIControl_ExecuteCommand 0040                                 __size_of_VrsCheck 001A  
                          __size_of_TMR2_CallBack 000B                                       __pbssBIGRAM 2138  
                                ?_ExcitatingOutOn 0075                   __end_of_SetExcitatingOutOffData 16C2  
                          __end_of_TMR2_StopTimer 1143                         UpdateTargetPosition@steps 002D  
             AfterDetectedLoadPosition@move_steps 0044                                       __pbssCOMMON 0070  
                                       ___latbits 0002                             _m0PulseChangePosition 00E4  
                                   __pcstackBANK0 0020                                     __pcstackBANK2 016A  
                        __size_of_TMR2_Initialize 0012                     __size_of_CalcMotorStepCounter 00D0  
           __end_of_SpiCmdFunc_SearchLoadPosition 0801            __size_of_SpiCmdFunc_SearchLoadPosition 0001  
                   _SpiCmdFunc_SearchLoadPosition 0800                             __size_of_SetDriveType 0094  
                             _SetMotorStepCounter 1255                     ?_SetMotorCorrectPositionStart 0075  
     __end_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 1529      __size_of_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0017  
           ??_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075              ?_SetPulseOutLATxWork_M0_FWD_POL0_OFF 0075  
             _SetPulseOutLATxWork_M0_FWD_POL0_OFF 1512       __end_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 1540  
    __size_of_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0017             ??_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M0_FWD_POL1_OFF 0075               _SetPulseOutLATxWork_M0_FWD_POL1_OFF 1529  
                              _SetMotorBitMotorNo 13AE                                   ?_TMR2_Interrupt 0075  
                                       _dataTRISA 0064                                         _dataTRISB 0063  
                                       _dataTRISC 0062                           ?_InitPulsePositionTable 0075  
                           _SetMotorAddShakePulse 15E9                                   ??_SetMotorStart 0021  
                                       __pnvBANK2 0164                         _SetMotorDisableExcitating 1407  
                                 _CorrectPosition 085E                 SpiCmdFunc_StartDetectVrs@motor_no 003D  
                                _SpkComparatorOff 1262                                   ??_SetOutPutLATX 0020  
                                 _StartPulseOutM0 0B8D                                   _StartPulseOutM1 0C03  
                             ?_SetMotorBitMotorNo 0075                            _PIN_MANAGER_Initialize 15D0  
                       __size_ofi1_TMR2_StopTimer 0002                    __end_of_DeactivateHandPosition 144F  
                       _reqAfterDetectLoadFuncBit 00D0                  __end_of_TMR1_SetInterruptHandler 0809  
                  DeactivateHandPosition@motor_no 0022                                         __ptext100 1214  
                                       __ptext101 1207                                         __ptext110 1330  
                                       __ptext102 11FA                                         __ptext111 13BF  
                                       __ptext103 11ED                                         __ptext120 12E5  
                                       __ptext112 137C                                         __ptext104 11E0  
                                       __ptext121 12D6                                         __ptext113 1321  
                                       __ptext105 11D3                                         __ptext130 119A  
                                       __ptext122 12C7                                         __ptext114 136C  
                                       __ptext106 156F                                         __ptext131 1137  
                                       __ptext123 12B8                                         __ptext115 1312  
                                       __ptext107 133F                                         __ptext124 12A9  
                                       __ptext116 1529                                         __ptext108 13D1  
                                       __ptext125 129A                                         __ptext117 1303  
                                       __ptext109 1557                                         __ptext126 1651  
                                       __ptext118 1512                                         __ptext127 1473  
                                       __ptext119 12F4                                         __ptext128 11BB  
                                       __ptext129 128B                              ?_SetMotorStepCounter 0030  
                                 ?_TMR1_StopTimer 0075                             __size_of_SetMotorStop 0012  
                    ??_INTERRUPT_InterruptManager 007A                            _SetAfterDetectLoadFunc 1186  
                      SetAfterDetectLoadFunc@func 0020                                      _SetDriveType 0D86  
                        _SetMotorEnableExcitating 1419                          __end_of_GetIsMotorActive 14FD  
                                       _driveType 00C2                                 ??_SpiCmdFunc_Test 003E  
                                 ?_TMR2_StopTimer 0075                              ??_SetMotorBitMotorNo 0020  
                  SetAfterDetectLoadFunc@motor_no 0022                SPIControl_SetNotification@motor_no 003D  
                                _SetMotorStartSPK 17B0                    __end_of_InitPulsePositionTable 139D  
                       _SPIControl_ExecuteCommand 0B1A      __end_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11ED  
   __size_of_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 000D            ??_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075  
           ?_SetPulseOutLATxWork_M1_SHAKE_POL0_P0 0075              _SetPulseOutLATxWork_M1_SHAKE_POL0_P0 11E0  
    __end_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11E0     __size_of_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 000D  
          ??_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075             ?_SetPulseOutLATxWork_M1_SHAKE_POL1_P0 0075  
            _SetPulseOutLATxWork_M1_SHAKE_POL1_P0 11D3                                     _TMR1_CallBack 119A  
                 _correctDriveFinishPositionCtSet 0128                                    ___wmul@product 0024  
                ??_SpiCmdFunc_FwdPulsePositionCtl 003E                   ?_SpiCmdFunc_FwdPulsePositionCtl 003D  
                     __size_of_MoveTargetPosition 0013                                         clear_ram0 11C7  
                                   _TMR2_CallBack 11A5                __size_of_SpiCmdFunc_FwdPulseNormal 0023  
                                        _PIE1bits 0091                            __size_of_ComparatorOff 0013  
                        __size_of_TMR2_StartTimer 0003                        ?_SPIControl_RecieveComannd 0075  
                               _loadPositionIndex 00BA                          __size_of_TMR1_WriteTimer 000F  
             __size_of_INTERRUPT_InterruptManager 0018                                      _SetMotorStop 142B  
                                        _PIR1bits 0011                                          _PIR2bits 0012  
          SpiCmdFunc_FwdPulsePositionCtl@motor_no 003D              __size_of_SetMotorPositionSearchStart 0020  
                    ??_SPIControl_SetNotification 003E                             ??_SetMotorStepCounter 0032  
                                        _SSP1CON1 0215                                          _SSP1CON2 0216  
              __size_of_SpiCmdFunc_RevPulseNormal 0022                                          _TMR1_ISR 11BB  
                                        _TMR2_ISR 114C                                          _SSP1STAT 0214  
                              _UpdataHandPosition 0EBA                          GetIsMotorActive@motor_no 0022  
             __end_of_SpiCmdFunc_EnableExcitating 1159                       _SpiCmdFunc_EnableExcitating 1154  
                                _spkOutChangeFunc 00C4                  ??_SpiCmdFunc_FwdPulseWithCorrect 003E  
                 ?_SpiCmdFunc_FwdPulseWithCorrect 003D                              _ActivateHandPosition 144F  
                                        _SPI_Open 09EC                                 ??_TMR1_Initialize 0022  
                           SetMotorFrequency@type 0020                                 ___wmul@multiplier 0020  
                                  _DAC_Initialize 115E                       ??_AfterDetectedLoadPosition 003C  
                     __size_of_TMR2_Interrupt_SPK 004E                               ?_UpdataHandPosition 0075  
               AfterDetectedLoadPosition@motor_no 003D                              __end_of_SPI_ReadByte 1146  
                  ??_TMR2_DefaultInterruptHandler 0075                 __size_of_TMR2_SetInterruptHandler 0008  
                       ?_TMR2_SetInterruptHandler 0020              __end_of_SpiCmdFunc_DisableExcitating 115E  
           __size_of_SpiCmdFunc_DisableExcitating 0005                      _SpiCmdFunc_DisableExcitating 1159  
                         SetMotorAddShakePulse@sw 0020                           __end_of_CorrectPosition 0898  
                                  ?_TMR1_CallBack 0075                            ?_SetMotorAddShakePulse 0020  
                         __end_of_StartPulseOutM0 0C03                           __end_of_StartPulseOutM1 0C79  
     __end_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 14C0      __size_of_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0014  
           ??_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075              ?_SetPulseOutLATxWork_M1_FWD_POL0_OFF 0075  
             _SetPulseOutLATxWork_M1_FWD_POL0_OFF 14AC       __end_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 14D4  
    __size_of_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0014             ??_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M1_FWD_POL1_OFF 0075               _SetPulseOutLATxWork_M1_FWD_POL1_OFF 14C0  
                  ?_SpiCmdFunc_SearchLoadPosition 003D                       ?_PriorUpdateCorrentPosition 0075  
                    UpdateTargetPosition@motor_no 0031                                 ??_TMR2_Initialize 0022  
                                  ?_TMR2_CallBack 0075                              ??_UpdataHandPosition 002D  
                __end_of_TblM1PulseChangePosition 1835                    ??_SetMotorCorrectPositionStart 0030  
                         ??_DetermineBasePosition 002D                 __end_of_SPIControl_RecieveComannd 14AC  
                __size_of_SetExcitatingOutOffData 001D        __end_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 156F  
     __size_of_SetDataTRISxWork_M0_SPK_POL0_SHORT 0018              ??_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075  
             ?_SetDataTRISxWork_M0_SPK_POL0_SHORT 0075                _SetDataTRISxWork_M0_SPK_POL0_SHORT 1557  
      __end_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 1587       __size_of_SetDataTRISxWork_M0_SPK_POL1_SHORT 0018  
            ??_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075               ?_SetDataTRISxWork_M0_SPK_POL1_SHORT 0075  
              _SetDataTRISxWork_M0_SPK_POL1_SHORT 156F                     DetermineBasePosition@motor_no 0038  
                         __size_of_SPI_Initialize 000A                           ??_OSCILLATOR_Initialize 0020  
                                        _VrsCheck 1602                               _motorStepCounterSet 00AC  
                           ?_ActivateHandPosition 0075            SpiCmdFunc_RevPulsePositionCtl@motor_no 003D  
                          __end_of_DAC_Initialize 1164             SpiCmdFunc_Search1008Position@motor_no 003D  
                        _TMR1_SetInterruptHandler 0801              __end_of_SpiCmdFunc_FwdPulseWithShake 113B  
           __size_of_SpiCmdFunc_FwdPulseWithShake 0001                      _SpiCmdFunc_FwdPulseWithShake 113A  
                              _OutTrisRequestFlug 00D5        __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 12D6  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P1 000F              ??_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL0_P1 0075                _SetPulseOutLATxWork_M0_FWD_POL0_P1 12C7  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 1303       __size_of_SetPulseOutLATxWork_M0_FWD_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075               ?_SetPulseOutLATxWork_M0_FWD_POL0_P2 0075  
              _SetPulseOutLATxWork_M0_FWD_POL0_P2 12F4        __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 12C7  
     __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P1 000F              ??_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M0_FWD_POL1_P1 0075                _SetPulseOutLATxWork_M0_FWD_POL1_P1 12B8  
      __end_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 1312       __size_of_SetPulseOutLATxWork_M0_FWD_POL1_P2 000F  
            ??_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075               ?_SetPulseOutLATxWork_M0_FWD_POL1_P2 0075  
              _SetPulseOutLATxWork_M0_FWD_POL1_P2 1303                             _TMR1_InterruptHandler 0164  
                                   _ComparatorOff 1473                         SetMotorDirection@motor_no 0023  
                    __end_of_UpdateTargetPosition 1769                        UpdataHandPosition@motor_no 0038  
                __end_of_SpiCmdFunc_StopDetectVrs 114C                DetermineBasePosition@load_pos_type 0035  
                                _positionSearchCt 00A8                                          __ptext10 1164  
                                        __ptext11 115E                                          __ptext20 1146  
                                        __ptext12 09EC                      _TblM0PulseChangePositionLast 00ED  
                                        __ptext21 1703                                          __ptext13 1499  
                                        __ptext30 166D                                          __ptext22 16E2  
                                        __ptext14 0C79                                          __ptext31 005D  
                                        __ptext23 1689                                          __ptext15 0910  
                                        __ptext40 144F                                          __ptext32 06C0  
                                        __ptext24 17D7                                          __ptext16 0833  
                                        __ptext41 1143                                          __ptext33 0809  
                                        __ptext25 0800                                          __ptext17 1159  
                                        __ptext50 178C                                          __ptext42 0B1A  
                                        __ptext34 0CF8                                          __ptext26 113A  
                                        __ptext18 1154                                          __ptext51 0AA8  
                                        __ptext43 1540                                          __ptext35 0EBA  
                                        __ptext27 1724                                          __ptext19 1149  
                                        __ptext60 14E8                                          __ptext52 16C2  
                                        __ptext44 1140                                          __ptext36 13AE  
                                        __ptext28 1769                                          __ptext61 1746  
                                        __ptext53 0E1A                                          __ptext45 1262  
                                        __ptext37 077D                                          __ptext29 1139  
                                        __ptext70 08D3                                          __ptext62 05F0  
                                        __ptext54 1636                                          __ptext46 16A5  
                                        __ptext38 1486                                          __ptext71 15B7  
                                        __ptext63 1255                                          __ptext55 139D  
                                        __ptext47 17B0                                          __ptext39 0F5A  
                                        __ptext80 1138                                          __ptext72 0D86  
                                        __ptext64 099E                                          __ptext56 143D  
                                        __ptext48 116A                                          __ptext81 0950  
                                        __ptext73 1419                                          __ptext65 085E  
                                        __ptext57 142B                                          __ptext49 11B0  
                                        __ptext90 134E                                          __ptext82 0898  
                                        __ptext74 1407                                          __ptext66 1172  
                                        __ptext58 1186                                          __ptext91 13E3  
                                        __ptext83 14D4                                          __ptext75 138C  
                                        __ptext67 0C03                                          __ptext59 117C  
                                        __ptext92 127D                                          __ptext84 113B  
                                        __ptext68 0B8D                                          __ptext93 1248  
                                        __ptext85 1602                                          __ptext77 114C  
                                        __ptext69 113D                                          __ptext94 126F  
                                        __ptext86 159F                                          __ptext78 11A5  
                                        __ptext95 123B                                          __ptext87 135D  
                                        __ptext79 03F9                                          __ptext96 14C0  
                                        __ptext88 13F5                                          __ptext97 122E  
                                        __ptext89 1587                                          __ptext98 14AC  
                                        __ptext99 1221                                      _SSP1CON1bits 0215  
                   ?_SpiCmdFunc_DisableExcitating 003D                       SetMotorStepCounter@motor_no 0032  
                     ?_SetDataTRISxWork_SPK_SHORT 0075                         _AfterDetectedLoadPosition 005D  
                                   __size_of_main 0066                                   _SetMotorStopSPK 1540  
                    ??_SetFwdPulseWithCorrectProc 003E                              _reqCorrectBasePosBit 0058  
                                i1_TMR2_StopTimer 113B                                  _loadPositionType 01A0  
                       __size_of_SaveLoadPosition 0083                                     _spkPositionCt 00DD  
                                        int$flags 007E                              _m1PulseOutChangeFunc 00C8  
                               ??_TMR2_StartTimer 0020                __end_of_INTERRUPT_InterruptManager 001C  
                      _INTERRUPT_InterruptManager 0004                                   ?_DAC_Initialize 0075  
                               ??_TMR1_WriteTimer 0077                __size_of_SetMotorDisableExcitating 0012  
                                  ?_ComparatorOff 0075     __end_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 13D1  
  __size_of_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0012           ??_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075  
          ?_SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 0075             _SetPulseOutLATxWork_M0_SHAKE_POL0_OFF 13BF  
   __end_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 13E3    __size_of_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0012  
         ??_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075            ?_SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 0075  
           _SetPulseOutLATxWork_M0_SHAKE_POL1_OFF 13D1                                    _recieveCommand 00CC  
                           _WatchMotorDriveFinish 0C79           UpdateCurrentPositionByFinePosition@diff 002E  
                                 _detectFinePosCt 00B8        __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 1207  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P1 000D              ??_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL0_P1 0075                _SetPulseOutLATxWork_M1_FWD_POL0_P1 11FA  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 122E       __size_of_SetPulseOutLATxWork_M1_FWD_POL0_P2 000D  
            ??_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075               ?_SetPulseOutLATxWork_M1_FWD_POL0_P2 0075  
              _SetPulseOutLATxWork_M1_FWD_POL0_P2 1221        __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 11FA  
     __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P1 000D              ??_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M1_FWD_POL1_P1 0075                _SetPulseOutLATxWork_M1_FWD_POL1_P1 11ED  
      __end_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 123B       __size_of_SetPulseOutLATxWork_M1_FWD_POL1_P2 000D  
            ??_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075               ?_SetPulseOutLATxWork_M1_FWD_POL1_P2 0075  
              _SetPulseOutLATxWork_M1_FWD_POL1_P2 122E                     ?_SpiCmdFunc_FwdPulseWithShake 003D  
                                      _INTCONbits 000B                          __end_of_SpkComparatorOff 126F  
     __end_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 137C      __size_of_SetPulseOutLATxWork_M0_REV_POL0_OFF 0010  
           ??_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075              ?_SetPulseOutLATxWork_M0_REV_POL0_OFF 0075  
             _SetPulseOutLATxWork_M0_REV_POL0_OFF 136C       __end_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 138C  
    __size_of_SetPulseOutLATxWork_M0_REV_POL1_OFF 0010             ??_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075  
            ?_SetPulseOutLATxWork_M0_REV_POL1_OFF 0075               _SetPulseOutLATxWork_M0_REV_POL1_OFF 137C  
                                ??_TMR2_Interrupt 0077                                _detectBasePosition 015C  
                                 ??_TMR1_CallBack 0075                   ??_SpiCmdFunc_Search1008Position 003E  
                         __size_of_WDT_Initialize 0004                                  ?_CorrectPosition 0026  
                                        intlevel1 0000                                   ??_TMR2_CallBack 007A  
                            _detectRoughTotalMove 00A4                             _SetAfterMotorStopFunc 117C  
                                _detectSpkTurnBit 00DE                                  ?_StartPulseOutM0 0075  
                                ?_StartPulseOutM1 0075                        __end_of_InitPositionSearch 0EBA  
                         ?_PIN_MANAGER_Initialize 0075                        InitPositionSearch@motor_no 002F  
                                VrsCheck@motor_no 0076                        ?_SetDataTRISxWork_SPK_OPEN 0075  
VerifyHandPosition_LoadPosition@misalignment_flag 0048                                  ??_TMR1_StopTimer 0020  
                                _detectRoughPosCt 00B6                      __end_of_CalcMotorStepCounter 06C0  
              __end_of_SPIControl_SetNotification 1689                        _SPIControl_SetNotification 166D  
                              _m0PulseOutStepWork 00E2                __size_of_SPIControl_ExecuteCommand 0073  
                      ??_SetMotorEnableExcitating 0020                          __size_of_SpkComparatorOn 000B  
                        _TblM1PulseChangePosition 181C                                   _SpiCmdFunc_Test 1139  
                          ??_ActivateHandPosition 0020                          __end_of_SetMotorStartSPK 17D7  
                         ?_SetAfterDetectLoadFunc 0020       VerifyHandPosition_LoadPosition@remain_steps 0046  
                                   ?_ComparatorOn 0075                          SaveLoadPosition@motor_no 0036  
                                ??_TMR2_StopTimer 0020                               _pulseOutLATAWork_M0 0067  
                             _pulseOutLATAWork_M1 00EB                                       _polarityBit 0071  
                           __size_of_SPI_ReadByte 0003                               _pulseOutLATBWork_M0 0066  
                             _pulseOutLATBWork_M1 00EA        __end_of_SetPulseOutLATxWork_M0_REV_POL0_P1 12F4  
     __size_of_SetPulseOutLATxWork_M0_REV_POL0_P1 000F              ??_SetPulseOutLATxWork_M0_REV_POL0_P1 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL0_P1 0075                _SetPulseOutLATxWork_M0_REV_POL0_P1 12E5  
      __end_of_SetPulseOutLATxWork_M0_REV_POL0_P2 1321       __size_of_SetPulseOutLATxWork_M0_REV_POL0_P2 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL0_P2 0075               ?_SetPulseOutLATxWork_M0_REV_POL0_P2 0075  
              _SetPulseOutLATxWork_M0_REV_POL0_P2 1312        __end_of_SetPulseOutLATxWork_M0_REV_POL1_P1 12E5  
     __size_of_SetPulseOutLATxWork_M0_REV_POL1_P1 000F              ??_SetPulseOutLATxWork_M0_REV_POL1_P1 0075  
             ?_SetPulseOutLATxWork_M0_REV_POL1_P1 0075                _SetPulseOutLATxWork_M0_REV_POL1_P1 12D6  
      __end_of_SetPulseOutLATxWork_M0_REV_POL1_P2 1330       __size_of_SetPulseOutLATxWork_M0_REV_POL1_P2 000F  
            ??_SetPulseOutLATxWork_M0_REV_POL1_P2 0075               ?_SetPulseOutLATxWork_M0_REV_POL1_P2 0075  
              _SetPulseOutLATxWork_M0_REV_POL1_P2 1321                                     __pstringtext1 1800  
                                   __pstringtext2 181C                                     __pstringtext3 1835  
                                   __pstringtext4 184E                                     __pstringtext5 1852  
                                   __pstringtext6 1856                                     __pstringtext7 185A  
                             _pulseOutLATCWork_M0 0065                               _pulseOutLATCWork_M1 00E9  
                             _reqCorrectFinePoBit 00CF               __size_of_PriorUpdateCorrentPosition 004E  
                               ?_GetIsMotorActive 0075                                ??_GetIsMotorActive 0020  
         VerifyHandPosition_LoadPosition@load_pos 004C                           __end_of_SetMotorStopSPK 1557  
         VerifyHandPosition_LoadPosition@curt_pos 0049                                 _m0PulsePositionCt 00E8  
                        _SpiCmdFunc_StopDetectVrs 1149                      ?_SetMotorPositionSearchStart 0075  
                  __end_of_PIN_MANAGER_Initialize 15E9                          __size_of_ExcitatingOutOn 0024  
                      ?_SpiCmdFunc_StartDetectVrs 003D           VerifyHandPosition_LoadPosition@motor_no 003D  
     __end_of_UpdateCurrentPositionByFinePosition 0D86      __size_of_UpdateCurrentPositionByFinePosition 008E  
           ??_UpdateCurrentPositionByFinePosition 0026              ?_UpdateCurrentPositionByFinePosition 0075  
             _UpdateCurrentPositionByFinePosition 0CF8                    ??_SpiCmdFunc_DisableExcitating 003E  
                           _TMR2_InterruptHandler 0168                             __end_of_SetMotorStart 117C  
               __end_of_SetDataTRISxWork_SPK_OPEN 08D3                                   _TMR1_Initialize 161C  
                         _SetExcitatingOutOffData 16A5                              _UpdateTargetPosition 1746  
                     ??_SPIControl_RecieveComannd 016C                                      _SPI_ReadByte 1143  
